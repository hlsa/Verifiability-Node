diagram stop

import definitions::*

stm StopControl {
	uses StopEvents initial i0
	state Allowing {
	}
	var emergencyStopped : boolean = false
	var environmentallyStopped : boolean = false

	event environmentalStop
	event environmentalResume
	transition t0 {
		from i0
		to NotStarted
	}
	transition t2 {
		from Allowing
		to Allowing
		trigger 
		
		
		emergencyStop
		condition 
		
		
		not emergencyStopped
		action ( emergencyStopped = true ; compliantMode = true ; enableCompliantMode ( ) )
	}
	transition t3 {
		from Allowing
		to Allowing
		trigger 
		
		
		
		environmentalStop
		condition 
		
		
		
		not environmentallyStopped
		action 
	
	compliantMode = true ; environmentallyStopped = true ; enableCompliantMode ( )
	}
	transition t4 {
		from Allowing
		to Allowing
		trigger 
		
		
		
		resumeDressing
		condition emergencyStopped
		action 
	
	resetMovement ; emergencyStopped = false
	}
	transition t5 {
		from Allowing
		to Allowing
		trigger 
		
		
		
		environmentalResume
		condition environmentallyStopped
		action 
	
	resetMovement ; environmentallyStopped = false
	}
var collisionStopped : boolean = false
	transition t6 {
		from Allowing
		to Allowing
		trigger 
		
		
		
		collisionStop
		condition 
		
		
		
		not collisionStopped
		action compliantMode = true ; collisionStopped = true ; collisionHRIInteraction ( ) ; enableCompliantMode ( )
	}
	event allowedMovement
	event noticedMovementOccurred

	uses MovementCoordination
state Awaiting {
	}
	transition t1 {
		from Allowing
		to Awaiting
		condition not emergencyStopped /\ not collisionStopped /\ not environmentallyStopped
		action allowMovement
	}
	transition t7 {
		from Awaiting
		to Allowing
		trigger 
	
	movementOccurred
	}
state NotStarted {
	}
	transition t8 {
		from Awaiting
		to Awaiting
		trigger 
		
		environmentalResume
		condition environmentallyStopped
		action environmentallyStopped = false
	}
	transition t9 {
		from Awaiting
		to Awaiting
		trigger 
		
		emergencyStop
		condition 
		
		not emergencyStopped
		action compliantMode = true ; emergencyStopped = true ; enableCompliantMode ( )
	}
	transition t10 {
		from Awaiting
		to Awaiting
		trigger 
		
		environmentalStop
		condition 
		
		not environmentallyStopped
		action compliantMode = true ; environmentallyStopped = true ; enableCompliantMode ( )
	}
	transition t11 {
		from Awaiting
		to Awaiting
		trigger 
		resumeDressing
		condition emergencyStopped
		action emergencyStopped = false
	}
	transition t13 {
		from Allowing
		to Allowing
		trigger 
		
		
		collisionResume
		condition collisionStopped
		action 
	resetMovement ; collisionStopped = false
	}
	transition t14 {
		from Awaiting
		to Awaiting
		trigger 
		collisionStop
		condition 
		not collisionStopped
		action compliantMode = true ; collisionStopped = true ; collisionHRIInteraction ( ) ; enableCompliantMode ( )
	}
	transition t15 {
		from Awaiting
		to Awaiting
		trigger 
		collisionResume
		condition collisionStopped
		action collisionStopped = false
	}
transition t16 {
		from NotStarted
		to NotStarted
		trigger 
		
		environmentalResume
		condition environmentallyStopped
		action environmentallyStopped = false
	}
	transition t17 {
		from NotStarted
		to NotStarted
		trigger 
		emergencyStop
		condition 
		not emergencyStopped
		action emergencyStopped = true
	}
	transition t18 {
		from NotStarted
		to NotStarted
		trigger 
		
		environmentalStop
		condition 
		
		not environmentallyStopped
		action environmentallyStopped = true
	}
	transition t19 {
		from NotStarted
		to NotStarted
		trigger 
		
		resumeDressing
		condition emergencyStopped
		action emergencyStopped = false
	}
	transition t20 {
		from NotStarted
		to NotStarted
		trigger 
		collisionStop
		condition 
		not collisionStopped
		action collisionStopped = true
	}
	transition t21 {
		from NotStarted
		to NotStarted
		trigger 
		
		collisionResume
		condition collisionStopped
		action collisionStopped = false
	}
	transition t22 {
		from NotStarted
		to Allowing
	trigger 
	movementStarted
		condition not environmentallyStopped /\ not collisionStopped /\ not emergencyStopped
		action disableStoppedMode ( )
	}
	transition t23 {
		from Allowing
		to NotStarted
	trigger 
	movementEnded
		action enableStoppedMode ( )
	}
	uses HRICoordination requires SafetyModeControl requires HRIOperations var compliantMode : boolean = false
	state CheckingHRI {
	}
	transition t24 {
		from NotStarted
		to CheckingHRI
		trigger checkHRI
	}
	transition t25 {
		from CheckingHRI
		to NotStarted
		condition not environmentallyStopped /\ not emergencyStopped /\ not collisionStopped
		action allowHRI
	}
	transition t26 {
		from CheckingHRI
		to CheckingHRI
		trigger environmentalResume
		condition environmentallyStopped
		action environmentallyStopped = false
	}
	transition t27 {
		from CheckingHRI
		to CheckingHRI
		trigger emergencyStop
		condition not emergencyStopped
		action emergencyStopped = true
	}
	transition t28 {
		from CheckingHRI
		to CheckingHRI
		trigger environmentalStop
		condition not environmentallyStopped
		action environmentallyStopped = true
	}
	transition t29 {
		from CheckingHRI
		to CheckingHRI
		trigger resumeDressing
		condition emergencyStopped
		action emergencyStopped = false
	}
	transition t30 {
		from CheckingHRI
		to CheckingHRI
		trigger collisionStop
		condition not collisionStopped
		action collisionStopped = true
	}
	transition t31 {
		from CheckingHRI
		to CheckingHRI
		trigger collisionResume
		condition collisionStopped
		action collisionStopped = false
	}
	transition t12 {
		from Allowing
		to Allowing
		condition compliantMode /\ not emergencyStopped /\ not collisionStopped /\ not environmentallyStopped
		action disableCompliantMode ( ) ; compliantMode = false
	}
}

stm EnvironmentalMonitor {
	uses EnvironmentalEvents 
	var otherAgent : boolean
	var present: boolean
	event environmentalStop
	event environmentalResume
	initial i0

	state Monitoring {
		state Enabled {
		}
		state Stopped {
		}
		initial i0
		transition t0 {
			from i0
			to Enabled
		}
		transition t1 {
			from Stopped
			to Enabled
			condition not otherAgent /\ level != NoiseLevel :: High /\ present
		}
		transition t2 {
			from Enabled
			to Stopped
			condition otherAgent \/ level == NoiseLevel :: High \/ not present
		}
	}
	var level : NoiseLevel

	transition t0 {
		from i0
		to Monitoring
	}
	transition t9 {
		from Monitoring
		to Monitoring
		trigger backgroundNoiseLevel ? level
	}
	transition t10 {
		from Monitoring
		to Monitoring
		trigger userPresent ? present
	}
	transition t11 {
		from Monitoring
		to Monitoring
		trigger otherAgentDetected ? otherAgent
	}
}

