package dressingcontrol

import definitions::*

stm SDressingControl {
	initial i0
	
	requires FrankaArmControl
	uses DressingEvents
	requires HRIOperations
	
	var currentJoint : int = 2
	state GarmentAcquisition {
		state LookingForGarment {
			entry detectGarment ( )
		}
		initial i0

		state EngageGarment {
			entry grip()
		}
		transition t0 {
			from i0
			to LookingForGarment
		}
		transition t1 {
			from LookingForGarment
			to Moving
			trigger 
		
		
			
			
			garmentDetected ? garmentPosition
			action movementStart ! garmentPosition
		}

		transition t5 {
			from j0
			to Gripped
		condition isHandlingCorrect
			action orientedGarment
		}
	state Moving {
		}
		final f0

		transition t2 {
			from Moving
			to EngageGarment
			trigger 
		movementEnd
		}
	state confirmGripCorrect {
			entry checkCorrectHandling ( )
		}
		junction j0

		junction j1
		transition t3 {
			from confirmGripCorrect
			to j0
			trigger 
		
		handlingCorrect ? isHandlingCorrect
		}
		transition t4 {
			from EngageGarment
			to j1
			trigger 
		
		gripCorrect ? isGripperEngaged
		}
		transition t7 {
			from j0
			to confirmGripCorrect
			condition 
			
		
		not isHandlingCorrect
			action reorientGarment ( )
		}
		transition t8 {
			from j1
			to confirmGripCorrect
			condition isGripperEngaged
			action garmentGripped
		}
		state Gripped {
		}
		transition t9 {
			from j1
			to LookingForGarment
			condition not isGripperEngaged
		}
	entry garmentAcquired = false
	transition t6 {
			from Gripped
			to f0
			action garmentAcquired = true
		}
	}
	state GarmentToUser {
		initial i0

		final f0

		transition t0 {
			from i0
			to DetectStartPose
		}
		transition t2 {
			from DetectStartPose
			to Moving
			trigger 
			poseDetected ? userPose
			action 
		targetPosition = jointPosition ( userPose , 2 )
		}
		state DetectStartPose {
			entry detectUserPose ( )
		}

		transition t1 {
			from Moving
			to f0
			trigger 
			movementEnd
			action garmentAtHand ; garmentWithUser = true
		}
		state Moving {
		entry movementStart ! targetPosition
		}
	}
	state DressingLoop {
	initial i0
		state DetectUserPose {
			entry detectUserPose ( )
		}
		state MovingToJoint {
		entry forceStart ! targetPosition
		}
		final f0
		transition t0 {
			from j0
			to DetectUserPose
			condition currentJoint > 0
			action currentJoint = currentJoint - 1
		}
		transition t1 {
			from i0
			to DetectUserPose
		}
		transition t2 {
			from DetectUserPose
			to MovingToJoint
			trigger 
			
			
			poseDetected ? userPose
			condition currentJoint == 0 \/ currentJoint == 1 \/ currentJoint == 2
			action targetPosition = jointPosition ( userPose , currentJoint )
		}
		transition t5 {
			from j0
			to f0
			condition currentJoint == 0
			action firstArmDressed = true
		}
		transition t7 {
			from FaultCheck
			to DetectUserPose
			trigger invalidPoseDetected
		}
		junction j0
		transition t6 {
			from MovingToJoint
			to FaultCheck
			trigger 
			
		forceEnd
		}
		state FaultCheck {
			entry checkFault ( )
		}
		state SnaggingCorrection {
		}
		transition t3 {
			from FaultCheck
			to SnaggingCorrection
			trigger snaggingDetected
		}
		transition t4 {
			from SnaggingCorrection
			to MovingToJoint
			action correctedMovement
		}
		transition t9 {
			from FaultCheck
			to j0
			action dressedJoint ! currentJoint
		}
	}

	transition t1 {
		from GarmentAcquisition
		to GarmentToUser
	condition garmentAcquired
	}
transition t2 {
		from GarmentToUser
		to DressingLoop
	condition garmentWithUser
	}
state Start {
	}
transition t0 {
		from i0
		to Start
	}
	transition t3 {
		from Start
		to GarmentAcquisition
		trigger 
	dressingRequest
	}
requires SensorOperations event dressedJoint : int
uses MovementEvents var garmentAcquired : boolean = false
	var garmentWithUser : boolean = false
var targetPosition : vector(real, 3)
	var arrivedAtTarget : boolean = false
	 var isHandlingCorrect : boolean = false
	var isGripperEngaged : boolean = false
var firstArmDressed : boolean = false
	state SecondArm {
		initial i0
		state DetectSecondHand {
			entry detectSecondArm ( )
		}
		state ReleaseGrip {
			entry releaseGrip ( )
		}
		final f0
		state MovingToSecondHand {
		}
		state CheckingUserDressed {
			entry checkUserDressed ( )
		}
		transition t0 {
			from i0
			to DetectSecondHand
		}
		transition t1 {
			from ReleaseGrip
			to f0
		}
		transition t2 {
			from DetectSecondHand
			to MovingToSecondHand
			trigger 
			secondHandDetected ? targetPosition
			action movementStart ! targetPosition
		}
		transition t3 {
			from MovingToSecondHand
			to CheckingUserDressed
			trigger movementEnd
		}
		transition t4 {
			from CheckingUserDressed
			to ReleaseGrip
			trigger 
		userDressed
		}
	}
	transition t4 {
		from DressingLoop
		to SecondArm
		condition firstArmDressed
	}
var userPose : vector ( vector(real, 3) , 3 )
	var garmentPosition : vector(real, 3)
uses ForceEvents }

