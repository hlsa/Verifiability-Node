package movement

import definitions::*
import PID::*

stm MovementControl {
	uses MovementEvents requires FrankaArmControl
	requires HRIOperations
	var arrivedAtTarget : boolean = false
	var vtarget : vector ( real , 3 )
	var vcurrent : vector ( real , 3 )
	const EPSILON: nat = 1
	event allowMovement

	initial i0
	state NotEngaged {
	}

	state FreeMovement {
		initial i0

		state SendCurrent {
			entry target ! vtarget ; endEffectorPosition ? vcurrent ; current ! vcurrent
		}

		state CheckMovement {
		}

		junction j0

		transition t2 {
			from SendCurrent
			to PushTowardsTarget
			trigger output ? pidoutput
		}
		transition t5 {
			from j0
			to f0
			condition arrivedAtTarget
		}
		transition t1 {
			from CheckMovement
			to SendCurrent
			trigger allowMovement
		}
		transition t3 {
			from j0
			to CheckMovement
			condition not arrivedAtTarget
		}
		final f0

		transition t0 {
			from PushTowardsTarget
			to j0
			action arrivedAtTarget = dist ( vtarget , vcurrent ) < EPSILON ; movementOccurred
		}
		state PushTowardsTarget {
			entry setEEPos ( pidoutput )
			exit endEffectorPosition ? vcurrent
		}
		transition t4 {
			from i0
			to CheckMovement
		}
	}

	state ForceApplication {
		initial i0
		state CheckForce {
		}
		state PushTowardsTarget {
			entry setEEForces ( pidoutput )

			exit endEffectorPosition ? vcurrent
		}
		junction j0

		transition t1 {
			from CheckForce
			to SendCurrent
			trigger allowMovement
		}
		transition t3 {
			from j0
			to CheckForce
			condition not arrivedAtTarget
		}
		transition t4 {
			from i0
			to CheckForce
		}
	final f0
		transition t5 {
			from j0
			to f0
			condition arrivedAtTarget
		}
		transition t0 {
			from PushTowardsTarget
			to j0
			action arrivedAtTarget = dist ( vtarget , vcurrent ) < EPSILON ; movementOccurred
		}
	state SendCurrent {
			entry target ! ftarget ; forceEndEffector ? fcurrent ; current ! fcurrent
		}
		transition t2 {
			from SendCurrent
			to PushTowardsTarget
			trigger 
		
		output ? pidoutput
		}
	entry ftarget = targetForces ( vcurrent , vtarget , TARGET_TOTAL_FORCE )
	}
	uses FrankaArmEvents uses ForceEvents 
	
	transition t0 {
		from i0
		to NotEngaged
	}
	transition t1 {
		from NotEngaged
		to FreeMovement
		trigger 
		
	
	
		
		
		
		movementStart ? vtarget
		action arrivedAtTarget = false
	}
	transition t6 {
		from NotEngaged
		to ForceApplication
		trigger 
	
		
		
		
		forceStart ? vtarget
		action arrivedAtTarget = false
	}
	transition t2 {
		from FreeMovement
		to NotEngaged
		condition arrivedAtTarget
		action movementEnd
	}
	transition t3 {
		from ForceApplication
		to NotEngaged
		condition arrivedAtTarget
		action forceEnd
	}
uses PIDEvents var pidoutput : vector ( real , 3 )

	var ftarget : vector ( real , 3 )
	const TARGET_TOTAL_FORCE : real = 1
	var fcurrent : vector ( real , 3 )
event movementOccurred
}

