package movement

import definitions::*
import PID::*

stm MovementControl {
	uses MovementEvents requires FrankaArmControl
	requires HRIOperations
	requires PIDOps
	var arrivedAtTarget : boolean = false
	var vtarget : vector ( real , 3 )
	var vcurrent : vector ( real , 3 )
	const EPSILON: nat = 1
	event allowMovement
	requires PIDState

	initial i0
	state NotEngaged {
	}

	state FreeMovement {
		entry PIDInitialize ( vtarget )
		
		initial i0

		state Move {
			entry setEEPos ( o )
		}

		state SensePosition {
			entry endEffectorPosition ? vcurrent ; PIDUpdate ( vcurrent )
		}
		state s0 {
			entry wait ( step ) ; stepMoved ; arrivedAtTarget = dist ( vtarget , vcurrent ) <= EPSILON
		}
		transition t1 {
			from SensePosition
			to Move
			trigger 
		
			
			allowMovement
			action movementWasAllowed
		}
		transition t6 {
			from Move
			to s0
			trigger endEffectorPosition ? vcurrent
			action movementOccurred
		}
		transition t0 {
			from s0
			to SensePosition
			condition not arrivedAtTarget
		}
		transition t2 {
			from i0
			to SensePosition
		}
	transition t3 {
			from SensePosition
			to SensePosition
			trigger resetMovement
		}
	}

	state ForceApplication {
		initial i0
		state CheckForce {
			entry forceEndEffector ? fcurrent ; PIDUpdate ( fcurrent )
		}
		state Move {
			entry setEEForces ( o )
		}
	entry ftarget = targetForces ( vcurrent , vtarget , TARGET_TOTAL_FORCE ); PIDInitialize(ftarget)
	state s0 {
			entry wait ( step ) ; forceApplied ; arrivedAtTarget = dist ( vtarget , vcurrent ) <= EPSILON
		}

		transition t1 {
			from CheckForce
			to Move
			trigger 
		
			
			allowMovement
			action forceWasAllowed
		}
		transition t3 {
			from s0
			to CheckForce
			condition not arrivedAtTarget
		}
		transition t4 {
			from i0
			to CheckForce
		}
		transition t2 {
			from Move
			to s0
			trigger endEffectorPosition ? vcurrent
			action movementOccurred
		}
	transition t0 {
			from CheckForce
			to CheckForce
			trigger resetMovement
		}
	}
	uses FrankaArmEvents uses ForceEvents 
	
	transition t0 {
		from i0
		to NotEngaged
	}
	transition t1 {
		from NotEngaged
		to FreeMovement
		trigger 
		
	
	
		
		
		
		
		movementStart ? vtarget
		action arrivedAtTarget = false ; movementInitiated
	}
	transition t6 {
		from NotEngaged
		to ForceApplication
		trigger 
	
		
		
		
		
		
		forceStart ? vtarget
		action 
	arrivedAtTarget = false ; forceInitiated
	}
	transition t2 {
		from FreeMovement
		to NotEngaged
		condition arrivedAtTarget
		action movementEnd
	}
	transition t3 {
		from ForceApplication
		to NotEngaged
		condition arrivedAtTarget
		action forceEnd
	}
requires PIDParams var ftarget : vector ( real , 3 )
	const TARGET_TOTAL_FORCE : real = 1
	var fcurrent : vector ( real , 3 )
event movementOccurred
event stepMoved
	event movementInitiated
	event movementWasAllowed
event forceWasAllowed
	event forceInitiated

	event resetMovement
event forceApplied
}

