import definitions::*

interface PIDState {
	var p : vector ( real , 3 )
	var d : vector ( real , 3 )
	var i : vector ( real , 3 )
	var e : vector ( real , 3 )
	var e_old : vector ( real , 3 )
	var t : vector ( real , 3 )
	var t_old : vector ( real , 3 )
    var o : vector ( real , 3 )
}

interface PIDParams {
	const Kp : real = 1
	const Ki : real = 1
	const Kd : real = 0
	const 


step : int = 1
}

interface PIDOps {
	PIDInitialize ( target: vector(real, 3) )
	PIDUpdate ( current: vector(real, 3) )
}

operation PIDInitialize ( target: vector(real, 3) ) {
	requires PIDState requires PIDParams initial i0
	final f0
	state Init {
		entry p = (| 0 , 0 , 0 |) ; d = (| 0 , 0 , 0 |) ; e = (| 0 , 0 , 0 |) ; e_old = (| 0 , 0 , 0 |) ; t = target ; t_old = (| 0 , 0 , 0 |) ; o = (| 0 , 0 , 0 |)
	}
	transition t0 {
		from i0
		to Init
	}
	transition t1 {
		from Init
		to f0
	}
}

operation PIDUpdate ( current: vector(real, 3) ) {
	requires PIDState requires PIDParams initial i0
	final f0
	state Init {
		entry p = current ; e = p - t ; i = i + scalarMul ( step , e ) ; d = d + scalarMul ( 1 / step , e - e_old ) ; o = scalarMul ( Kp , e ) + scalarMul ( Kd , d ) + scalarMul ( Ki , i )
	}
	transition t0 {
		from i0
		to Init
	}
	transition t1 {
		from Init
		to f0
	}
}

