
--
-- RoboChart generator version 3.0.0.202209090727
-- Automatically generated on 18-11-2022 19:31:55
--
-- Iterated compression status: true
-- Assertions compression status: false
--


module RobotAssistedDressing
	exports
	
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase
	
	-- declaring channels
	-- declaring robotic platform events
	channel dressedJoint: InOut.core_int
	channel stepMoved: InOut
	channel movementInitiated: InOut
	channel allowedMovement: InOut
	channel noticedMovementOcurred: InOut
	channel movementWasAllowed: InOut
	channel forceInitiated: InOut
	channel forceWasAllowed: InOut
	channel snaggingDetected: InOut
	channel invalidTrajectory: InOut
	channel invalidPoseDetected: InOut
	channel userInterrupt: InOut
	channel poseDetected: InOut.vector_vector_real_3_3
	channel dressingRequest: InOut
	channel garmentDetected: InOut.vector_real_3
	channel armConfig: InOut
	channel gripCorrect: InOut.core_boolean
	channel gripperEngaged: InOut.core_boolean
	channel correctedMovement: InOut
	channel secondHandDetected: InOut.vector_real_3
	channel userDressed: InOut
	channel userMoved: InOut
	channel handlingCorrect: InOut.core_boolean
	channel garmentAtHand: InOut
	channel arrivedAtGarment: InOut
	channel garmentGripped: InOut
	channel orientedGarment: InOut
	channel emergencyStop: InOut
	channel resumeDressing: InOut
	channel collisionStop: InOut
	channel collisionResume: InOut
	channel backgroundNoiseLevel: InOut.definitions_NoiseLevel
	channel otherAgentDetected: InOut.core_boolean
	channel endEffectorPosition: InOut.vector_real_3
	channel forceEndEffector: InOut.vector_real_3
	
	channel stepTowardsCall: vector_real_3.core_real
	channel pushTowardsCall: vector_real_3.core_real
	channel gripCall
	channel releaseGripCall
	channel setEEForcesCall: vector_real_3
	channel setEEPosCall: vector_real_3
	channel reorientGarmentCall
	channel checkMovementCall
	channel detectGarmentCall
	channel detectUserPoseCall
	channel checkFaultCall
	channel detectSecondArmCall
	channel getEEPosCall
	channel checkCorrectHandlingCall
	channel checkUserDressedCall
	
	-- declaring module termination channel
	channel terminate
	
	-- declaring robotic platform variables
	
	-- channel set with all visible events
	sem__events = {|
		dressedJoint,
		stepMoved,
		movementInitiated,
		allowedMovement,
		noticedMovementOcurred,
		movementWasAllowed,
		forceInitiated,
		forceWasAllowed,
		snaggingDetected,
		invalidTrajectory,
		invalidPoseDetected,
		userInterrupt,
		poseDetected,
		dressingRequest,
		garmentDetected,
		armConfig,
		gripCorrect,
		gripperEngaged,
		correctedMovement,
		secondHandDetected,
		userDressed,
		userMoved,
		handlingCorrect,
		garmentAtHand,
		arrivedAtGarment,
		garmentGripped,
		orientedGarment,
		emergencyStop,
		resumeDressing,
		collisionStop,
		collisionResume,
		backgroundNoiseLevel,
		otherAgentDetected,
		endEffectorPosition,
		forceEndEffector
	,	stepTowardsCall,
		pushTowardsCall,
		gripCall,
		releaseGripCall,
		setEEForcesCall,
		setEEPosCall,
		reorientGarmentCall,
		checkMovementCall,
		detectGarmentCall,
		detectUserPoseCall,
		checkFaultCall,
		detectSecondArmCall,
		getEEPosCall,
		checkCorrectHandlingCall,
		checkUserDressedCall
	|}
	
	-- declaring controller
		module ctrl_radcontrol
			shared_variable_events = {|
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel dressedJoint: InOut.core_int
			channel stepMoved: InOut
			channel movementInitiated: InOut
			channel movementWasAllowed: InOut
			channel allowedMovement: InOut
			channel noticedMovementOccurred: InOut
			channel forceWasAllowed: InOut
			channel forceInitiated: InOut
			channel forceApplied: InOut
			channel snaggingDetected: InOut
			channel invalidTrajectory: InOut
			channel invalidPoseDetected: InOut
			channel userInterrupt: InOut
			channel poseDetected: InOut.vector_vector_real_3_3
			channel dressingRequest: InOut
			channel garmentDetected: InOut.vector_real_3
			channel armConfig: InOut
			channel gripCorrect: InOut.core_boolean
			channel gripperEngaged: InOut.core_boolean
			channel correctedMovement: InOut
			channel secondHandDetected: InOut.vector_real_3
			channel userDressed: InOut
			channel userMoved: InOut
			channel handlingCorrect: InOut.core_boolean
			channel garmentAtHand: InOut
			channel arrivedAtGarment: InOut
			channel garmentGripped: InOut
			channel orientedGarment: InOut
			channel endEffectorPosition: InOut.vector_real_3
			channel forceEndEffector: InOut.vector_real_3
			channel emergencyStop: InOut
			channel resumeDressing: InOut
			channel collisionStop: InOut
			channel collisionResume: InOut
			channel backgroundNoiseLevel: InOut.definitions_NoiseLevel
			channel otherAgentDetected: InOut.core_boolean
			
			channel set_p: vector_real_3
			channel get_p: vector_real_3
			channel set_d: vector_real_3
			channel get_d: vector_real_3
			channel set_i: vector_real_3
			channel get_i: vector_real_3
			channel set_e: vector_real_3
			channel get_e: vector_real_3
			channel set_e_old: vector_real_3
			channel get_e_old: vector_real_3
			channel set_t: vector_real_3
			channel get_t: vector_real_3
			channel set_t_old: vector_real_3
			channel get_t_old: vector_real_3
			channel set_o: vector_real_3
			channel get_o: vector_real_3
			
			
			-- declaring call and ret events for undefined operations
			channel reorientGarmentCall
			channel pushTowardsCall: vector_real_3.core_real
			channel checkFaultCall
			channel setEEForcesCall: vector_real_3
			channel getEEPosCall
			channel detectGarmentCall
			channel gripCall
			channel checkCorrectHandlingCall
			channel checkUserDressedCall
			channel setEEPosCall: vector_real_3
			channel checkMovementCall
			channel stepTowardsCall: vector_real_3.core_real
			channel detectSecondArmCall
			channel releaseGripCall
			channel detectUserPoseCall
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	dressedJoint,
				stepMoved,
				movementInitiated,
				movementWasAllowed,
				allowedMovement,
				noticedMovementOccurred,
				forceWasAllowed,
				forceInitiated,
				forceApplied,
				snaggingDetected,
				invalidTrajectory,
				invalidPoseDetected,
				userInterrupt,
				poseDetected,
				dressingRequest,
				garmentDetected,
				armConfig,
				gripCorrect,
				gripperEngaged,
				correctedMovement,
				secondHandDetected,
				userDressed,
				userMoved,
				handlingCorrect,
				garmentAtHand,
				arrivedAtGarment,
				garmentGripped,
				orientedGarment,
				endEffectorPosition,
				forceEndEffector,
				emergencyStop,
				resumeDressing,
				collisionStop,
				collisionResume,
				backgroundNoiseLevel,
				otherAgentDetected
			,	reorientGarmentCall,
				pushTowardsCall,
				checkFaultCall,
				setEEForcesCall,
				getEEPosCall,
				detectGarmentCall,
				gripCall,
				checkCorrectHandlingCall,
				checkUserDressedCall,
				setEEPosCall,
				checkMovementCall,
				stepTowardsCall,
				detectSecondArmCall,
				releaseGripCall,
				detectUserPoseCall
			|}
	
			-- defined operations
			-- compileOperationDef
			module OP_PIDInitialize
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0|
				              NID_Init
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_p, set_p, setL_p, setR_p: vector_real_3
				channel get_d, set_d, setL_d, setR_d: vector_real_3
				channel get_i, set_i, setL_i, setR_i: vector_real_3
				channel get_e, set_e, setL_e, setR_e: vector_real_3
				channel get_e_old, set_e_old, setL_e_old, setR_e_old: vector_real_3
				channel get_t, set_t, setL_t, setR_t: vector_real_3
				channel get_t_old, set_t_old, setL_t_old, setR_t_old: vector_real_3
				channel get_o, set_o, setL_o, setR_o: vector_real_3
				
				-- Shared variable channels
				channel set_EXT_p: vector_real_3
				channel set_EXT_d: vector_real_3
				channel set_EXT_i: vector_real_3
				channel set_EXT_e: vector_real_3
				channel set_EXT_e_old: vector_real_3
				channel set_EXT_t: vector_real_3
				channel set_EXT_t_old: vector_real_3
				channel set_EXT_o: vector_real_3
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				f0::enter,
				Init::enter
				|}
				
				enteredSS = 	{|
				f0::entered,
				Init::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_p,
					set_EXT_d,
					set_EXT_i,
					set_EXT_e,
					set_EXT_e_old,
					set_EXT_t,
					set_EXT_t_old,
					set_EXT_o
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	set_EXT_p, set_p,
					set_EXT_d, set_d,
					set_EXT_i, set_i,
					set_EXT_e, set_e,
					set_EXT_e_old, set_e_old,
					set_EXT_t, set_t,
					set_EXT_t_old, set_t_old,
					set_EXT_o, set_o
					, share__
					|}
				
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__,
								param_target,
							    const_PIDInitialize_Kp,
							    const_PIDInitialize_Ki,
							    const_PIDInitialize_Kd,
							    const_PIDInitialize_step) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__,
								param_target,
							    const_PIDInitialize_Kp,
							    const_PIDInitialize_Ki,
							    const_PIDInitialize_Kd,
							    const_PIDInitialize_step) = D__(id__,
								param_target,
							    const_PIDInitialize_Kp,
							    const_PIDInitialize_Ki,
							    const_PIDInitialize_Kd,
							    const_PIDInitialize_step)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__,
								param_target,
							    const_PIDInitialize_Kp,
							    const_PIDInitialize_Ki,
							    const_PIDInitialize_Kd,
							    const_PIDInitialize_step) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
								param_target,
							    const_PIDInitialize_Kp,
							    const_PIDInitialize_Ki,
							    const_PIDInitialize_Kd,
							    const_PIDInitialize_step) = D__(id__,
								param_target,
							    const_PIDInitialize_Kp,
							    const_PIDInitialize_Ki,
							    const_PIDInitialize_Kd,
							    const_PIDInitialize_step)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: Init
				module Init
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__,
								param_target,
							    const_PIDInitialize_Kp,
							    const_PIDInitialize_Ki,
							    const_PIDInitialize_Kd,
							    const_PIDInitialize_step) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(true & (share__choice(set_p!(0,0,0) -> SKIP)));share__choice(true & (share__choice(set_d!(0,0,0) -> SKIP)));share__choice(true & (share__choice(set_e!(0,0,0) -> SKIP)));share__choice(true & (share__choice(set_e_old!(0,0,0) -> SKIP)));share__choice(true & (share__choice(set_t!param_target -> SKIP)));share__choice(true & (share__choice(set_t_old!(0,0,0) -> SKIP)));share__choice(true & (share__choice(set_o!(0,0,0) -> SKIP))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
								param_target,
							    const_PIDInitialize_Kp,
							    const_PIDInitialize_Ki,
							    const_PIDInitialize_Kd,
							    const_PIDInitialize_step) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(true & (share__choice(set_p!(0,0,0) -> SKIP)));share__choice(true & (share__choice(set_d!(0,0,0) -> SKIP)));share__choice(true & (share__choice(set_e!(0,0,0) -> SKIP)));share__choice(true & (share__choice(set_e_old!(0,0,0) -> SKIP)));share__choice(true & (share__choice(set_t!param_target -> SKIP)));share__choice(true & (share__choice(set_t_old!(0,0,0) -> SKIP)));share__choice(true & (share__choice(set_o!(0,0,0) -> SKIP))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) \ {terminate}
				
				STM_VS_O(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) \ {terminate}
				
				-- Transitions
				Transitions(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Init::enter -> SKIP))))
						 	 [] dbisim((true)&(internal__!NID_Init -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter,
							Init::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_Init|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__,
								   			param_target,
								   		    const_PIDInitialize_Kp,
								   		    const_PIDInitialize_Ki,
								   		    const_PIDInitialize_Kd,
								   		    const_PIDInitialize_step)
								   [| { share__, terminate } |] (
								   f0::D__(id__,
								   			param_target,
								   		    const_PIDInitialize_Kp,
								   		    const_PIDInitialize_Ki,
								   		    const_PIDInitialize_Kd,
								   		    const_PIDInitialize_step)
								   [| { share__, terminate } |] (
								   Init::D__(id__,
								   			param_target,
								   		    const_PIDInitialize_Kp,
								   		    const_PIDInitialize_Ki,
								   		    const_PIDInitialize_Kd,
								   		    const_PIDInitialize_step)
								   )
								   )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[Init::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Init|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			param_target,
								 		    const_PIDInitialize_Kp,
								 		    const_PIDInitialize_Ki,
								 		    const_PIDInitialize_Kd,
								 		    const_PIDInitialize_step))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) = 
					dbisim((MachineBody(id__,
								param_target,
							    const_PIDInitialize_Kp,
							    const_PIDInitialize_Ki,
							    const_PIDInitialize_Kd,
							    const_PIDInitialize_step)\ enteredSS)
					)
				
				
				Stateful(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) = 
					((
						(Behaviour(id__,
									param_target,
								    const_PIDInitialize_Kp,
								    const_PIDInitialize_Ki,
								    const_PIDInitialize_Kd,
								    const_PIDInitialize_step) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
									param_target,
								    const_PIDInitialize_Kp,
								    const_PIDInitialize_Ki,
								    const_PIDInitialize_Kd,
								    const_PIDInitialize_step))
					 	\getsetLocalChannels
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter,
							Init::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_Init|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__,
								   			param_target,
								   		    const_PIDInitialize_Kp,
								   		    const_PIDInitialize_Ki,
								   		    const_PIDInitialize_Kd,
								   		    const_PIDInitialize_step)
								   [| { share__, terminate } |] (
								   f0::VS_O__(id__,
								   			param_target,
								   		    const_PIDInitialize_Kp,
								   		    const_PIDInitialize_Ki,
								   		    const_PIDInitialize_Kd,
								   		    const_PIDInitialize_step)
								   [| { share__, terminate } |] (
								   Init::VS_O__(id__,
								   			param_target,
								   		    const_PIDInitialize_Kp,
								   		    const_PIDInitialize_Ki,
								   		    const_PIDInitialize_Kd,
								   		    const_PIDInitialize_step)
								   )
								   )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[Init::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Init|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			param_target,
								 		    const_PIDInitialize_Kp,
								 		    const_PIDInitialize_Ki,
								 		    const_PIDInitialize_Kd,
								 		    const_PIDInitialize_step))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) = 
					dbisim((MachineBody_VS_O(id__,
								param_target,
							    const_PIDInitialize_Kp,
							    const_PIDInitialize_Ki,
							    const_PIDInitialize_Kd,
							    const_PIDInitialize_step))
					)
				
				
				Stateful_VS_O(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) = 
					dbisim((
						(Behaviour_VS_O(id__,
									param_target,
								    const_PIDInitialize_Kp,
								    const_PIDInitialize_Ki,
								    const_PIDInitialize_Kd,
								    const_PIDInitialize_step) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
									param_target,
								    const_PIDInitialize_Kp,
								    const_PIDInitialize_Ki,
								    const_PIDInitialize_Kd,
								    const_PIDInitialize_step))
					 	\getsetLocalChannels
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) = STM_VS_O(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step)
				
				D__(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) = STM(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) \ internal_events
				O__(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) = sbisim(diamond(D__(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step)))
				VS__(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) = FVS__(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step)
				VS_O__(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) = sbisim(diamond(FVS__(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step)))
				HEXT__(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) = O__(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) [|shared_variable_events|] SKIP
				HUP__(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) = O__(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) [|{share__}|] SKIP
						endmodule
			-- compileOperationDef
			module OP_PIDUpdate
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0|
				              NID_Init
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_p, set_p, setL_p, setR_p: vector_real_3
				channel get_d, set_d, setL_d, setR_d: vector_real_3
				channel get_i, set_i, setL_i, setR_i: vector_real_3
				channel get_e, set_e, setL_e, setR_e: vector_real_3
				channel get_e_old, set_e_old, setL_e_old, setR_e_old: vector_real_3
				channel get_t, set_t, setL_t, setR_t: vector_real_3
				channel get_t_old, set_t_old, setL_t_old, setR_t_old: vector_real_3
				channel get_o, set_o, setL_o, setR_o: vector_real_3
				
				-- Shared variable channels
				channel set_EXT_p: vector_real_3
				channel set_EXT_d: vector_real_3
				channel set_EXT_i: vector_real_3
				channel set_EXT_e: vector_real_3
				channel set_EXT_e_old: vector_real_3
				channel set_EXT_t: vector_real_3
				channel set_EXT_t_old: vector_real_3
				channel set_EXT_o: vector_real_3
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				f0::enter,
				Init::enter
				|}
				
				enteredSS = 	{|
				f0::entered,
				Init::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_p,
					set_EXT_d,
					set_EXT_i,
					set_EXT_e,
					set_EXT_e_old,
					set_EXT_t,
					set_EXT_t_old,
					set_EXT_o
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	set_EXT_p, set_p,
					set_EXT_d, set_d,
					set_EXT_i, set_i,
					set_EXT_e, set_e,
					set_EXT_e_old, set_e_old,
					set_EXT_t, set_t,
					set_EXT_t_old, set_t_old,
					set_EXT_o, set_o
					, share__
					|}
				
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__,
								param_current,
							    const_PIDUpdate_Kp,
							    const_PIDUpdate_Ki,
							    const_PIDUpdate_Kd,
							    const_PIDUpdate_step) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__,
								param_current,
							    const_PIDUpdate_Kp,
							    const_PIDUpdate_Ki,
							    const_PIDUpdate_Kd,
							    const_PIDUpdate_step) = D__(id__,
								param_current,
							    const_PIDUpdate_Kp,
							    const_PIDUpdate_Ki,
							    const_PIDUpdate_Kd,
							    const_PIDUpdate_step)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__,
								param_current,
							    const_PIDUpdate_Kp,
							    const_PIDUpdate_Ki,
							    const_PIDUpdate_Kd,
							    const_PIDUpdate_step) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
								param_current,
							    const_PIDUpdate_Kp,
							    const_PIDUpdate_Ki,
							    const_PIDUpdate_Kd,
							    const_PIDUpdate_step) = D__(id__,
								param_current,
							    const_PIDUpdate_Kp,
							    const_PIDUpdate_Ki,
							    const_PIDUpdate_Kd,
							    const_PIDUpdate_step)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: Init
				module Init
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__,
								param_current,
							    const_PIDUpdate_Kp,
							    const_PIDUpdate_Ki,
							    const_PIDUpdate_Kd,
							    const_PIDUpdate_step) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(true & (share__choice(set_p!param_current -> SKIP)));share__choice(share__choice(get_t?t -> share__choice(get_p?p -> true & (share__choice(set_e!vector_real_3_minus(p, t, core_real) -> SKIP)))));share__choice(share__choice(get_e?e -> share__choice(get_i?i -> true & (share__choice(set_i!vector_real_3_add(i, definitions_scalarMul(const_PIDUpdate_step,e), core_real) -> SKIP)))));share__choice(share__choice(get_e?e -> share__choice(get_d?d -> share__choice(get_e_old?e_old -> true & (share__choice(set_d!vector_real_3_add(d, definitions_scalarMul(Div(1, const_PIDUpdate_step, core_real),vector_real_3_minus(e, e_old, core_real)), core_real) -> SKIP))))));share__choice(share__choice(get_e?e -> share__choice(get_d?d -> share__choice(get_i?i -> true & (share__choice(set_o!vector_real_3_add(vector_real_3_add(definitions_scalarMul(const_PIDUpdate_Kp,e), definitions_scalarMul(const_PIDUpdate_Kd,d), core_real), definitions_scalarMul(const_PIDUpdate_Ki,i), core_real) -> SKIP)))))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
								param_current,
							    const_PIDUpdate_Kp,
							    const_PIDUpdate_Ki,
							    const_PIDUpdate_Kd,
							    const_PIDUpdate_step) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(true & (share__choice(set_p!param_current -> SKIP)));share__choice(share__choice(get_t?t -> share__choice(get_p?p -> true & (share__choice(set_e!vector_real_3_minus(p, t, core_real) -> SKIP)))));share__choice(share__choice(get_e?e -> share__choice(get_i?i -> true & (share__choice(set_i!vector_real_3_add(i, definitions_scalarMul(const_PIDUpdate_step,e), core_real) -> SKIP)))));share__choice(share__choice(get_e?e -> share__choice(get_d?d -> share__choice(get_e_old?e_old -> true & (share__choice(set_d!vector_real_3_add(d, definitions_scalarMul(Div(1, const_PIDUpdate_step, core_real),vector_real_3_minus(e, e_old, core_real)), core_real) -> SKIP))))));share__choice(share__choice(get_e?e -> share__choice(get_d?d -> share__choice(get_i?i -> true & (share__choice(set_o!vector_real_3_add(vector_real_3_add(definitions_scalarMul(const_PIDUpdate_Kp,e), definitions_scalarMul(const_PIDUpdate_Kd,d), core_real), definitions_scalarMul(const_PIDUpdate_Ki,i), core_real) -> SKIP)))))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step) \ {terminate}
				
				STM_VS_O(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step) \ {terminate}
				
				-- Transitions
				Transitions(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Init::enter -> SKIP))))
						 	 [] dbisim((true)&(internal__!NID_Init -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter,
							Init::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_Init|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__,
								   			param_current,
								   		    const_PIDUpdate_Kp,
								   		    const_PIDUpdate_Ki,
								   		    const_PIDUpdate_Kd,
								   		    const_PIDUpdate_step)
								   [| { share__, terminate } |] (
								   f0::D__(id__,
								   			param_current,
								   		    const_PIDUpdate_Kp,
								   		    const_PIDUpdate_Ki,
								   		    const_PIDUpdate_Kd,
								   		    const_PIDUpdate_step)
								   [| { share__, terminate } |] (
								   Init::D__(id__,
								   			param_current,
								   		    const_PIDUpdate_Kp,
								   		    const_PIDUpdate_Ki,
								   		    const_PIDUpdate_Kd,
								   		    const_PIDUpdate_step)
								   )
								   )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[Init::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Init|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			param_current,
								 		    const_PIDUpdate_Kp,
								 		    const_PIDUpdate_Ki,
								 		    const_PIDUpdate_Kd,
								 		    const_PIDUpdate_step))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step) = 
					dbisim((MachineBody(id__,
								param_current,
							    const_PIDUpdate_Kp,
							    const_PIDUpdate_Ki,
							    const_PIDUpdate_Kd,
							    const_PIDUpdate_step)\ enteredSS)
					)
				
				
				Stateful(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step) = 
					((
						(Behaviour(id__,
									param_current,
								    const_PIDUpdate_Kp,
								    const_PIDUpdate_Ki,
								    const_PIDUpdate_Kd,
								    const_PIDUpdate_step) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
									param_current,
								    const_PIDUpdate_Kp,
								    const_PIDUpdate_Ki,
								    const_PIDUpdate_Kd,
								    const_PIDUpdate_step))
					 	\getsetLocalChannels
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter,
							Init::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_Init|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__,
								   			param_current,
								   		    const_PIDUpdate_Kp,
								   		    const_PIDUpdate_Ki,
								   		    const_PIDUpdate_Kd,
								   		    const_PIDUpdate_step)
								   [| { share__, terminate } |] (
								   f0::VS_O__(id__,
								   			param_current,
								   		    const_PIDUpdate_Kp,
								   		    const_PIDUpdate_Ki,
								   		    const_PIDUpdate_Kd,
								   		    const_PIDUpdate_step)
								   [| { share__, terminate } |] (
								   Init::VS_O__(id__,
								   			param_current,
								   		    const_PIDUpdate_Kp,
								   		    const_PIDUpdate_Ki,
								   		    const_PIDUpdate_Kd,
								   		    const_PIDUpdate_step)
								   )
								   )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[Init::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Init|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			param_current,
								 		    const_PIDUpdate_Kp,
								 		    const_PIDUpdate_Ki,
								 		    const_PIDUpdate_Kd,
								 		    const_PIDUpdate_step))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step) = 
					dbisim((MachineBody_VS_O(id__,
								param_current,
							    const_PIDUpdate_Kp,
							    const_PIDUpdate_Ki,
							    const_PIDUpdate_Kd,
							    const_PIDUpdate_step))
					)
				
				
				Stateful_VS_O(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step) = 
					dbisim((
						(Behaviour_VS_O(id__,
									param_current,
								    const_PIDUpdate_Kp,
								    const_PIDUpdate_Ki,
								    const_PIDUpdate_Kd,
								    const_PIDUpdate_step) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
									param_current,
								    const_PIDUpdate_Kp,
								    const_PIDUpdate_Ki,
								    const_PIDUpdate_Kd,
								    const_PIDUpdate_step))
					 	\getsetLocalChannels
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step) = STM_VS_O(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step)
				
				D__(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step) = STM(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step) \ internal_events
				O__(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step) = sbisim(diamond(D__(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step)))
				VS__(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step) = FVS__(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step)
				VS_O__(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step) = sbisim(diamond(FVS__(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step)))
				HEXT__(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step) = O__(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step) [|shared_variable_events|] SKIP
				HUP__(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step) = O__(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step) [|{share__}|] SKIP
						endmodule
		
			-- declaring machines
			module stm_dressing
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_GarmentAcquisition|
				              NID_GarmentToUser|
				              NID_DressingLoop|
				              NID_Start|
				              NID_SecondArm
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_currentJoint, set_currentJoint, setL_currentJoint, setR_currentJoint: core_int
				channel get_garmentAcquired, set_garmentAcquired, setL_garmentAcquired, setR_garmentAcquired: core_boolean
				channel get_garmentWithUser, set_garmentWithUser, setL_garmentWithUser, setR_garmentWithUser: core_boolean
				channel get_targetPosition, set_targetPosition, setL_targetPosition, setR_targetPosition: vector_real_3
				channel get_arrivedAtTarget, set_arrivedAtTarget, setL_arrivedAtTarget, setR_arrivedAtTarget: core_boolean
				channel get_isHandlingCorrect, set_isHandlingCorrect, setL_isHandlingCorrect, setR_isHandlingCorrect: core_boolean
				channel get_isGripperEngaged, set_isGripperEngaged, setL_isGripperEngaged, setR_isGripperEngaged: core_boolean
				channel get_firstArmDressed, set_firstArmDressed, setL_firstArmDressed, setR_firstArmDressed: core_boolean
				channel get_userPose, set_userPose, setL_userPose, setR_userPose: vector_vector_real_3_3
				channel get_garmentPosition, set_garmentPosition, setL_garmentPosition, setR_garmentPosition: vector_real_3
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel dressedJoint__: NIDS.InOut.core_int
				channel dressedJoint: InOut.core_int
				channel snaggingDetected__: NIDS.InOut
				channel snaggingDetected: InOut
				channel invalidTrajectory__: NIDS.InOut
				channel invalidTrajectory: InOut
				channel invalidPoseDetected__: NIDS.InOut
				channel invalidPoseDetected: InOut
				channel userInterrupt__: NIDS.InOut
				channel userInterrupt: InOut
				channel poseDetected__: NIDS.InOut.vector_vector_real_3_3
				channel poseDetected: InOut.vector_vector_real_3_3
				channel dressingRequest__: NIDS.InOut
				channel dressingRequest: InOut
				channel garmentDetected__: NIDS.InOut.vector_real_3
				channel garmentDetected: InOut.vector_real_3
				channel armConfig__: NIDS.InOut
				channel armConfig: InOut
				channel gripCorrect__: NIDS.InOut.core_boolean
				channel gripCorrect: InOut.core_boolean
				channel gripperEngaged__: NIDS.InOut.core_boolean
				channel gripperEngaged: InOut.core_boolean
				channel correctedMovement__: NIDS.InOut
				channel correctedMovement: InOut
				channel secondHandDetected__: NIDS.InOut.vector_real_3
				channel secondHandDetected: InOut.vector_real_3
				channel userDressed__: NIDS.InOut
				channel userDressed: InOut
				channel userMoved__: NIDS.InOut
				channel userMoved: InOut
				channel handlingCorrect__: NIDS.InOut.core_boolean
				channel handlingCorrect: InOut.core_boolean
				channel garmentAtHand__: NIDS.InOut
				channel garmentAtHand: InOut
				channel arrivedAtGarment__: NIDS.InOut
				channel arrivedAtGarment: InOut
				channel garmentGripped__: NIDS.InOut
				channel garmentGripped: InOut
				channel orientedGarment__: NIDS.InOut
				channel orientedGarment: InOut
				channel movementStart__: NIDS.InOut.vector_real_3
				channel movementStart: InOut.vector_real_3
				channel movementEnd__: NIDS.InOut
				channel movementEnd: InOut
				channel forceStart__: NIDS.InOut.vector_real_3
				channel forceStart: InOut.vector_real_3
				channel forceEnd__: NIDS.InOut
				channel forceEnd: InOut
				
				-- Declaring call and ret events for undefined operations
				channel reorientGarmentCall
				channel pushTowardsCall: vector_real_3.core_real
				channel checkFaultCall
				channel setEEForcesCall: vector_real_3
				channel getEEPosCall
				channel detectGarmentCall
				channel gripCall
				channel checkCorrectHandlingCall
				channel checkUserDressedCall
				channel setEEPosCall: vector_real_3
				channel checkMovementCall
				channel stepTowardsCall: vector_real_3.core_real
				channel detectSecondArmCall
				channel releaseGripCall
				channel detectUserPoseCall
				
				enterSS = {|
				i0::enter,
				GarmentAcquisition::enter,
				GarmentToUser::enter,
				DressingLoop::enter,
				Start::enter,
				SecondArm::enter
				|}
				
				enteredSS = 	{|
				GarmentAcquisition::entered,
				GarmentToUser::entered,
				DressingLoop::entered,
				Start::entered,
				SecondArm::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	dressedJoint,
					snaggingDetected,
					invalidTrajectory,
					invalidPoseDetected,
					userInterrupt,
					poseDetected,
					dressingRequest,
					garmentDetected,
					armConfig,
					gripCorrect,
					gripperEngaged,
					correctedMovement,
					secondHandDetected,
					userDressed,
					userMoved,
					handlingCorrect,
					garmentAtHand,
					arrivedAtGarment,
					garmentGripped,
					orientedGarment,
					movementStart,
					movementEnd,
					forceStart,
					forceEnd
				,	reorientGarmentCall,
					pushTowardsCall,
					checkFaultCall,
					setEEForcesCall,
					getEEPosCall,
					detectGarmentCall,
					gripCall,
					checkCorrectHandlingCall,
					checkUserDressedCall,
					setEEPosCall,
					checkMovementCall,
					stepTowardsCall,
					detectSecondArmCall,
					releaseGripCall,
					detectUserPoseCall
					|}
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: GarmentAcquisition
				module GarmentAcquisition
				
				enterSS = 
						{|			LookingForGarment::enter,
							i0::enter,
							EngageGarment::enter,
							Moving::enter,
							f0::enter,
							confirmGripCorrect::enter,
							j0::enter,
							j1::enter,
							Gripped::enter
						|}
				enteredSS = 
						{|			LookingForGarment::entered,
							EngageGarment::entered,
							Moving::entered,
							f0::entered,
							confirmGripCorrect::entered,
							Gripped::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_LookingForGarment|
					              NID_i0|
					              NID_EngageGarment|
					              NID_Moving|
					              NID_f0|
					              NID_confirmGripCorrect|
					              NID_j0|
					              NID_j1|
					              NID_Gripped
					
					channel internal__ : NIDS
					channel dressedJoint__: NIDS.InOut.core_int
					channel snaggingDetected__: NIDS.InOut
					channel invalidTrajectory__: NIDS.InOut
					channel invalidPoseDetected__: NIDS.InOut
					channel userInterrupt__: NIDS.InOut
					channel poseDetected__: NIDS.InOut.vector_vector_real_3_3
					channel dressingRequest__: NIDS.InOut
					channel garmentDetected__: NIDS.InOut.vector_real_3
					channel armConfig__: NIDS.InOut
					channel gripCorrect__: NIDS.InOut.core_boolean
					channel gripperEngaged__: NIDS.InOut.core_boolean
					channel correctedMovement__: NIDS.InOut
					channel secondHandDetected__: NIDS.InOut.vector_real_3
					channel userDressed__: NIDS.InOut
					channel userMoved__: NIDS.InOut
					channel handlingCorrect__: NIDS.InOut.core_boolean
					channel garmentAtHand__: NIDS.InOut
					channel arrivedAtGarment__: NIDS.InOut
					channel garmentGripped__: NIDS.InOut
					channel orientedGarment__: NIDS.InOut
					channel movementStart__: NIDS.InOut.vector_real_3
					channel movementEnd__: NIDS.InOut
					channel forceStart__: NIDS.InOut.vector_real_3
					channel forceEnd__: NIDS.InOut
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- State: LookingForGarment
					module LookingForGarment
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__detectGarment(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__detectGarment(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: EngageGarment
					module EngageGarment
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__grip(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__grip(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: Moving
					module Moving
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: confirmGripCorrect
					module confirmGripCorrect
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__checkCorrectHandling(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__checkCorrectHandling(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j0
					module j0
					exports
					
						channel enter, interrupt
						
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j1
					module j1
					exports
					
						channel enter, interrupt
						
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: Gripped
					module Gripped
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(true & (share__choice(set_garmentAcquired!false -> SKIP))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	LookingForGarment::enter,
							 	i0::enter,
							 	EngageGarment::enter,
							 	Moving::enter,
							 	f0::enter,
							 	confirmGripCorrect::enter,
							 	j0::enter,
							 	j1::enter,
							 	Gripped::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_i0,garmentDetected__.NID_LookingForGarment.in,internal__.NID_j0,movementEnd__.NID_Moving.in,handlingCorrect__.NID_confirmGripCorrect.in,gripCorrect__.NID_EngageGarment.in,internal__.NID_j0,internal__.NID_j1,internal__.NID_j1,internal__.NID_Gripped|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   LookingForGarment::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   i0::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   EngageGarment::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   Moving::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   f0::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   confirmGripCorrect::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   j0::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   j1::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   Gripped::D__(id__)
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		 )
							 		 [[LookingForGarment::interrupt <- x__ | x__ <- {|interrupt,garmentDetected__.NID_LookingForGarment.in|}]]
							 		 [[EngageGarment::interrupt <- x__ | x__ <- {|interrupt,gripCorrect__.NID_EngageGarment.in|}]]
							 		 [[Moving::interrupt <- x__ | x__ <- {|interrupt,movementEnd__.NID_Moving.in|}]]
							 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 		 [[confirmGripCorrect::interrupt <- x__ | x__ <- {|interrupt,handlingCorrect__.NID_confirmGripCorrect.in|}]]
							 		 [[Gripped::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Gripped|}]]
							 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
							 		 [[j1::interrupt <- x__ | x__ <- {|internal__.NID_j1,internal__.NID_j1|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__,setR_isHandlingCorrect,setR_isGripperEngaged,setR_garmentPosition |} ]] 
							 		  [[set_isHandlingCorrect <- setL_isHandlingCorrect,set_isGripperEngaged <- setL_isGripperEngaged]]
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		 			,setL_isHandlingCorrect
							 		 			,setL_isGripperEngaged
							 		 			,setR_isHandlingCorrect
							 		 			 			,setR_isGripperEngaged
							 		 			 			,setR_garmentPosition
							 		 			|}) |]
							 		 ((i0::enter -> Transitions(id__))
							 		  [[ share__ <- x__ | x__ <- {| share__,setL_isHandlingCorrect,setL_isGripperEngaged |} ]]
							 		  [[set_isHandlingCorrect <- setR_isHandlingCorrect,set_isGripperEngaged <- setR_isGripperEngaged,set_garmentPosition <- setR_garmentPosition]]
							 		 )
							 		)[[setL_isHandlingCorrect <- set_isHandlingCorrect,setL_isGripperEngaged <- set_isGripperEngaged]]
							 		 [[setR_isHandlingCorrect <- set_isHandlingCorrect,setR_isGripperEngaged <- set_isGripperEngaged,setR_garmentPosition <- set_garmentPosition]]
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		dressedJoint__.x____ <- dressedJoint,
							 		snaggingDetected__.x____ <- snaggingDetected,
							 		invalidTrajectory__.x____ <- invalidTrajectory,
							 		invalidPoseDetected__.x____ <- invalidPoseDetected,
							 		userInterrupt__.x____ <- userInterrupt,
							 		poseDetected__.x____ <- poseDetected,
							 		dressingRequest__.x____ <- dressingRequest,
							 		garmentDetected__.x____ <- garmentDetected,
							 		armConfig__.x____ <- armConfig,
							 		gripCorrect__.x____ <- gripCorrect,
							 		gripperEngaged__.x____ <- gripperEngaged,
							 		correctedMovement__.x____ <- correctedMovement,
							 		secondHandDetected__.x____ <- secondHandDetected,
							 		userDressed__.x____ <- userDressed,
							 		userMoved__.x____ <- userMoved,
							 		handlingCorrect__.x____ <- handlingCorrect,
							 		garmentAtHand__.x____ <- garmentAtHand,
							 		arrivedAtGarment__.x____ <- arrivedAtGarment,
							 		garmentGripped__.x____ <- garmentGripped,
							 		orientedGarment__.x____ <- orientedGarment,
							 		movementStart__.x____ <- movementStart,
							 		movementEnd__.x____ <- movementEnd,
							 		forceStart__.x____ <- forceStart,
							 		forceEnd__.x____ <- forceEnd
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_currentJoint,setR_garmentWithUser,setR_isHandlingCorrect,setR_userPose,setR_firstArmDressed,setR_arrivedAtTarget,setR_isGripperEngaged,setR_targetPosition,setR_garmentAcquired,setR_garmentPosition |} ]] 
							  [[set_currentJoint <- setL_currentJoint,set_garmentWithUser <- setL_garmentWithUser,set_isHandlingCorrect <- setL_isHandlingCorrect,set_userPose <- setL_userPose,set_firstArmDressed <- setL_firstArmDressed,set_arrivedAtTarget <- setL_arrivedAtTarget,set_isGripperEngaged <- setL_isGripperEngaged,set_targetPosition <- setL_targetPosition,set_garmentAcquired <- setL_garmentAcquired,set_garmentPosition <- setL_garmentPosition]]
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							 			,setL_currentJoint
							 			,setL_garmentWithUser
							 			,setL_isHandlingCorrect
							 			,setL_userPose
							 			,setL_firstArmDressed
							 			,setL_arrivedAtTarget
							 			,setL_isGripperEngaged
							 			,setL_targetPosition
							 			,setL_garmentAcquired
							 			,setL_garmentPosition
							 			,setR_currentJoint
							 			 			,setR_garmentWithUser
							 			 			,setR_isHandlingCorrect
							 			 			,setR_userPose
							 			 			,setR_firstArmDressed
							 			 			,setR_arrivedAtTarget
							 			 			,setR_isGripperEngaged
							 			 			,setR_targetPosition
							 			 			,setR_garmentAcquired
							 			 			,setR_garmentPosition
							 			|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__,setL_currentJoint,setL_garmentWithUser,setL_isHandlingCorrect,setL_userPose,setL_firstArmDressed,setL_arrivedAtTarget,setL_isGripperEngaged,setL_targetPosition,setL_garmentAcquired,setL_garmentPosition |} ]]
							  [[set_currentJoint <- setR_currentJoint,set_garmentWithUser <- setR_garmentWithUser,set_isHandlingCorrect <- setR_isHandlingCorrect,set_userPose <- setR_userPose,set_firstArmDressed <- setR_firstArmDressed,set_arrivedAtTarget <- setR_arrivedAtTarget,set_isGripperEngaged <- setR_isGripperEngaged,set_targetPosition <- setR_targetPosition,set_garmentAcquired <- setR_garmentAcquired,set_garmentPosition <- setR_garmentPosition]]
							 )
							)[[setL_currentJoint <- set_currentJoint,setL_garmentWithUser <- set_garmentWithUser,setL_isHandlingCorrect <- set_isHandlingCorrect,setL_userPose <- set_userPose,setL_firstArmDressed <- set_firstArmDressed,setL_arrivedAtTarget <- set_arrivedAtTarget,setL_isGripperEngaged <- set_isGripperEngaged,setL_targetPosition <- set_targetPosition,setL_garmentAcquired <- set_garmentAcquired,setL_garmentPosition <- set_garmentPosition]]
							 [[setR_currentJoint <- set_currentJoint,setR_garmentWithUser <- set_garmentWithUser,setR_isHandlingCorrect <- set_isHandlingCorrect,setR_userPose <- set_userPose,setR_firstArmDressed <- set_firstArmDressed,setR_arrivedAtTarget <- set_arrivedAtTarget,setR_isGripperEngaged <- set_isGripperEngaged,setR_targetPosition <- set_targetPosition,setR_garmentAcquired <- set_garmentAcquired,setR_garmentPosition <- set_garmentPosition]]
							)\union(enteredSS,{terminate}) 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(true & (share__choice(set_garmentAcquired!false -> SKIP))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	LookingForGarment::enter,
							 	i0::enter,
							 	EngageGarment::enter,
							 	Moving::enter,
							 	f0::enter,
							 	confirmGripCorrect::enter,
							 	j0::enter,
							 	j1::enter,
							 	Gripped::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_i0,garmentDetected__.NID_LookingForGarment.in,internal__.NID_j0,movementEnd__.NID_Moving.in,handlingCorrect__.NID_confirmGripCorrect.in,gripCorrect__.NID_EngageGarment.in,internal__.NID_j0,internal__.NID_j1,internal__.NID_j1,internal__.NID_Gripped|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   LookingForGarment::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   i0::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   EngageGarment::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   Moving::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   f0::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   confirmGripCorrect::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   j0::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   j1::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   Gripped::VS_O__(id__)
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		 )
							 		 [[LookingForGarment::interrupt <- x__ | x__ <- {|interrupt,garmentDetected__.NID_LookingForGarment.in|}]]
							 		 [[EngageGarment::interrupt <- x__ | x__ <- {|interrupt,gripCorrect__.NID_EngageGarment.in|}]]
							 		 [[Moving::interrupt <- x__ | x__ <- {|interrupt,movementEnd__.NID_Moving.in|}]]
							 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 		 [[confirmGripCorrect::interrupt <- x__ | x__ <- {|interrupt,handlingCorrect__.NID_confirmGripCorrect.in|}]]
							 		 [[Gripped::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Gripped|}]]
							 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
							 		 [[j1::interrupt <- x__ | x__ <- {|internal__.NID_j1,internal__.NID_j1|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__,setR_isHandlingCorrect,setR_isGripperEngaged,setR_garmentPosition |} ]] 
							 		  [[set_isHandlingCorrect <- setL_isHandlingCorrect,set_isGripperEngaged <- setL_isGripperEngaged]]
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		 			,setL_isHandlingCorrect
							 		 			,setL_isGripperEngaged
							 		 			,setR_isHandlingCorrect
							 		 			 			,setR_isGripperEngaged
							 		 			 			,setR_garmentPosition
							 		 			|}) |]
							 		 ((i0::enter -> Transitions(id__))
							 		  [[ share__ <- x__ | x__ <- {| share__,setL_isHandlingCorrect,setL_isGripperEngaged |} ]]
							 		  [[set_isHandlingCorrect <- setR_isHandlingCorrect,set_isGripperEngaged <- setR_isGripperEngaged,set_garmentPosition <- setR_garmentPosition]]
							 		 )
							 		)[[setL_isHandlingCorrect <- set_isHandlingCorrect,setL_isGripperEngaged <- set_isGripperEngaged]]
							 		 [[setR_isHandlingCorrect <- set_isHandlingCorrect,setR_isGripperEngaged <- set_isGripperEngaged,setR_garmentPosition <- set_garmentPosition]]
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		dressedJoint__.x____ <- dressedJoint,
							 		snaggingDetected__.x____ <- snaggingDetected,
							 		invalidTrajectory__.x____ <- invalidTrajectory,
							 		invalidPoseDetected__.x____ <- invalidPoseDetected,
							 		userInterrupt__.x____ <- userInterrupt,
							 		poseDetected__.x____ <- poseDetected,
							 		dressingRequest__.x____ <- dressingRequest,
							 		garmentDetected__.x____ <- garmentDetected,
							 		armConfig__.x____ <- armConfig,
							 		gripCorrect__.x____ <- gripCorrect,
							 		gripperEngaged__.x____ <- gripperEngaged,
							 		correctedMovement__.x____ <- correctedMovement,
							 		secondHandDetected__.x____ <- secondHandDetected,
							 		userDressed__.x____ <- userDressed,
							 		userMoved__.x____ <- userMoved,
							 		handlingCorrect__.x____ <- handlingCorrect,
							 		garmentAtHand__.x____ <- garmentAtHand,
							 		arrivedAtGarment__.x____ <- arrivedAtGarment,
							 		garmentGripped__.x____ <- garmentGripped,
							 		orientedGarment__.x____ <- orientedGarment,
							 		movementStart__.x____ <- movementStart,
							 		movementEnd__.x____ <- movementEnd,
							 		forceStart__.x____ <- forceStart,
							 		forceEnd__.x____ <- forceEnd
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_currentJoint,setR_garmentWithUser,setR_isHandlingCorrect,setR_userPose,setR_firstArmDressed,setR_arrivedAtTarget,setR_isGripperEngaged,setR_targetPosition,setR_garmentAcquired,setR_garmentPosition |} ]] 
							  [[set_currentJoint <- setL_currentJoint,set_garmentWithUser <- setL_garmentWithUser,set_isHandlingCorrect <- setL_isHandlingCorrect,set_userPose <- setL_userPose,set_firstArmDressed <- setL_firstArmDressed,set_arrivedAtTarget <- setL_arrivedAtTarget,set_isGripperEngaged <- setL_isGripperEngaged,set_targetPosition <- setL_targetPosition,set_garmentAcquired <- setL_garmentAcquired,set_garmentPosition <- setL_garmentPosition]]
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							 			,setL_currentJoint
							 			,setL_garmentWithUser
							 			,setL_isHandlingCorrect
							 			,setL_userPose
							 			,setL_firstArmDressed
							 			,setL_arrivedAtTarget
							 			,setL_isGripperEngaged
							 			,setL_targetPosition
							 			,setL_garmentAcquired
							 			,setL_garmentPosition
							 			,setR_currentJoint
							 			 			,setR_garmentWithUser
							 			 			,setR_isHandlingCorrect
							 			 			,setR_userPose
							 			 			,setR_firstArmDressed
							 			 			,setR_arrivedAtTarget
							 			 			,setR_isGripperEngaged
							 			 			,setR_targetPosition
							 			 			,setR_garmentAcquired
							 			 			,setR_garmentPosition
							 			|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__,setL_currentJoint,setL_garmentWithUser,setL_isHandlingCorrect,setL_userPose,setL_firstArmDressed,setL_arrivedAtTarget,setL_isGripperEngaged,setL_targetPosition,setL_garmentAcquired,setL_garmentPosition |} ]]
							  [[set_currentJoint <- setR_currentJoint,set_garmentWithUser <- setR_garmentWithUser,set_isHandlingCorrect <- setR_isHandlingCorrect,set_userPose <- setR_userPose,set_firstArmDressed <- setR_firstArmDressed,set_arrivedAtTarget <- setR_arrivedAtTarget,set_isGripperEngaged <- setR_isGripperEngaged,set_targetPosition <- setR_targetPosition,set_garmentAcquired <- setR_garmentAcquired,set_garmentPosition <- setR_garmentPosition]]
							 )
							)[[setL_currentJoint <- set_currentJoint,setL_garmentWithUser <- set_garmentWithUser,setL_isHandlingCorrect <- set_isHandlingCorrect,setL_userPose <- set_userPose,setL_firstArmDressed <- set_firstArmDressed,setL_arrivedAtTarget <- set_arrivedAtTarget,setL_isGripperEngaged <- set_isGripperEngaged,setL_targetPosition <- set_targetPosition,setL_garmentAcquired <- set_garmentAcquired,setL_garmentPosition <- set_garmentPosition]]
							 [[setR_currentJoint <- set_currentJoint,setR_garmentWithUser <- set_garmentWithUser,setR_isHandlingCorrect <- set_isHandlingCorrect,setR_userPose <- set_userPose,setR_firstArmDressed <- set_firstArmDressed,setR_arrivedAtTarget <- set_arrivedAtTarget,setR_isGripperEngaged <- set_isGripperEngaged,setR_targetPosition <- set_targetPosition,setR_garmentAcquired <- set_garmentAcquired,setR_garmentPosition <- set_garmentPosition]]
							)\{terminate} 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
					
					Transitions(id__) = ((let
						Trans = share__choice(get_isHandlingCorrect?isHandlingCorrect -> get_isGripperEngaged?isGripperEngaged -> (
							((share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; LookingForGarment::enter -> SKIP))))
							 	 [] dbisim((true)&(garmentDetected__!NID_LookingForGarment.in?garmentPosition:{garmentPosition|garmentPosition <- vector_real_3, true} -> share__choice(set_garmentPosition!garmentPosition -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_garmentPosition?garmentPosition -> true&(share__choice(movementStart.out!garmentPosition -> SKIP))) ; Moving::enter -> SKIP)))
							 	 [] dbisim((isHandlingCorrect)&(internal__!NID_j0 -> SKIP ;  ((true&(share__choice(orientedGarment.out -> SKIP)) ; Gripped::enter -> SKIP))))
							 	 [] dbisim((true)&(movementEnd__!NID_Moving.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; EngageGarment::enter -> SKIP)))
							 	 [] dbisim((true)&(handlingCorrect__!NID_confirmGripCorrect.in?isHandlingCorrect:{isHandlingCorrect|isHandlingCorrect <- core_boolean, true} -> share__choice(set_isHandlingCorrect!isHandlingCorrect -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; j0::enter -> SKIP)))
							 	 [] dbisim((true)&(gripCorrect__!NID_EngageGarment.in?isGripperEngaged:{isGripperEngaged|isGripperEngaged <- core_boolean, true} -> share__choice(set_isGripperEngaged!isGripperEngaged -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; j1::enter -> SKIP)))
							 	 [] dbisim(((not (isHandlingCorrect)))&(internal__!NID_j0 -> SKIP ;  ((true&CALL__reorientGarment(
							 			id__
							 		) ; confirmGripCorrect::enter -> SKIP))))
							 	 [] dbisim((isGripperEngaged)&(internal__!NID_j1 -> SKIP ;  ((true&(share__choice(garmentGripped.out -> SKIP)) ; confirmGripCorrect::enter -> SKIP))))
							 	 [] dbisim(((not (isGripperEngaged)))&(internal__!NID_j1 -> SKIP ;  ((SKIP ; LookingForGarment::enter -> SKIP))))
							 	 [] dbisim((true)&(internal__!NID_Gripped -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_garmentAcquired!true -> SKIP))) ; f0::enter -> SKIP)))
							 ) ; Trans)
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
						)
						)
					within
						Trans
					)
					)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: GarmentToUser
				module GarmentToUser
				
				enterSS = 
						{|			i0::enter,
							f0::enter,
							DetectStartPose::enter,
							Moving::enter
						|}
				enteredSS = 
						{|			f0::entered,
							DetectStartPose::entered,
							Moving::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_i0|
					              NID_f0|
					              NID_DetectStartPose|
					              NID_Moving
					
					channel internal__ : NIDS
					channel dressedJoint__: NIDS.InOut.core_int
					channel snaggingDetected__: NIDS.InOut
					channel invalidTrajectory__: NIDS.InOut
					channel invalidPoseDetected__: NIDS.InOut
					channel userInterrupt__: NIDS.InOut
					channel poseDetected__: NIDS.InOut.vector_vector_real_3_3
					channel dressingRequest__: NIDS.InOut
					channel garmentDetected__: NIDS.InOut.vector_real_3
					channel armConfig__: NIDS.InOut
					channel gripCorrect__: NIDS.InOut.core_boolean
					channel gripperEngaged__: NIDS.InOut.core_boolean
					channel correctedMovement__: NIDS.InOut
					channel secondHandDetected__: NIDS.InOut.vector_real_3
					channel userDressed__: NIDS.InOut
					channel userMoved__: NIDS.InOut
					channel handlingCorrect__: NIDS.InOut.core_boolean
					channel garmentAtHand__: NIDS.InOut
					channel arrivedAtGarment__: NIDS.InOut
					channel garmentGripped__: NIDS.InOut
					channel orientedGarment__: NIDS.InOut
					channel movementStart__: NIDS.InOut.vector_real_3
					channel movementEnd__: NIDS.InOut
					channel forceStart__: NIDS.InOut.vector_real_3
					channel forceEnd__: NIDS.InOut
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: DetectStartPose
					module DetectStartPose
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__detectUserPose(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__detectUserPose(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: Moving
					module Moving
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(get_targetPosition?targetPosition -> true&(share__choice(movementStart.out!targetPosition -> SKIP))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(get_targetPosition?targetPosition -> true&(share__choice(movementStart.out!targetPosition -> SKIP))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i0::enter,
							 	f0::enter,
							 	DetectStartPose::enter,
							 	Moving::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_i0,poseDetected__.NID_DetectStartPose.in,movementEnd__.NID_Moving.in|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i0::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   f0::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   DetectStartPose::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   Moving::D__(id__)
							 		   )
							 		   )
							 		   )
							 		 )
							 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 		 [[DetectStartPose::interrupt <- x__ | x__ <- {|interrupt,poseDetected__.NID_DetectStartPose.in|}]]
							 		 [[Moving::interrupt <- x__ | x__ <- {|interrupt,movementEnd__.NID_Moving.in|}]]
							 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__,setR_userPose |} ]] 
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		 			,setR_userPose
							 		 			|}) |]
							 		 ((i0::enter -> Transitions(id__))
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 		  [[set_userPose <- setR_userPose]]
							 		 )
							 		)
							 		 [[setR_userPose <- set_userPose]]
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		dressedJoint__.x____ <- dressedJoint,
							 		snaggingDetected__.x____ <- snaggingDetected,
							 		invalidTrajectory__.x____ <- invalidTrajectory,
							 		invalidPoseDetected__.x____ <- invalidPoseDetected,
							 		userInterrupt__.x____ <- userInterrupt,
							 		poseDetected__.x____ <- poseDetected,
							 		dressingRequest__.x____ <- dressingRequest,
							 		garmentDetected__.x____ <- garmentDetected,
							 		armConfig__.x____ <- armConfig,
							 		gripCorrect__.x____ <- gripCorrect,
							 		gripperEngaged__.x____ <- gripperEngaged,
							 		correctedMovement__.x____ <- correctedMovement,
							 		secondHandDetected__.x____ <- secondHandDetected,
							 		userDressed__.x____ <- userDressed,
							 		userMoved__.x____ <- userMoved,
							 		handlingCorrect__.x____ <- handlingCorrect,
							 		garmentAtHand__.x____ <- garmentAtHand,
							 		arrivedAtGarment__.x____ <- arrivedAtGarment,
							 		garmentGripped__.x____ <- garmentGripped,
							 		orientedGarment__.x____ <- orientedGarment,
							 		movementStart__.x____ <- movementStart,
							 		movementEnd__.x____ <- movementEnd,
							 		forceStart__.x____ <- forceStart,
							 		forceEnd__.x____ <- forceEnd
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_currentJoint,setR_garmentWithUser,setR_isHandlingCorrect,setR_userPose,setR_firstArmDressed,setR_arrivedAtTarget,setR_isGripperEngaged,setR_targetPosition,setR_garmentAcquired,setR_garmentPosition |} ]] 
							  [[set_currentJoint <- setL_currentJoint,set_garmentWithUser <- setL_garmentWithUser,set_isHandlingCorrect <- setL_isHandlingCorrect,set_userPose <- setL_userPose,set_firstArmDressed <- setL_firstArmDressed,set_arrivedAtTarget <- setL_arrivedAtTarget,set_isGripperEngaged <- setL_isGripperEngaged,set_targetPosition <- setL_targetPosition,set_garmentAcquired <- setL_garmentAcquired,set_garmentPosition <- setL_garmentPosition]]
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							 			,setL_currentJoint
							 			,setL_garmentWithUser
							 			,setL_isHandlingCorrect
							 			,setL_userPose
							 			,setL_firstArmDressed
							 			,setL_arrivedAtTarget
							 			,setL_isGripperEngaged
							 			,setL_targetPosition
							 			,setL_garmentAcquired
							 			,setL_garmentPosition
							 			,setR_currentJoint
							 			 			,setR_garmentWithUser
							 			 			,setR_isHandlingCorrect
							 			 			,setR_userPose
							 			 			,setR_firstArmDressed
							 			 			,setR_arrivedAtTarget
							 			 			,setR_isGripperEngaged
							 			 			,setR_targetPosition
							 			 			,setR_garmentAcquired
							 			 			,setR_garmentPosition
							 			|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__,setL_currentJoint,setL_garmentWithUser,setL_isHandlingCorrect,setL_userPose,setL_firstArmDressed,setL_arrivedAtTarget,setL_isGripperEngaged,setL_targetPosition,setL_garmentAcquired,setL_garmentPosition |} ]]
							  [[set_currentJoint <- setR_currentJoint,set_garmentWithUser <- setR_garmentWithUser,set_isHandlingCorrect <- setR_isHandlingCorrect,set_userPose <- setR_userPose,set_firstArmDressed <- setR_firstArmDressed,set_arrivedAtTarget <- setR_arrivedAtTarget,set_isGripperEngaged <- setR_isGripperEngaged,set_targetPosition <- setR_targetPosition,set_garmentAcquired <- setR_garmentAcquired,set_garmentPosition <- setR_garmentPosition]]
							 )
							)[[setL_currentJoint <- set_currentJoint,setL_garmentWithUser <- set_garmentWithUser,setL_isHandlingCorrect <- set_isHandlingCorrect,setL_userPose <- set_userPose,setL_firstArmDressed <- set_firstArmDressed,setL_arrivedAtTarget <- set_arrivedAtTarget,setL_isGripperEngaged <- set_isGripperEngaged,setL_targetPosition <- set_targetPosition,setL_garmentAcquired <- set_garmentAcquired,setL_garmentPosition <- set_garmentPosition]]
							 [[setR_currentJoint <- set_currentJoint,setR_garmentWithUser <- set_garmentWithUser,setR_isHandlingCorrect <- set_isHandlingCorrect,setR_userPose <- set_userPose,setR_firstArmDressed <- set_firstArmDressed,setR_arrivedAtTarget <- set_arrivedAtTarget,setR_isGripperEngaged <- set_isGripperEngaged,setR_targetPosition <- set_targetPosition,setR_garmentAcquired <- set_garmentAcquired,setR_garmentPosition <- set_garmentPosition]]
							)\union(enteredSS,{terminate}) 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i0::enter,
							 	f0::enter,
							 	DetectStartPose::enter,
							 	Moving::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_i0,poseDetected__.NID_DetectStartPose.in,movementEnd__.NID_Moving.in|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i0::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   f0::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   DetectStartPose::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   Moving::VS_O__(id__)
							 		   )
							 		   )
							 		   )
							 		 )
							 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 		 [[DetectStartPose::interrupt <- x__ | x__ <- {|interrupt,poseDetected__.NID_DetectStartPose.in|}]]
							 		 [[Moving::interrupt <- x__ | x__ <- {|interrupt,movementEnd__.NID_Moving.in|}]]
							 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__,setR_userPose |} ]] 
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		 			,setR_userPose
							 		 			|}) |]
							 		 ((i0::enter -> Transitions(id__))
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 		  [[set_userPose <- setR_userPose]]
							 		 )
							 		)
							 		 [[setR_userPose <- set_userPose]]
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		dressedJoint__.x____ <- dressedJoint,
							 		snaggingDetected__.x____ <- snaggingDetected,
							 		invalidTrajectory__.x____ <- invalidTrajectory,
							 		invalidPoseDetected__.x____ <- invalidPoseDetected,
							 		userInterrupt__.x____ <- userInterrupt,
							 		poseDetected__.x____ <- poseDetected,
							 		dressingRequest__.x____ <- dressingRequest,
							 		garmentDetected__.x____ <- garmentDetected,
							 		armConfig__.x____ <- armConfig,
							 		gripCorrect__.x____ <- gripCorrect,
							 		gripperEngaged__.x____ <- gripperEngaged,
							 		correctedMovement__.x____ <- correctedMovement,
							 		secondHandDetected__.x____ <- secondHandDetected,
							 		userDressed__.x____ <- userDressed,
							 		userMoved__.x____ <- userMoved,
							 		handlingCorrect__.x____ <- handlingCorrect,
							 		garmentAtHand__.x____ <- garmentAtHand,
							 		arrivedAtGarment__.x____ <- arrivedAtGarment,
							 		garmentGripped__.x____ <- garmentGripped,
							 		orientedGarment__.x____ <- orientedGarment,
							 		movementStart__.x____ <- movementStart,
							 		movementEnd__.x____ <- movementEnd,
							 		forceStart__.x____ <- forceStart,
							 		forceEnd__.x____ <- forceEnd
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_currentJoint,setR_garmentWithUser,setR_isHandlingCorrect,setR_userPose,setR_firstArmDressed,setR_arrivedAtTarget,setR_isGripperEngaged,setR_targetPosition,setR_garmentAcquired,setR_garmentPosition |} ]] 
							  [[set_currentJoint <- setL_currentJoint,set_garmentWithUser <- setL_garmentWithUser,set_isHandlingCorrect <- setL_isHandlingCorrect,set_userPose <- setL_userPose,set_firstArmDressed <- setL_firstArmDressed,set_arrivedAtTarget <- setL_arrivedAtTarget,set_isGripperEngaged <- setL_isGripperEngaged,set_targetPosition <- setL_targetPosition,set_garmentAcquired <- setL_garmentAcquired,set_garmentPosition <- setL_garmentPosition]]
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							 			,setL_currentJoint
							 			,setL_garmentWithUser
							 			,setL_isHandlingCorrect
							 			,setL_userPose
							 			,setL_firstArmDressed
							 			,setL_arrivedAtTarget
							 			,setL_isGripperEngaged
							 			,setL_targetPosition
							 			,setL_garmentAcquired
							 			,setL_garmentPosition
							 			,setR_currentJoint
							 			 			,setR_garmentWithUser
							 			 			,setR_isHandlingCorrect
							 			 			,setR_userPose
							 			 			,setR_firstArmDressed
							 			 			,setR_arrivedAtTarget
							 			 			,setR_isGripperEngaged
							 			 			,setR_targetPosition
							 			 			,setR_garmentAcquired
							 			 			,setR_garmentPosition
							 			|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__,setL_currentJoint,setL_garmentWithUser,setL_isHandlingCorrect,setL_userPose,setL_firstArmDressed,setL_arrivedAtTarget,setL_isGripperEngaged,setL_targetPosition,setL_garmentAcquired,setL_garmentPosition |} ]]
							  [[set_currentJoint <- setR_currentJoint,set_garmentWithUser <- setR_garmentWithUser,set_isHandlingCorrect <- setR_isHandlingCorrect,set_userPose <- setR_userPose,set_firstArmDressed <- setR_firstArmDressed,set_arrivedAtTarget <- setR_arrivedAtTarget,set_isGripperEngaged <- setR_isGripperEngaged,set_targetPosition <- setR_targetPosition,set_garmentAcquired <- setR_garmentAcquired,set_garmentPosition <- setR_garmentPosition]]
							 )
							)[[setL_currentJoint <- set_currentJoint,setL_garmentWithUser <- set_garmentWithUser,setL_isHandlingCorrect <- set_isHandlingCorrect,setL_userPose <- set_userPose,setL_firstArmDressed <- set_firstArmDressed,setL_arrivedAtTarget <- set_arrivedAtTarget,setL_isGripperEngaged <- set_isGripperEngaged,setL_targetPosition <- set_targetPosition,setL_garmentAcquired <- set_garmentAcquired,setL_garmentPosition <- set_garmentPosition]]
							 [[setR_currentJoint <- set_currentJoint,setR_garmentWithUser <- set_garmentWithUser,setR_isHandlingCorrect <- set_isHandlingCorrect,setR_userPose <- set_userPose,setR_firstArmDressed <- set_firstArmDressed,setR_arrivedAtTarget <- set_arrivedAtTarget,setR_isGripperEngaged <- set_isGripperEngaged,setR_targetPosition <- set_targetPosition,setR_garmentAcquired <- set_garmentAcquired,setR_garmentPosition <- set_garmentPosition]]
							)\{terminate} 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
					
					Transitions(id__) = ((let
						Trans = (
							((share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; DetectStartPose::enter -> SKIP))))
							 	 [] dbisim((true)&(poseDetected__!NID_DetectStartPose.in?userPose:{userPose|userPose <- vector_vector_real_3_3, true} -> share__choice(set_userPose!userPose -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_userPose?userPose -> true & (share__choice(set_targetPosition!definitions_jointPosition(userPose,2) -> SKIP)))) ; Moving::enter -> SKIP)))
							 	 [] dbisim((true)&(movementEnd__!NID_Moving.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(garmentAtHand.out -> SKIP));share__choice(true & (share__choice(set_garmentWithUser!true -> SKIP))) ; f0::enter -> SKIP)))
							 ) ; Trans)
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
						)
					within
						Trans
					)
					)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: DressingLoop
				module DressingLoop
				
				enterSS = 
						{|			i0::enter,
							DetectUserPose::enter,
							MovingToJoint::enter,
							f0::enter,
							j0::enter,
							FaultCheck::enter,
							SnaggingCorrection::enter
						|}
				enteredSS = 
						{|			DetectUserPose::entered,
							MovingToJoint::entered,
							f0::entered,
							FaultCheck::entered,
							SnaggingCorrection::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_i0|
					              NID_DetectUserPose|
					              NID_MovingToJoint|
					              NID_f0|
					              NID_j0|
					              NID_FaultCheck|
					              NID_SnaggingCorrection
					
					channel internal__ : NIDS
					channel dressedJoint__: NIDS.InOut.core_int
					channel snaggingDetected__: NIDS.InOut
					channel invalidTrajectory__: NIDS.InOut
					channel invalidPoseDetected__: NIDS.InOut
					channel userInterrupt__: NIDS.InOut
					channel poseDetected__: NIDS.InOut.vector_vector_real_3_3
					channel dressingRequest__: NIDS.InOut
					channel garmentDetected__: NIDS.InOut.vector_real_3
					channel armConfig__: NIDS.InOut
					channel gripCorrect__: NIDS.InOut.core_boolean
					channel gripperEngaged__: NIDS.InOut.core_boolean
					channel correctedMovement__: NIDS.InOut
					channel secondHandDetected__: NIDS.InOut.vector_real_3
					channel userDressed__: NIDS.InOut
					channel userMoved__: NIDS.InOut
					channel handlingCorrect__: NIDS.InOut.core_boolean
					channel garmentAtHand__: NIDS.InOut
					channel arrivedAtGarment__: NIDS.InOut
					channel garmentGripped__: NIDS.InOut
					channel orientedGarment__: NIDS.InOut
					channel movementStart__: NIDS.InOut.vector_real_3
					channel movementEnd__: NIDS.InOut
					channel forceStart__: NIDS.InOut.vector_real_3
					channel forceEnd__: NIDS.InOut
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: DetectUserPose
					module DetectUserPose
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__detectUserPose(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__detectUserPose(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: MovingToJoint
					module MovingToJoint
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(get_targetPosition?targetPosition -> true&(share__choice(forceStart.out!targetPosition -> SKIP))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(get_targetPosition?targetPosition -> true&(share__choice(forceStart.out!targetPosition -> SKIP))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j0
					module j0
					exports
					
						channel enter, interrupt
						
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: FaultCheck
					module FaultCheck
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__checkFault(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__checkFault(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: SnaggingCorrection
					module SnaggingCorrection
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i0::enter,
							 	DetectUserPose::enter,
							 	MovingToJoint::enter,
							 	f0::enter,
							 	j0::enter,
							 	FaultCheck::enter,
							 	SnaggingCorrection::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_j0,internal__.NID_i0,poseDetected__.NID_DetectUserPose.in,internal__.NID_j0,invalidPoseDetected__.NID_FaultCheck.in,forceEnd__.NID_MovingToJoint.in,snaggingDetected__.NID_FaultCheck.in,internal__.NID_SnaggingCorrection,internal__.NID_FaultCheck|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i0::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   DetectUserPose::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   MovingToJoint::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   f0::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   j0::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   FaultCheck::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   SnaggingCorrection::D__(id__)
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		 )
							 		 [[DetectUserPose::interrupt <- x__ | x__ <- {|interrupt,poseDetected__.NID_DetectUserPose.in|}]]
							 		 [[MovingToJoint::interrupt <- x__ | x__ <- {|interrupt,forceEnd__.NID_MovingToJoint.in|}]]
							 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 		 [[FaultCheck::interrupt <- x__ | x__ <- {|interrupt,invalidPoseDetected__.NID_FaultCheck.in,snaggingDetected__.NID_FaultCheck.in,internal__.NID_FaultCheck|}]]
							 		 [[SnaggingCorrection::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_SnaggingCorrection|}]]
							 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__,setR_userPose |} ]] 
							 		  [[set_currentJoint <- setL_currentJoint]]
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		 			,setL_currentJoint
							 		 			,setR_userPose
							 		 			|}) |]
							 		 ((i0::enter -> Transitions(id__))
							 		  [[ share__ <- x__ | x__ <- {| share__,setL_currentJoint |} ]]
							 		  [[set_userPose <- setR_userPose]]
							 		 )
							 		)[[setL_currentJoint <- set_currentJoint]]
							 		 [[setR_userPose <- set_userPose]]
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		dressedJoint__.x____ <- dressedJoint,
							 		snaggingDetected__.x____ <- snaggingDetected,
							 		invalidTrajectory__.x____ <- invalidTrajectory,
							 		invalidPoseDetected__.x____ <- invalidPoseDetected,
							 		userInterrupt__.x____ <- userInterrupt,
							 		poseDetected__.x____ <- poseDetected,
							 		dressingRequest__.x____ <- dressingRequest,
							 		garmentDetected__.x____ <- garmentDetected,
							 		armConfig__.x____ <- armConfig,
							 		gripCorrect__.x____ <- gripCorrect,
							 		gripperEngaged__.x____ <- gripperEngaged,
							 		correctedMovement__.x____ <- correctedMovement,
							 		secondHandDetected__.x____ <- secondHandDetected,
							 		userDressed__.x____ <- userDressed,
							 		userMoved__.x____ <- userMoved,
							 		handlingCorrect__.x____ <- handlingCorrect,
							 		garmentAtHand__.x____ <- garmentAtHand,
							 		arrivedAtGarment__.x____ <- arrivedAtGarment,
							 		garmentGripped__.x____ <- garmentGripped,
							 		orientedGarment__.x____ <- orientedGarment,
							 		movementStart__.x____ <- movementStart,
							 		movementEnd__.x____ <- movementEnd,
							 		forceStart__.x____ <- forceStart,
							 		forceEnd__.x____ <- forceEnd
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_currentJoint,setR_garmentWithUser,setR_isHandlingCorrect,setR_userPose,setR_firstArmDressed,setR_arrivedAtTarget,setR_isGripperEngaged,setR_targetPosition,setR_garmentAcquired,setR_garmentPosition |} ]] 
							  [[set_currentJoint <- setL_currentJoint,set_garmentWithUser <- setL_garmentWithUser,set_isHandlingCorrect <- setL_isHandlingCorrect,set_userPose <- setL_userPose,set_firstArmDressed <- setL_firstArmDressed,set_arrivedAtTarget <- setL_arrivedAtTarget,set_isGripperEngaged <- setL_isGripperEngaged,set_targetPosition <- setL_targetPosition,set_garmentAcquired <- setL_garmentAcquired,set_garmentPosition <- setL_garmentPosition]]
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							 			,setL_currentJoint
							 			,setL_garmentWithUser
							 			,setL_isHandlingCorrect
							 			,setL_userPose
							 			,setL_firstArmDressed
							 			,setL_arrivedAtTarget
							 			,setL_isGripperEngaged
							 			,setL_targetPosition
							 			,setL_garmentAcquired
							 			,setL_garmentPosition
							 			,setR_currentJoint
							 			 			,setR_garmentWithUser
							 			 			,setR_isHandlingCorrect
							 			 			,setR_userPose
							 			 			,setR_firstArmDressed
							 			 			,setR_arrivedAtTarget
							 			 			,setR_isGripperEngaged
							 			 			,setR_targetPosition
							 			 			,setR_garmentAcquired
							 			 			,setR_garmentPosition
							 			|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__,setL_currentJoint,setL_garmentWithUser,setL_isHandlingCorrect,setL_userPose,setL_firstArmDressed,setL_arrivedAtTarget,setL_isGripperEngaged,setL_targetPosition,setL_garmentAcquired,setL_garmentPosition |} ]]
							  [[set_currentJoint <- setR_currentJoint,set_garmentWithUser <- setR_garmentWithUser,set_isHandlingCorrect <- setR_isHandlingCorrect,set_userPose <- setR_userPose,set_firstArmDressed <- setR_firstArmDressed,set_arrivedAtTarget <- setR_arrivedAtTarget,set_isGripperEngaged <- setR_isGripperEngaged,set_targetPosition <- setR_targetPosition,set_garmentAcquired <- setR_garmentAcquired,set_garmentPosition <- setR_garmentPosition]]
							 )
							)[[setL_currentJoint <- set_currentJoint,setL_garmentWithUser <- set_garmentWithUser,setL_isHandlingCorrect <- set_isHandlingCorrect,setL_userPose <- set_userPose,setL_firstArmDressed <- set_firstArmDressed,setL_arrivedAtTarget <- set_arrivedAtTarget,setL_isGripperEngaged <- set_isGripperEngaged,setL_targetPosition <- set_targetPosition,setL_garmentAcquired <- set_garmentAcquired,setL_garmentPosition <- set_garmentPosition]]
							 [[setR_currentJoint <- set_currentJoint,setR_garmentWithUser <- set_garmentWithUser,setR_isHandlingCorrect <- set_isHandlingCorrect,setR_userPose <- set_userPose,setR_firstArmDressed <- set_firstArmDressed,setR_arrivedAtTarget <- set_arrivedAtTarget,setR_isGripperEngaged <- set_isGripperEngaged,setR_targetPosition <- set_targetPosition,setR_garmentAcquired <- set_garmentAcquired,setR_garmentPosition <- set_garmentPosition]]
							)\union(enteredSS,{terminate}) 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i0::enter,
							 	DetectUserPose::enter,
							 	MovingToJoint::enter,
							 	f0::enter,
							 	j0::enter,
							 	FaultCheck::enter,
							 	SnaggingCorrection::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_j0,internal__.NID_i0,poseDetected__.NID_DetectUserPose.in,internal__.NID_j0,invalidPoseDetected__.NID_FaultCheck.in,forceEnd__.NID_MovingToJoint.in,snaggingDetected__.NID_FaultCheck.in,internal__.NID_SnaggingCorrection,internal__.NID_FaultCheck|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i0::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   DetectUserPose::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   MovingToJoint::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   f0::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   j0::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   FaultCheck::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   SnaggingCorrection::VS_O__(id__)
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		 )
							 		 [[DetectUserPose::interrupt <- x__ | x__ <- {|interrupt,poseDetected__.NID_DetectUserPose.in|}]]
							 		 [[MovingToJoint::interrupt <- x__ | x__ <- {|interrupt,forceEnd__.NID_MovingToJoint.in|}]]
							 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 		 [[FaultCheck::interrupt <- x__ | x__ <- {|interrupt,invalidPoseDetected__.NID_FaultCheck.in,snaggingDetected__.NID_FaultCheck.in,internal__.NID_FaultCheck|}]]
							 		 [[SnaggingCorrection::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_SnaggingCorrection|}]]
							 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__,setR_userPose |} ]] 
							 		  [[set_currentJoint <- setL_currentJoint]]
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		 			,setL_currentJoint
							 		 			,setR_userPose
							 		 			|}) |]
							 		 ((i0::enter -> Transitions(id__))
							 		  [[ share__ <- x__ | x__ <- {| share__,setL_currentJoint |} ]]
							 		  [[set_userPose <- setR_userPose]]
							 		 )
							 		)[[setL_currentJoint <- set_currentJoint]]
							 		 [[setR_userPose <- set_userPose]]
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		dressedJoint__.x____ <- dressedJoint,
							 		snaggingDetected__.x____ <- snaggingDetected,
							 		invalidTrajectory__.x____ <- invalidTrajectory,
							 		invalidPoseDetected__.x____ <- invalidPoseDetected,
							 		userInterrupt__.x____ <- userInterrupt,
							 		poseDetected__.x____ <- poseDetected,
							 		dressingRequest__.x____ <- dressingRequest,
							 		garmentDetected__.x____ <- garmentDetected,
							 		armConfig__.x____ <- armConfig,
							 		gripCorrect__.x____ <- gripCorrect,
							 		gripperEngaged__.x____ <- gripperEngaged,
							 		correctedMovement__.x____ <- correctedMovement,
							 		secondHandDetected__.x____ <- secondHandDetected,
							 		userDressed__.x____ <- userDressed,
							 		userMoved__.x____ <- userMoved,
							 		handlingCorrect__.x____ <- handlingCorrect,
							 		garmentAtHand__.x____ <- garmentAtHand,
							 		arrivedAtGarment__.x____ <- arrivedAtGarment,
							 		garmentGripped__.x____ <- garmentGripped,
							 		orientedGarment__.x____ <- orientedGarment,
							 		movementStart__.x____ <- movementStart,
							 		movementEnd__.x____ <- movementEnd,
							 		forceStart__.x____ <- forceStart,
							 		forceEnd__.x____ <- forceEnd
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_currentJoint,setR_garmentWithUser,setR_isHandlingCorrect,setR_userPose,setR_firstArmDressed,setR_arrivedAtTarget,setR_isGripperEngaged,setR_targetPosition,setR_garmentAcquired,setR_garmentPosition |} ]] 
							  [[set_currentJoint <- setL_currentJoint,set_garmentWithUser <- setL_garmentWithUser,set_isHandlingCorrect <- setL_isHandlingCorrect,set_userPose <- setL_userPose,set_firstArmDressed <- setL_firstArmDressed,set_arrivedAtTarget <- setL_arrivedAtTarget,set_isGripperEngaged <- setL_isGripperEngaged,set_targetPosition <- setL_targetPosition,set_garmentAcquired <- setL_garmentAcquired,set_garmentPosition <- setL_garmentPosition]]
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							 			,setL_currentJoint
							 			,setL_garmentWithUser
							 			,setL_isHandlingCorrect
							 			,setL_userPose
							 			,setL_firstArmDressed
							 			,setL_arrivedAtTarget
							 			,setL_isGripperEngaged
							 			,setL_targetPosition
							 			,setL_garmentAcquired
							 			,setL_garmentPosition
							 			,setR_currentJoint
							 			 			,setR_garmentWithUser
							 			 			,setR_isHandlingCorrect
							 			 			,setR_userPose
							 			 			,setR_firstArmDressed
							 			 			,setR_arrivedAtTarget
							 			 			,setR_isGripperEngaged
							 			 			,setR_targetPosition
							 			 			,setR_garmentAcquired
							 			 			,setR_garmentPosition
							 			|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__,setL_currentJoint,setL_garmentWithUser,setL_isHandlingCorrect,setL_userPose,setL_firstArmDressed,setL_arrivedAtTarget,setL_isGripperEngaged,setL_targetPosition,setL_garmentAcquired,setL_garmentPosition |} ]]
							  [[set_currentJoint <- setR_currentJoint,set_garmentWithUser <- setR_garmentWithUser,set_isHandlingCorrect <- setR_isHandlingCorrect,set_userPose <- setR_userPose,set_firstArmDressed <- setR_firstArmDressed,set_arrivedAtTarget <- setR_arrivedAtTarget,set_isGripperEngaged <- setR_isGripperEngaged,set_targetPosition <- setR_targetPosition,set_garmentAcquired <- setR_garmentAcquired,set_garmentPosition <- setR_garmentPosition]]
							 )
							)[[setL_currentJoint <- set_currentJoint,setL_garmentWithUser <- set_garmentWithUser,setL_isHandlingCorrect <- set_isHandlingCorrect,setL_userPose <- set_userPose,setL_firstArmDressed <- set_firstArmDressed,setL_arrivedAtTarget <- set_arrivedAtTarget,setL_isGripperEngaged <- set_isGripperEngaged,setL_targetPosition <- set_targetPosition,setL_garmentAcquired <- set_garmentAcquired,setL_garmentPosition <- set_garmentPosition]]
							 [[setR_currentJoint <- set_currentJoint,setR_garmentWithUser <- set_garmentWithUser,setR_isHandlingCorrect <- set_isHandlingCorrect,setR_userPose <- set_userPose,setR_firstArmDressed <- set_firstArmDressed,setR_arrivedAtTarget <- set_arrivedAtTarget,setR_isGripperEngaged <- set_isGripperEngaged,setR_targetPosition <- set_targetPosition,setR_garmentAcquired <- set_garmentAcquired,setR_garmentPosition <- set_garmentPosition]]
							)\{terminate} 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
					
					Transitions(id__) = ((let
						Trans = share__choice(get_currentJoint?currentJoint -> (
							((share__ -> SKIP
							 [] dbisim(((currentJoint>0))&(internal__!NID_j0 -> SKIP ;  ((share__choice(share__choice(get_currentJoint?currentJoint -> true & (share__choice(set_currentJoint!Minus(currentJoint, 1, core_int) -> SKIP)))) ; DetectUserPose::enter -> SKIP))))
							 	 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; DetectUserPose::enter -> SKIP))))
							 	 [] dbisim((poseDetected__!NID_DetectUserPose.in?userPose:{userPose|userPose <- vector_vector_real_3_3, (((currentJoint==0) or (currentJoint==1)) or (currentJoint==2))} -> share__choice(set_userPose!userPose -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_currentJoint?currentJoint -> share__choice(get_userPose?userPose -> true & (share__choice(set_targetPosition!definitions_jointPosition(userPose,currentJoint) -> SKIP))))) ; MovingToJoint::enter -> SKIP)))
							 	 [] dbisim(((currentJoint==0))&(internal__!NID_j0 -> SKIP ;  ((share__choice(true & (share__choice(set_firstArmDressed!true -> SKIP))) ; f0::enter -> SKIP))))
							 	 [] dbisim((true)&(invalidPoseDetected__!NID_FaultCheck.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; DetectUserPose::enter -> SKIP)))
							 	 [] dbisim((true)&(forceEnd__!NID_MovingToJoint.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; FaultCheck::enter -> SKIP)))
							 	 [] dbisim((true)&(snaggingDetected__!NID_FaultCheck.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; SnaggingCorrection::enter -> SKIP)))
							 	 [] dbisim((true)&(internal__!NID_SnaggingCorrection -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(correctedMovement.out -> SKIP)) ; MovingToJoint::enter -> SKIP)))
							 	 [] dbisim((true)&(internal__!NID_FaultCheck -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_currentJoint?currentJoint -> true&(share__choice(dressedJoint.out!currentJoint -> SKIP))) ; j0::enter -> SKIP)))
							 ) ; Trans)
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
						)
						)
					within
						Trans
					)
					)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: Start
				module Start
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: SecondArm
				module SecondArm
				
				enterSS = 
						{|			i0::enter,
							DetectSecondHand::enter,
							ReleaseGrip::enter,
							f0::enter,
							MovingToSecondHand::enter,
							CheckingUserDressed::enter
						|}
				enteredSS = 
						{|			DetectSecondHand::entered,
							ReleaseGrip::entered,
							f0::entered,
							MovingToSecondHand::entered,
							CheckingUserDressed::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_i0|
					              NID_DetectSecondHand|
					              NID_ReleaseGrip|
					              NID_f0|
					              NID_MovingToSecondHand|
					              NID_CheckingUserDressed
					
					channel internal__ : NIDS
					channel dressedJoint__: NIDS.InOut.core_int
					channel snaggingDetected__: NIDS.InOut
					channel invalidTrajectory__: NIDS.InOut
					channel invalidPoseDetected__: NIDS.InOut
					channel userInterrupt__: NIDS.InOut
					channel poseDetected__: NIDS.InOut.vector_vector_real_3_3
					channel dressingRequest__: NIDS.InOut
					channel garmentDetected__: NIDS.InOut.vector_real_3
					channel armConfig__: NIDS.InOut
					channel gripCorrect__: NIDS.InOut.core_boolean
					channel gripperEngaged__: NIDS.InOut.core_boolean
					channel correctedMovement__: NIDS.InOut
					channel secondHandDetected__: NIDS.InOut.vector_real_3
					channel userDressed__: NIDS.InOut
					channel userMoved__: NIDS.InOut
					channel handlingCorrect__: NIDS.InOut.core_boolean
					channel garmentAtHand__: NIDS.InOut
					channel arrivedAtGarment__: NIDS.InOut
					channel garmentGripped__: NIDS.InOut
					channel orientedGarment__: NIDS.InOut
					channel movementStart__: NIDS.InOut.vector_real_3
					channel movementEnd__: NIDS.InOut
					channel forceStart__: NIDS.InOut.vector_real_3
					channel forceEnd__: NIDS.InOut
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: DetectSecondHand
					module DetectSecondHand
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__detectSecondArm(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__detectSecondArm(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: ReleaseGrip
					module ReleaseGrip
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__releaseGrip(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__releaseGrip(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: MovingToSecondHand
					module MovingToSecondHand
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: CheckingUserDressed
					module CheckingUserDressed
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__checkUserDressed(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__checkUserDressed(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i0::enter,
							 	DetectSecondHand::enter,
							 	ReleaseGrip::enter,
							 	f0::enter,
							 	MovingToSecondHand::enter,
							 	CheckingUserDressed::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_i0,internal__.NID_ReleaseGrip,secondHandDetected__.NID_DetectSecondHand.in,movementEnd__.NID_MovingToSecondHand.in,userDressed__.NID_CheckingUserDressed.in|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i0::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   DetectSecondHand::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   ReleaseGrip::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   f0::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   MovingToSecondHand::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   CheckingUserDressed::D__(id__)
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		 )
							 		 [[DetectSecondHand::interrupt <- x__ | x__ <- {|interrupt,secondHandDetected__.NID_DetectSecondHand.in|}]]
							 		 [[ReleaseGrip::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ReleaseGrip|}]]
							 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 		 [[MovingToSecondHand::interrupt <- x__ | x__ <- {|interrupt,movementEnd__.NID_MovingToSecondHand.in|}]]
							 		 [[CheckingUserDressed::interrupt <- x__ | x__ <- {|interrupt,userDressed__.NID_CheckingUserDressed.in|}]]
							 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__,setR_targetPosition |} ]] 
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		 			,setR_targetPosition
							 		 			|}) |]
							 		 ((i0::enter -> Transitions(id__))
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 		  [[set_targetPosition <- setR_targetPosition]]
							 		 )
							 		)
							 		 [[setR_targetPosition <- set_targetPosition]]
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		dressedJoint__.x____ <- dressedJoint,
							 		snaggingDetected__.x____ <- snaggingDetected,
							 		invalidTrajectory__.x____ <- invalidTrajectory,
							 		invalidPoseDetected__.x____ <- invalidPoseDetected,
							 		userInterrupt__.x____ <- userInterrupt,
							 		poseDetected__.x____ <- poseDetected,
							 		dressingRequest__.x____ <- dressingRequest,
							 		garmentDetected__.x____ <- garmentDetected,
							 		armConfig__.x____ <- armConfig,
							 		gripCorrect__.x____ <- gripCorrect,
							 		gripperEngaged__.x____ <- gripperEngaged,
							 		correctedMovement__.x____ <- correctedMovement,
							 		secondHandDetected__.x____ <- secondHandDetected,
							 		userDressed__.x____ <- userDressed,
							 		userMoved__.x____ <- userMoved,
							 		handlingCorrect__.x____ <- handlingCorrect,
							 		garmentAtHand__.x____ <- garmentAtHand,
							 		arrivedAtGarment__.x____ <- arrivedAtGarment,
							 		garmentGripped__.x____ <- garmentGripped,
							 		orientedGarment__.x____ <- orientedGarment,
							 		movementStart__.x____ <- movementStart,
							 		movementEnd__.x____ <- movementEnd,
							 		forceStart__.x____ <- forceStart,
							 		forceEnd__.x____ <- forceEnd
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_currentJoint,setR_garmentWithUser,setR_isHandlingCorrect,setR_userPose,setR_firstArmDressed,setR_arrivedAtTarget,setR_isGripperEngaged,setR_targetPosition,setR_garmentAcquired,setR_garmentPosition |} ]] 
							  [[set_currentJoint <- setL_currentJoint,set_garmentWithUser <- setL_garmentWithUser,set_isHandlingCorrect <- setL_isHandlingCorrect,set_userPose <- setL_userPose,set_firstArmDressed <- setL_firstArmDressed,set_arrivedAtTarget <- setL_arrivedAtTarget,set_isGripperEngaged <- setL_isGripperEngaged,set_targetPosition <- setL_targetPosition,set_garmentAcquired <- setL_garmentAcquired,set_garmentPosition <- setL_garmentPosition]]
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							 			,setL_currentJoint
							 			,setL_garmentWithUser
							 			,setL_isHandlingCorrect
							 			,setL_userPose
							 			,setL_firstArmDressed
							 			,setL_arrivedAtTarget
							 			,setL_isGripperEngaged
							 			,setL_targetPosition
							 			,setL_garmentAcquired
							 			,setL_garmentPosition
							 			,setR_currentJoint
							 			 			,setR_garmentWithUser
							 			 			,setR_isHandlingCorrect
							 			 			,setR_userPose
							 			 			,setR_firstArmDressed
							 			 			,setR_arrivedAtTarget
							 			 			,setR_isGripperEngaged
							 			 			,setR_targetPosition
							 			 			,setR_garmentAcquired
							 			 			,setR_garmentPosition
							 			|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__,setL_currentJoint,setL_garmentWithUser,setL_isHandlingCorrect,setL_userPose,setL_firstArmDressed,setL_arrivedAtTarget,setL_isGripperEngaged,setL_targetPosition,setL_garmentAcquired,setL_garmentPosition |} ]]
							  [[set_currentJoint <- setR_currentJoint,set_garmentWithUser <- setR_garmentWithUser,set_isHandlingCorrect <- setR_isHandlingCorrect,set_userPose <- setR_userPose,set_firstArmDressed <- setR_firstArmDressed,set_arrivedAtTarget <- setR_arrivedAtTarget,set_isGripperEngaged <- setR_isGripperEngaged,set_targetPosition <- setR_targetPosition,set_garmentAcquired <- setR_garmentAcquired,set_garmentPosition <- setR_garmentPosition]]
							 )
							)[[setL_currentJoint <- set_currentJoint,setL_garmentWithUser <- set_garmentWithUser,setL_isHandlingCorrect <- set_isHandlingCorrect,setL_userPose <- set_userPose,setL_firstArmDressed <- set_firstArmDressed,setL_arrivedAtTarget <- set_arrivedAtTarget,setL_isGripperEngaged <- set_isGripperEngaged,setL_targetPosition <- set_targetPosition,setL_garmentAcquired <- set_garmentAcquired,setL_garmentPosition <- set_garmentPosition]]
							 [[setR_currentJoint <- set_currentJoint,setR_garmentWithUser <- set_garmentWithUser,setR_isHandlingCorrect <- set_isHandlingCorrect,setR_userPose <- set_userPose,setR_firstArmDressed <- set_firstArmDressed,setR_arrivedAtTarget <- set_arrivedAtTarget,setR_isGripperEngaged <- set_isGripperEngaged,setR_targetPosition <- set_targetPosition,setR_garmentAcquired <- set_garmentAcquired,setR_garmentPosition <- set_garmentPosition]]
							)\union(enteredSS,{terminate}) 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i0::enter,
							 	DetectSecondHand::enter,
							 	ReleaseGrip::enter,
							 	f0::enter,
							 	MovingToSecondHand::enter,
							 	CheckingUserDressed::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_i0,internal__.NID_ReleaseGrip,secondHandDetected__.NID_DetectSecondHand.in,movementEnd__.NID_MovingToSecondHand.in,userDressed__.NID_CheckingUserDressed.in|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i0::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   DetectSecondHand::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   ReleaseGrip::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   f0::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   MovingToSecondHand::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   CheckingUserDressed::VS_O__(id__)
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		 )
							 		 [[DetectSecondHand::interrupt <- x__ | x__ <- {|interrupt,secondHandDetected__.NID_DetectSecondHand.in|}]]
							 		 [[ReleaseGrip::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ReleaseGrip|}]]
							 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 		 [[MovingToSecondHand::interrupt <- x__ | x__ <- {|interrupt,movementEnd__.NID_MovingToSecondHand.in|}]]
							 		 [[CheckingUserDressed::interrupt <- x__ | x__ <- {|interrupt,userDressed__.NID_CheckingUserDressed.in|}]]
							 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__,setR_targetPosition |} ]] 
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		 			,setR_targetPosition
							 		 			|}) |]
							 		 ((i0::enter -> Transitions(id__))
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 		  [[set_targetPosition <- setR_targetPosition]]
							 		 )
							 		)
							 		 [[setR_targetPosition <- set_targetPosition]]
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		dressedJoint__.x____ <- dressedJoint,
							 		snaggingDetected__.x____ <- snaggingDetected,
							 		invalidTrajectory__.x____ <- invalidTrajectory,
							 		invalidPoseDetected__.x____ <- invalidPoseDetected,
							 		userInterrupt__.x____ <- userInterrupt,
							 		poseDetected__.x____ <- poseDetected,
							 		dressingRequest__.x____ <- dressingRequest,
							 		garmentDetected__.x____ <- garmentDetected,
							 		armConfig__.x____ <- armConfig,
							 		gripCorrect__.x____ <- gripCorrect,
							 		gripperEngaged__.x____ <- gripperEngaged,
							 		correctedMovement__.x____ <- correctedMovement,
							 		secondHandDetected__.x____ <- secondHandDetected,
							 		userDressed__.x____ <- userDressed,
							 		userMoved__.x____ <- userMoved,
							 		handlingCorrect__.x____ <- handlingCorrect,
							 		garmentAtHand__.x____ <- garmentAtHand,
							 		arrivedAtGarment__.x____ <- arrivedAtGarment,
							 		garmentGripped__.x____ <- garmentGripped,
							 		orientedGarment__.x____ <- orientedGarment,
							 		movementStart__.x____ <- movementStart,
							 		movementEnd__.x____ <- movementEnd,
							 		forceStart__.x____ <- forceStart,
							 		forceEnd__.x____ <- forceEnd
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_currentJoint,setR_garmentWithUser,setR_isHandlingCorrect,setR_userPose,setR_firstArmDressed,setR_arrivedAtTarget,setR_isGripperEngaged,setR_targetPosition,setR_garmentAcquired,setR_garmentPosition |} ]] 
							  [[set_currentJoint <- setL_currentJoint,set_garmentWithUser <- setL_garmentWithUser,set_isHandlingCorrect <- setL_isHandlingCorrect,set_userPose <- setL_userPose,set_firstArmDressed <- setL_firstArmDressed,set_arrivedAtTarget <- setL_arrivedAtTarget,set_isGripperEngaged <- setL_isGripperEngaged,set_targetPosition <- setL_targetPosition,set_garmentAcquired <- setL_garmentAcquired,set_garmentPosition <- setL_garmentPosition]]
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							 			,setL_currentJoint
							 			,setL_garmentWithUser
							 			,setL_isHandlingCorrect
							 			,setL_userPose
							 			,setL_firstArmDressed
							 			,setL_arrivedAtTarget
							 			,setL_isGripperEngaged
							 			,setL_targetPosition
							 			,setL_garmentAcquired
							 			,setL_garmentPosition
							 			,setR_currentJoint
							 			 			,setR_garmentWithUser
							 			 			,setR_isHandlingCorrect
							 			 			,setR_userPose
							 			 			,setR_firstArmDressed
							 			 			,setR_arrivedAtTarget
							 			 			,setR_isGripperEngaged
							 			 			,setR_targetPosition
							 			 			,setR_garmentAcquired
							 			 			,setR_garmentPosition
							 			|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__,setL_currentJoint,setL_garmentWithUser,setL_isHandlingCorrect,setL_userPose,setL_firstArmDressed,setL_arrivedAtTarget,setL_isGripperEngaged,setL_targetPosition,setL_garmentAcquired,setL_garmentPosition |} ]]
							  [[set_currentJoint <- setR_currentJoint,set_garmentWithUser <- setR_garmentWithUser,set_isHandlingCorrect <- setR_isHandlingCorrect,set_userPose <- setR_userPose,set_firstArmDressed <- setR_firstArmDressed,set_arrivedAtTarget <- setR_arrivedAtTarget,set_isGripperEngaged <- setR_isGripperEngaged,set_targetPosition <- setR_targetPosition,set_garmentAcquired <- setR_garmentAcquired,set_garmentPosition <- setR_garmentPosition]]
							 )
							)[[setL_currentJoint <- set_currentJoint,setL_garmentWithUser <- set_garmentWithUser,setL_isHandlingCorrect <- set_isHandlingCorrect,setL_userPose <- set_userPose,setL_firstArmDressed <- set_firstArmDressed,setL_arrivedAtTarget <- set_arrivedAtTarget,setL_isGripperEngaged <- set_isGripperEngaged,setL_targetPosition <- set_targetPosition,setL_garmentAcquired <- set_garmentAcquired,setL_garmentPosition <- set_garmentPosition]]
							 [[setR_currentJoint <- set_currentJoint,setR_garmentWithUser <- set_garmentWithUser,setR_isHandlingCorrect <- set_isHandlingCorrect,setR_userPose <- set_userPose,setR_firstArmDressed <- set_firstArmDressed,setR_arrivedAtTarget <- set_arrivedAtTarget,setR_isGripperEngaged <- set_isGripperEngaged,setR_targetPosition <- set_targetPosition,setR_garmentAcquired <- set_garmentAcquired,setR_garmentPosition <- set_garmentPosition]]
							)\{terminate} 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
					
					Transitions(id__) = ((let
						Trans = (
							((share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; DetectSecondHand::enter -> SKIP))))
							 	 [] dbisim((true)&(internal__!NID_ReleaseGrip -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
							 	 [] dbisim((true)&(secondHandDetected__!NID_DetectSecondHand.in?targetPosition:{targetPosition|targetPosition <- vector_real_3, true} -> share__choice(set_targetPosition!targetPosition -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_targetPosition?targetPosition -> true&(share__choice(movementStart.out!targetPosition -> SKIP))) ; MovingToSecondHand::enter -> SKIP)))
							 	 [] dbisim((true)&(movementEnd__!NID_MovingToSecondHand.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; CheckingUserDressed::enter -> SKIP)))
							 	 [] dbisim((true)&(userDressed__!NID_CheckingUserDressed.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; ReleaseGrip::enter -> SKIP)))
							 ) ; Trans)
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
						)
					within
						Trans
					)
					)
					
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				CALL__reorientGarment(id__) 	= reorientGarmentCall -> SKIP
				CALL__pushTowards(id__,
							param_target,
							param_force) 	= pushTowardsCall.param_target.param_force -> SKIP
				CALL__checkFault(id__) 	= checkFaultCall -> SKIP
				CALL__setEEForces(id__,
							param_v) 	= setEEForcesCall.param_v -> SKIP
				CALL__getEEPos(id__) 	= getEEPosCall -> SKIP
				CALL__detectGarment(id__) 	= detectGarmentCall -> SKIP
				CALL__grip(id__) 	= gripCall -> SKIP
				CALL__checkCorrectHandling(id__) 	= checkCorrectHandlingCall -> SKIP
				CALL__checkUserDressed(id__) 	= checkUserDressedCall -> SKIP
				CALL__setEEPos(id__,
							param_v) 	= setEEPosCall.param_v -> SKIP
				CALL__checkMovement(id__) 	= checkMovementCall -> SKIP
				CALL__stepTowards(id__,
							param_target,
							param_speed) 	= stepTowardsCall.param_target.param_speed -> SKIP
				CALL__detectSecondArm(id__) 	= detectSecondArmCall -> SKIP
				CALL__releaseGrip(id__) 	= releaseGripCall -> SKIP
				CALL__detectUserPose(id__) 	= detectUserPoseCall -> SKIP
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = share__choice(get_garmentWithUser?garmentWithUser -> get_firstArmDressed?firstArmDressed -> get_garmentAcquired?garmentAcquired -> (
						((share__ -> SKIP
						 [] dbisim((garmentAcquired)&(internal__!NID_GarmentAcquisition -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; GarmentToUser::enter -> SKIP)))
						 	 [] dbisim((garmentWithUser)&(internal__!NID_GarmentToUser -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; DressingLoop::enter -> SKIP)))
						 	 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Start::enter -> SKIP))))
						 	 [] dbisim((true)&(dressingRequest__!NID_Start.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; GarmentAcquisition::enter -> SKIP)))
						 	 [] dbisim((firstArmDressed)&(internal__!NID_DressingLoop -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; SecondArm::enter -> SKIP)))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							GarmentAcquisition::enter,
							GarmentToUser::enter,
							DressingLoop::enter,
							Start::enter,
							SecondArm::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_GarmentAcquisition,internal__.NID_GarmentToUser,internal__.NID_i0,dressingRequest__.NID_Start.in,internal__.NID_DressingLoop|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__)
								   [| { share__, terminate } |] (
								   GarmentAcquisition::D__(id__)
								   [| { share__, terminate } |] (
								   GarmentToUser::D__(id__)
								   [| { share__, terminate } |] (
								   DressingLoop::D__(id__)
								   [| { share__, terminate } |] (
								   Start::D__(id__)
								   [| { share__, terminate } |] (
								   SecondArm::D__(id__)
								   )
								   )
								   )
								   )
								   )
								 )
								 [[GarmentAcquisition::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_GarmentAcquisition|}]]
								 [[GarmentToUser::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_GarmentToUser|}]]
								 [[DressingLoop::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_DressingLoop|}]]
								 [[Start::interrupt <- x__ | x__ <- {|interrupt,dressingRequest__.NID_Start.in|}]]
								 [[SecondArm::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_garmentWithUser <- setL_garmentWithUser,set_firstArmDressed <- setL_firstArmDressed,set_garmentAcquired <- setL_garmentAcquired]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_garmentWithUser
								 			,setL_firstArmDressed
								 			,setL_garmentAcquired
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_garmentWithUser,setL_firstArmDressed,setL_garmentAcquired |} ]]
								 )
								)[[setL_garmentWithUser <- set_garmentWithUser,setL_firstArmDressed <- set_firstArmDressed,setL_garmentAcquired <- set_garmentAcquired]]
								)
							)
							 \ hideSet)
							[[
								dressedJoint__.x____ <- dressedJoint,
								snaggingDetected__.x____ <- snaggingDetected,
								invalidTrajectory__.x____ <- invalidTrajectory,
								invalidPoseDetected__.x____ <- invalidPoseDetected,
								userInterrupt__.x____ <- userInterrupt,
								poseDetected__.x____ <- poseDetected,
								dressingRequest__.x____ <- dressingRequest,
								garmentDetected__.x____ <- garmentDetected,
								armConfig__.x____ <- armConfig,
								gripCorrect__.x____ <- gripCorrect,
								gripperEngaged__.x____ <- gripperEngaged,
								correctedMovement__.x____ <- correctedMovement,
								secondHandDetected__.x____ <- secondHandDetected,
								userDressed__.x____ <- userDressed,
								userMoved__.x____ <- userMoved,
								handlingCorrect__.x____ <- handlingCorrect,
								garmentAtHand__.x____ <- garmentAtHand,
								arrivedAtGarment__.x____ <- arrivedAtGarment,
								garmentGripped__.x____ <- garmentGripped,
								orientedGarment__.x____ <- orientedGarment,
								movementStart__.x____ <- movementStart,
								movementEnd__.x____ <- movementEnd,
								forceStart__.x____ <- forceStart,
								forceEnd__.x____ <- forceEnd
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				IteratedBehaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				Stateful(id__) = 
					((
						(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful(id__) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													dbisim(
														sbisim(
															dbisim(
																sbisim(
																	dbisim(
																		sbisim(
																			dbisim(
																				sbisim(
																					dbisim(
																						sbisim(
																							dbisim(
																								sbisim(
																									Behaviour(id__)
																									[| {|get_garmentPosition,set_garmentPosition,terminate|} |]
																									Memory_garmentPosition((0, 0, 0))
																								)\{|get_garmentPosition,set_garmentPosition|}
																							)
																							[| {|get_userPose,set_userPose,terminate|} |]
																							Memory_userPose(((0, 0, 0), (0, 0, 0), (0, 0, 0)))
																						)\{|get_userPose,set_userPose|}
																					)
																					[| {|get_firstArmDressed,set_firstArmDressed,terminate|} |]
																					Memory_firstArmDressed(false)
																				)\{|get_firstArmDressed,set_firstArmDressed|}
																			)
																			[| {|get_isGripperEngaged,set_isGripperEngaged,terminate|} |]
																			Memory_isGripperEngaged(false)
																		)\{|get_isGripperEngaged,set_isGripperEngaged|}
																	)
																	[| {|get_isHandlingCorrect,set_isHandlingCorrect,terminate|} |]
																	Memory_isHandlingCorrect(false)
																)\{|get_isHandlingCorrect,set_isHandlingCorrect|}
															)
															[| {|get_arrivedAtTarget,set_arrivedAtTarget,terminate|} |]
															Memory_arrivedAtTarget(false)
														)\{|get_arrivedAtTarget,set_arrivedAtTarget|}
													)
													[| {|get_targetPosition,set_targetPosition,terminate|} |]
													Memory_targetPosition((0, 0, 0))
												)\{|get_targetPosition,set_targetPosition|}
											)
											[| {|get_garmentWithUser,set_garmentWithUser,terminate|} |]
											Memory_garmentWithUser(false)
										)\{|get_garmentWithUser,set_garmentWithUser|}
									)
									[| {|get_garmentAcquired,set_garmentAcquired,terminate|} |]
									Memory_garmentAcquired(false)
								)\{|get_garmentAcquired,set_garmentAcquired|}
							)
							[| {|get_currentJoint,set_currentJoint,terminate|} |]
							Memory_currentJoint(2)
						)\{|get_currentJoint,set_currentJoint|}
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							GarmentAcquisition::enter,
							GarmentToUser::enter,
							DressingLoop::enter,
							Start::enter,
							SecondArm::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_GarmentAcquisition,internal__.NID_GarmentToUser,internal__.NID_i0,dressingRequest__.NID_Start.in,internal__.NID_DressingLoop|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__)
								   [| { share__, terminate } |] (
								   GarmentAcquisition::VS_O__(id__)
								   [| { share__, terminate } |] (
								   GarmentToUser::VS_O__(id__)
								   [| { share__, terminate } |] (
								   DressingLoop::VS_O__(id__)
								   [| { share__, terminate } |] (
								   Start::VS_O__(id__)
								   [| { share__, terminate } |] (
								   SecondArm::VS_O__(id__)
								   )
								   )
								   )
								   )
								   )
								 )
								 [[GarmentAcquisition::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_GarmentAcquisition|}]]
								 [[GarmentToUser::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_GarmentToUser|}]]
								 [[DressingLoop::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_DressingLoop|}]]
								 [[Start::interrupt <- x__ | x__ <- {|interrupt,dressingRequest__.NID_Start.in|}]]
								 [[SecondArm::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_garmentWithUser <- setL_garmentWithUser,set_firstArmDressed <- setL_firstArmDressed,set_garmentAcquired <- setL_garmentAcquired]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_garmentWithUser
								 			,setL_firstArmDressed
								 			,setL_garmentAcquired
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_garmentWithUser,setL_firstArmDressed,setL_garmentAcquired |} ]]
								 )
								)[[setL_garmentWithUser <- set_garmentWithUser,setL_firstArmDressed <- set_firstArmDressed,setL_garmentAcquired <- set_garmentAcquired]]
								)
							)
							 \ hideSet)
							[[
								dressedJoint__.x____ <- dressedJoint,
								snaggingDetected__.x____ <- snaggingDetected,
								invalidTrajectory__.x____ <- invalidTrajectory,
								invalidPoseDetected__.x____ <- invalidPoseDetected,
								userInterrupt__.x____ <- userInterrupt,
								poseDetected__.x____ <- poseDetected,
								dressingRequest__.x____ <- dressingRequest,
								garmentDetected__.x____ <- garmentDetected,
								armConfig__.x____ <- armConfig,
								gripCorrect__.x____ <- gripCorrect,
								gripperEngaged__.x____ <- gripperEngaged,
								correctedMovement__.x____ <- correctedMovement,
								secondHandDetected__.x____ <- secondHandDetected,
								userDressed__.x____ <- userDressed,
								userMoved__.x____ <- userMoved,
								handlingCorrect__.x____ <- handlingCorrect,
								garmentAtHand__.x____ <- garmentAtHand,
								arrivedAtGarment__.x____ <- arrivedAtGarment,
								garmentGripped__.x____ <- garmentGripped,
								orientedGarment__.x____ <- orientedGarment,
								movementStart__.x____ <- movementStart,
								movementEnd__.x____ <- movementEnd,
								forceStart__.x____ <- forceStart,
								forceEnd__.x____ <- forceEnd
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				IteratedBehaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				Stateful_VS_O(id__) = 
					dbisim((
						(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful_VS_O(id__) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													dbisim(
														sbisim(
															dbisim(
																sbisim(
																	dbisim(
																		sbisim(
																			dbisim(
																				sbisim(
																					dbisim(
																						sbisim(
																							dbisim(
																								sbisim(
																									Behaviour_VS_O(id__)
																									[| {|get_garmentPosition,set_garmentPosition,terminate|} |]
																									Memory_garmentPosition((0, 0, 0))
																								)\{|get_garmentPosition,set_garmentPosition|}
																							)
																							[| {|get_userPose,set_userPose,terminate|} |]
																							Memory_userPose(((0, 0, 0), (0, 0, 0), (0, 0, 0)))
																						)\{|get_userPose,set_userPose|}
																					)
																					[| {|get_firstArmDressed,set_firstArmDressed,terminate|} |]
																					Memory_firstArmDressed(false)
																				)\{|get_firstArmDressed,set_firstArmDressed|}
																			)
																			[| {|get_isGripperEngaged,set_isGripperEngaged,terminate|} |]
																			Memory_isGripperEngaged(false)
																		)\{|get_isGripperEngaged,set_isGripperEngaged|}
																	)
																	[| {|get_isHandlingCorrect,set_isHandlingCorrect,terminate|} |]
																	Memory_isHandlingCorrect(false)
																)\{|get_isHandlingCorrect,set_isHandlingCorrect|}
															)
															[| {|get_arrivedAtTarget,set_arrivedAtTarget,terminate|} |]
															Memory_arrivedAtTarget(false)
														)\{|get_arrivedAtTarget,set_arrivedAtTarget|}
													)
													[| {|get_targetPosition,set_targetPosition,terminate|} |]
													Memory_targetPosition((0, 0, 0))
												)\{|get_targetPosition,set_targetPosition|}
											)
											[| {|get_garmentWithUser,set_garmentWithUser,terminate|} |]
											Memory_garmentWithUser(false)
										)\{|get_garmentWithUser,set_garmentWithUser|}
									)
									[| {|get_garmentAcquired,set_garmentAcquired,terminate|} |]
									Memory_garmentAcquired(false)
								)\{|get_garmentAcquired,set_garmentAcquired|}
							)
							[| {|get_currentJoint,set_currentJoint,terminate|} |]
							Memory_currentJoint(2)
						)\{|get_currentJoint,set_currentJoint|}
					)
					)
				
				-- END
				
				-- Memory
				-- Memory variables
				Memory_currentJoint(currentJoint) =
					get_currentJoint!currentJoint -> Memory_currentJoint(currentJoint)
					[]
					set_currentJoint?x__ -> Memory_currentJoint(x__)
					[]
					terminate -> SKIP
				Memory_garmentAcquired(garmentAcquired) =
					get_garmentAcquired!garmentAcquired -> Memory_garmentAcquired(garmentAcquired)
					[]
					set_garmentAcquired?x__ -> Memory_garmentAcquired(x__)
					[]
					terminate -> SKIP
				Memory_garmentWithUser(garmentWithUser) =
					get_garmentWithUser!garmentWithUser -> Memory_garmentWithUser(garmentWithUser)
					[]
					set_garmentWithUser?x__ -> Memory_garmentWithUser(x__)
					[]
					terminate -> SKIP
				Memory_targetPosition(targetPosition) =
					get_targetPosition!targetPosition -> Memory_targetPosition(targetPosition)
					[]
					set_targetPosition?x__ -> Memory_targetPosition(x__)
					[]
					terminate -> SKIP
				Memory_arrivedAtTarget(arrivedAtTarget) =
					get_arrivedAtTarget!arrivedAtTarget -> Memory_arrivedAtTarget(arrivedAtTarget)
					[]
					set_arrivedAtTarget?x__ -> Memory_arrivedAtTarget(x__)
					[]
					terminate -> SKIP
				Memory_isHandlingCorrect(isHandlingCorrect) =
					get_isHandlingCorrect!isHandlingCorrect -> Memory_isHandlingCorrect(isHandlingCorrect)
					[]
					set_isHandlingCorrect?x__ -> Memory_isHandlingCorrect(x__)
					[]
					terminate -> SKIP
				Memory_isGripperEngaged(isGripperEngaged) =
					get_isGripperEngaged!isGripperEngaged -> Memory_isGripperEngaged(isGripperEngaged)
					[]
					set_isGripperEngaged?x__ -> Memory_isGripperEngaged(x__)
					[]
					terminate -> SKIP
				Memory_firstArmDressed(firstArmDressed) =
					get_firstArmDressed!firstArmDressed -> Memory_firstArmDressed(firstArmDressed)
					[]
					set_firstArmDressed?x__ -> Memory_firstArmDressed(x__)
					[]
					terminate -> SKIP
				Memory_userPose(userPose) =
					get_userPose!userPose -> Memory_userPose(userPose)
					[]
					set_userPose?x__ -> Memory_userPose(x__)
					[]
					terminate -> SKIP
				Memory_garmentPosition(garmentPosition) =
					get_garmentPosition!garmentPosition -> Memory_garmentPosition(garmentPosition)
					[]
					set_garmentPosition?x__ -> Memory_garmentPosition(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__) = Memory_currentJoint(2)
				[| { terminate } |] (
				Memory_garmentAcquired(false)
				[| { terminate } |] (
				Memory_garmentWithUser(false)
				[| { terminate } |] (
				Memory_targetPosition((0, 0, 0))
				[| { terminate } |] (
				Memory_arrivedAtTarget(false)
				[| { terminate } |] (
				Memory_isHandlingCorrect(false)
				[| { terminate } |] (
				Memory_isGripperEngaged(false)
				[| { terminate } |] (
				Memory_firstArmDressed(false)
				[| { terminate } |] (
				Memory_userPose(((0, 0, 0), (0, 0, 0), (0, 0, 0)))
				[| { terminate } |] (
				Memory_garmentPosition((0, 0, 0))
				)
				)
				)
				)
				)
				)
				)
				)
				)
				
				getsetLocalChannels = {|get_currentJoint,set_currentJoint,get_garmentAcquired,set_garmentAcquired,get_garmentWithUser,set_garmentWithUser,get_targetPosition,set_targetPosition,get_arrivedAtTarget,set_arrivedAtTarget,get_isHandlingCorrect,set_isHandlingCorrect,get_isGripperEngaged,set_isGripperEngaged,get_firstArmDressed,set_firstArmDressed,get_userPose,set_userPose,get_garmentPosition,set_garmentPosition|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__)
				
				D__(id__) = STM(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = sbisim(diamond(FVS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				HUP__(id__) = O__(id__) [|{share__}|] SKIP
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
			endmodule
			module stm_movement
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_NotEngaged|
				              NID_FreeMovement|
				              NID_ForceApplication
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_arrivedAtTarget, set_arrivedAtTarget, setL_arrivedAtTarget, setR_arrivedAtTarget: core_boolean
				channel get_vtarget, set_vtarget, setL_vtarget, setR_vtarget: vector_real_3
				channel get_vcurrent, set_vcurrent, setL_vcurrent, setR_vcurrent: vector_real_3
				channel get_ftarget, set_ftarget, setL_ftarget, setR_ftarget: vector_real_3
				channel get_fcurrent, set_fcurrent, setL_fcurrent, setR_fcurrent: vector_real_3
				channel get_p, set_p, setL_p, setR_p: vector_real_3
				channel get_d, set_d, setL_d, setR_d: vector_real_3
				channel get_i, set_i, setL_i, setR_i: vector_real_3
				channel get_e, set_e, setL_e, setR_e: vector_real_3
				channel get_e_old, set_e_old, setL_e_old, setR_e_old: vector_real_3
				channel get_t, set_t, setL_t, setR_t: vector_real_3
				channel get_t_old, set_t_old, setL_t_old, setR_t_old: vector_real_3
				channel get_o, set_o, setL_o, setR_o: vector_real_3
				
				-- Shared variable channels
				channel set_EXT_p: vector_real_3
				channel set_EXT_d: vector_real_3
				channel set_EXT_i: vector_real_3
				channel set_EXT_e: vector_real_3
				channel set_EXT_e_old: vector_real_3
				channel set_EXT_t: vector_real_3
				channel set_EXT_t_old: vector_real_3
				channel set_EXT_o: vector_real_3
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel allowMovement__: NIDS.InOut
				channel allowMovement: InOut
				channel movementOccurred__: NIDS.InOut
				channel movementOccurred: InOut
				channel stepMoved__: NIDS.InOut
				channel stepMoved: InOut
				channel movementInitiated__: NIDS.InOut
				channel movementInitiated: InOut
				channel movementWasAllowed__: NIDS.InOut
				channel movementWasAllowed: InOut
				channel forceWasAllowed__: NIDS.InOut
				channel forceWasAllowed: InOut
				channel forceInitiated__: NIDS.InOut
				channel forceInitiated: InOut
				channel resetMovement__: NIDS.InOut
				channel resetMovement: InOut
				channel forceApplied__: NIDS.InOut
				channel forceApplied: InOut
				channel movementStart__: NIDS.InOut.vector_real_3
				channel movementStart: InOut.vector_real_3
				channel movementEnd__: NIDS.InOut
				channel movementEnd: InOut
				channel endEffectorPosition__: NIDS.InOut.vector_real_3
				channel endEffectorPosition: InOut.vector_real_3
				channel forceEndEffector__: NIDS.InOut.vector_real_3
				channel forceEndEffector: InOut.vector_real_3
				channel forceStart__: NIDS.InOut.vector_real_3
				channel forceStart: InOut.vector_real_3
				channel forceEnd__: NIDS.InOut
				channel forceEnd: InOut
				
				-- Declaring call and ret events for undefined operations
				channel reorientGarmentCall
				channel gripCall
				channel checkCorrectHandlingCall
				channel checkUserDressedCall
				channel pushTowardsCall: vector_real_3.core_real
				channel setEEForcesCall: vector_real_3
				channel setEEPosCall: vector_real_3
				channel checkMovementCall
				channel stepTowardsCall: vector_real_3.core_real
				channel releaseGripCall
				
				enterSS = {|
				i0::enter,
				NotEngaged::enter,
				FreeMovement::enter,
				ForceApplication::enter
				|}
				
				enteredSS = 	{|
				NotEngaged::entered,
				FreeMovement::entered,
				ForceApplication::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_p,
					set_EXT_d,
					set_EXT_i,
					set_EXT_e,
					set_EXT_e_old,
					set_EXT_t,
					set_EXT_t_old,
					set_EXT_o
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	set_EXT_p, set_p,
					set_EXT_d, set_d,
					set_EXT_i, set_i,
					set_EXT_e, set_e,
					set_EXT_e_old, set_e_old,
					set_EXT_t, set_t,
					set_EXT_t_old, set_t_old,
					set_EXT_o, set_o
				,	allowMovement,
					movementOccurred,
					stepMoved,
					movementInitiated,
					movementWasAllowed,
					forceWasAllowed,
					forceInitiated,
					resetMovement,
					forceApplied,
					movementStart,
					movementEnd,
					endEffectorPosition,
					forceEndEffector,
					forceStart,
					forceEnd
				,	reorientGarmentCall,
					gripCall,
					checkCorrectHandlingCall,
					checkUserDressedCall,
					pushTowardsCall,
					setEEForcesCall,
					setEEPosCall,
					checkMovementCall,
					stepTowardsCall,
					releaseGripCall
					|}
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__,
							    const_movement_MovementControl_Kp,
							    const_movement_MovementControl_Ki,
							    const_movement_MovementControl_Kd,
							    const_movement_MovementControl_step,
							    const_movement_MovementControl_EPSILON,
							    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__,
							    const_movement_MovementControl_Kp,
							    const_movement_MovementControl_Ki,
							    const_movement_MovementControl_Kd,
							    const_movement_MovementControl_step,
							    const_movement_MovementControl_EPSILON,
							    const_movement_MovementControl_TARGET_TOTAL_FORCE) = D__(id__,
							    const_movement_MovementControl_Kp,
							    const_movement_MovementControl_Ki,
							    const_movement_MovementControl_Kd,
							    const_movement_MovementControl_step,
							    const_movement_MovementControl_EPSILON,
							    const_movement_MovementControl_TARGET_TOTAL_FORCE)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: NotEngaged
				module NotEngaged
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__,
							    const_movement_MovementControl_Kp,
							    const_movement_MovementControl_Ki,
							    const_movement_MovementControl_Kd,
							    const_movement_MovementControl_step,
							    const_movement_MovementControl_EPSILON,
							    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
							    const_movement_MovementControl_Kp,
							    const_movement_MovementControl_Ki,
							    const_movement_MovementControl_Kd,
							    const_movement_MovementControl_step,
							    const_movement_MovementControl_EPSILON,
							    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: FreeMovement
				module FreeMovement
				
				enterSS = 
						{|			i0::enter,
							Move::enter,
							SensePosition::enter,
							s0::enter
						|}
				enteredSS = 
						{|			Move::entered,
							SensePosition::entered,
							s0::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_i0|
					              NID_Move|
					              NID_SensePosition|
					              NID_s0
					
					channel internal__ : NIDS
					channel allowMovement__: NIDS.InOut
					channel movementOccurred__: NIDS.InOut
					channel stepMoved__: NIDS.InOut
					channel movementInitiated__: NIDS.InOut
					channel movementWasAllowed__: NIDS.InOut
					channel forceWasAllowed__: NIDS.InOut
					channel forceInitiated__: NIDS.InOut
					channel resetMovement__: NIDS.InOut
					channel forceApplied__: NIDS.InOut
					channel movementStart__: NIDS.InOut.vector_real_3
					channel movementEnd__: NIDS.InOut
					channel endEffectorPosition__: NIDS.InOut.vector_real_3
					channel forceEndEffector__: NIDS.InOut.vector_real_3
					channel forceStart__: NIDS.InOut.vector_real_3
					channel forceEnd__: NIDS.InOut
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						D__(id__,
								    const_movement_MovementControl_Kp,
								    const_movement_MovementControl_Ki,
								    const_movement_MovementControl_Kd,
								    const_movement_MovementControl_step,
								    const_movement_MovementControl_EPSILON,
								    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__,
								    const_movement_MovementControl_Kp,
								    const_movement_MovementControl_Ki,
								    const_movement_MovementControl_Kd,
								    const_movement_MovementControl_step,
								    const_movement_MovementControl_EPSILON,
								    const_movement_MovementControl_TARGET_TOTAL_FORCE) = D__(id__,
								    const_movement_MovementControl_Kp,
								    const_movement_MovementControl_Ki,
								    const_movement_MovementControl_Kd,
								    const_movement_MovementControl_step,
								    const_movement_MovementControl_EPSILON,
								    const_movement_MovementControl_TARGET_TOTAL_FORCE)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: Move
					module Move
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__,
								    const_movement_MovementControl_Kp,
								    const_movement_MovementControl_Ki,
								    const_movement_MovementControl_Kd,
								    const_movement_MovementControl_step,
								    const_movement_MovementControl_EPSILON,
								    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(get_o?o -> true&CALL__setEEPos(
										id__,
									    const_movement_MovementControl_Kp,
									    const_movement_MovementControl_Ki,
									    const_movement_MovementControl_Kd,
									    const_movement_MovementControl_step,
									    const_movement_MovementControl_EPSILON,
									    const_movement_MovementControl_TARGET_TOTAL_FORCE,
										o
									)) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
								    const_movement_MovementControl_Kp,
								    const_movement_MovementControl_Ki,
								    const_movement_MovementControl_Kd,
								    const_movement_MovementControl_step,
								    const_movement_MovementControl_EPSILON,
								    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(get_o?o -> true&CALL__setEEPos(
										id__,
									    const_movement_MovementControl_Kp,
									    const_movement_MovementControl_Ki,
									    const_movement_MovementControl_Kd,
									    const_movement_MovementControl_step,
									    const_movement_MovementControl_EPSILON,
									    const_movement_MovementControl_TARGET_TOTAL_FORCE,
										o
									)) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: SensePosition
					module SensePosition
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__,
								    const_movement_MovementControl_Kp,
								    const_movement_MovementControl_Ki,
								    const_movement_MovementControl_Kd,
								    const_movement_MovementControl_step,
								    const_movement_MovementControl_EPSILON,
								    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&(share__choice(endEffectorPosition.in?vcurrent -> (SStop /\ set_vcurrent!vcurrent -> SKIP)));share__choice(get_vcurrent?vcurrent -> true&CALL__PIDUpdate(
										id__,
									    const_movement_MovementControl_Kp,
									    const_movement_MovementControl_Ki,
									    const_movement_MovementControl_Kd,
									    const_movement_MovementControl_step,
									    const_movement_MovementControl_EPSILON,
									    const_movement_MovementControl_TARGET_TOTAL_FORCE,
										vcurrent,
										const_movement_MovementControl_Kp,
										const_movement_MovementControl_Ki,
										const_movement_MovementControl_Kd,
										const_movement_MovementControl_step
									)) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
								    const_movement_MovementControl_Kp,
								    const_movement_MovementControl_Ki,
								    const_movement_MovementControl_Kd,
								    const_movement_MovementControl_step,
								    const_movement_MovementControl_EPSILON,
								    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&(share__choice(endEffectorPosition.in?vcurrent -> (SStop /\ set_vcurrent!vcurrent -> SKIP)));share__choice(get_vcurrent?vcurrent -> true&CALL__PIDUpdate(
										id__,
									    const_movement_MovementControl_Kp,
									    const_movement_MovementControl_Ki,
									    const_movement_MovementControl_Kd,
									    const_movement_MovementControl_step,
									    const_movement_MovementControl_EPSILON,
									    const_movement_MovementControl_TARGET_TOTAL_FORCE,
										vcurrent,
										const_movement_MovementControl_Kp,
										const_movement_MovementControl_Ki,
										const_movement_MovementControl_Kd,
										const_movement_MovementControl_step
									)) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s0
					module s0
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__,
								    const_movement_MovementControl_Kp,
								    const_movement_MovementControl_Ki,
								    const_movement_MovementControl_Kd,
								    const_movement_MovementControl_step,
								    const_movement_MovementControl_EPSILON,
								    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP;true&(share__choice(stepMoved.out -> SKIP));share__choice(share__choice(get_vcurrent?vcurrent -> share__choice(get_vtarget?vtarget -> true & (share__choice(set_arrivedAtTarget!(definitions_dist(vtarget,vcurrent)<=const_movement_MovementControl_EPSILON) -> SKIP))))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
								    const_movement_MovementControl_Kp,
								    const_movement_MovementControl_Ki,
								    const_movement_MovementControl_Kd,
								    const_movement_MovementControl_step,
								    const_movement_MovementControl_EPSILON,
								    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP;true&(share__choice(stepMoved.out -> SKIP));share__choice(share__choice(get_vcurrent?vcurrent -> share__choice(get_vtarget?vtarget -> true & (share__choice(set_arrivedAtTarget!(definitions_dist(vtarget,vcurrent)<=const_movement_MovementControl_EPSILON) -> SKIP))))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__,
							    const_movement_MovementControl_Kp,
							    const_movement_MovementControl_Ki,
							    const_movement_MovementControl_Kd,
							    const_movement_MovementControl_step,
							    const_movement_MovementControl_EPSILON,
							    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(get_vtarget?vtarget -> true&CALL__PIDInitialize(
									id__,
								    const_movement_MovementControl_Kp,
								    const_movement_MovementControl_Ki,
								    const_movement_MovementControl_Kd,
								    const_movement_MovementControl_step,
								    const_movement_MovementControl_EPSILON,
								    const_movement_MovementControl_TARGET_TOTAL_FORCE,
									vtarget,
									const_movement_MovementControl_Kp,
									const_movement_MovementControl_Ki,
									const_movement_MovementControl_Kd,
									const_movement_MovementControl_step
								)) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i0::enter,
							 	Move::enter,
							 	SensePosition::enter,
							 	s0::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|allowMovement__.NID_SensePosition.in,endEffectorPosition__.NID_Move.in,internal__.NID_s0,internal__.NID_i0,resetMovement__.NID_SensePosition.in|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i0::D__(id__,
							 		   		    const_movement_MovementControl_Kp,
							 		   		    const_movement_MovementControl_Ki,
							 		   		    const_movement_MovementControl_Kd,
							 		   		    const_movement_MovementControl_step,
							 		   		    const_movement_MovementControl_EPSILON,
							 		   		    const_movement_MovementControl_TARGET_TOTAL_FORCE)
							 		   [| { share__, terminate } |] (
							 		   Move::D__(id__,
							 		   		    const_movement_MovementControl_Kp,
							 		   		    const_movement_MovementControl_Ki,
							 		   		    const_movement_MovementControl_Kd,
							 		   		    const_movement_MovementControl_step,
							 		   		    const_movement_MovementControl_EPSILON,
							 		   		    const_movement_MovementControl_TARGET_TOTAL_FORCE)
							 		   [| { share__, terminate } |] (
							 		   SensePosition::D__(id__,
							 		   		    const_movement_MovementControl_Kp,
							 		   		    const_movement_MovementControl_Ki,
							 		   		    const_movement_MovementControl_Kd,
							 		   		    const_movement_MovementControl_step,
							 		   		    const_movement_MovementControl_EPSILON,
							 		   		    const_movement_MovementControl_TARGET_TOTAL_FORCE)
							 		   [| { share__, terminate } |] (
							 		   s0::D__(id__,
							 		   		    const_movement_MovementControl_Kp,
							 		   		    const_movement_MovementControl_Ki,
							 		   		    const_movement_MovementControl_Kd,
							 		   		    const_movement_MovementControl_step,
							 		   		    const_movement_MovementControl_EPSILON,
							 		   		    const_movement_MovementControl_TARGET_TOTAL_FORCE)
							 		   )
							 		   )
							 		   )
							 		 )
							 		 [[Move::interrupt <- x__ | x__ <- {|interrupt,endEffectorPosition__.NID_Move.in|}]]
							 		 [[SensePosition::interrupt <- x__ | x__ <- {|interrupt,allowMovement__.NID_SensePosition.in,resetMovement__.NID_SensePosition.in|}]]
							 		 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
							 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__,setR_vcurrent |} ]] 
							 		  [[set_arrivedAtTarget <- setL_arrivedAtTarget]]
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		 			,setL_arrivedAtTarget
							 		 			,setR_vcurrent
							 		 			|}) |]
							 		 ((i0::enter -> Transitions(id__,
							 		 		    const_movement_MovementControl_Kp,
							 		 		    const_movement_MovementControl_Ki,
							 		 		    const_movement_MovementControl_Kd,
							 		 		    const_movement_MovementControl_step,
							 		 		    const_movement_MovementControl_EPSILON,
							 		 		    const_movement_MovementControl_TARGET_TOTAL_FORCE))
							 		  [[ share__ <- x__ | x__ <- {| share__,setL_arrivedAtTarget |} ]]
							 		  [[set_vcurrent <- setR_vcurrent]]
							 		 )
							 		)[[setL_arrivedAtTarget <- set_arrivedAtTarget]]
							 		 [[setR_vcurrent <- set_vcurrent]]
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		allowMovement__.x____ <- allowMovement,
							 		movementOccurred__.x____ <- movementOccurred,
							 		stepMoved__.x____ <- stepMoved,
							 		movementInitiated__.x____ <- movementInitiated,
							 		movementWasAllowed__.x____ <- movementWasAllowed,
							 		forceWasAllowed__.x____ <- forceWasAllowed,
							 		forceInitiated__.x____ <- forceInitiated,
							 		resetMovement__.x____ <- resetMovement,
							 		forceApplied__.x____ <- forceApplied,
							 		movementStart__.x____ <- movementStart,
							 		movementEnd__.x____ <- movementEnd,
							 		endEffectorPosition__.x____ <- endEffectorPosition,
							 		forceEndEffector__.x____ <- forceEndEffector,
							 		forceStart__.x____ <- forceStart,
							 		forceEnd__.x____ <- forceEnd
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_vcurrent,setR_p,setR_t_old,setR_fcurrent,setR_e,setR_t,setR_ftarget,setR_d,setR_arrivedAtTarget,setR_vtarget,setR_o,setR_i,setR_e_old |} ]] 
							  [[set_vcurrent <- setL_vcurrent,set_p <- setL_p,set_t_old <- setL_t_old,set_fcurrent <- setL_fcurrent,set_e <- setL_e,set_t <- setL_t,set_ftarget <- setL_ftarget,set_d <- setL_d,set_arrivedAtTarget <- setL_arrivedAtTarget,set_vtarget <- setL_vtarget,set_o <- setL_o,set_i <- setL_i,set_e_old <- setL_e_old]]
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							 			,setL_vcurrent
							 			,setL_p
							 			,setL_t_old
							 			,setL_fcurrent
							 			,setL_e
							 			,setL_t
							 			,setL_ftarget
							 			,setL_d
							 			,setL_arrivedAtTarget
							 			,setL_vtarget
							 			,setL_o
							 			,setL_i
							 			,setL_e_old
							 			,setR_vcurrent
							 			 			,setR_p
							 			 			,setR_t_old
							 			 			,setR_fcurrent
							 			 			,setR_e
							 			 			,setR_t
							 			 			,setR_ftarget
							 			 			,setR_d
							 			 			,setR_arrivedAtTarget
							 			 			,setR_vtarget
							 			 			,setR_o
							 			 			,setR_i
							 			 			,setR_e_old
							 			|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__,setL_vcurrent,setL_p,setL_t_old,setL_fcurrent,setL_e,setL_t,setL_ftarget,setL_d,setL_arrivedAtTarget,setL_vtarget,setL_o,setL_i,setL_e_old |} ]]
							  [[set_vcurrent <- setR_vcurrent,set_p <- setR_p,set_t_old <- setR_t_old,set_fcurrent <- setR_fcurrent,set_e <- setR_e,set_t <- setR_t,set_ftarget <- setR_ftarget,set_d <- setR_d,set_arrivedAtTarget <- setR_arrivedAtTarget,set_vtarget <- setR_vtarget,set_o <- setR_o,set_i <- setR_i,set_e_old <- setR_e_old]]
							 )
							)[[setL_vcurrent <- set_vcurrent,setL_p <- set_p,setL_t_old <- set_t_old,setL_fcurrent <- set_fcurrent,setL_e <- set_e,setL_t <- set_t,setL_ftarget <- set_ftarget,setL_d <- set_d,setL_arrivedAtTarget <- set_arrivedAtTarget,setL_vtarget <- set_vtarget,setL_o <- set_o,setL_i <- set_i,setL_e_old <- set_e_old]]
							 [[setR_vcurrent <- set_vcurrent,setR_p <- set_p,setR_t_old <- set_t_old,setR_fcurrent <- set_fcurrent,setR_e <- set_e,setR_t <- set_t,setR_ftarget <- set_ftarget,setR_d <- set_d,setR_arrivedAtTarget <- set_arrivedAtTarget,setR_vtarget <- set_vtarget,setR_o <- set_o,setR_i <- set_i,setR_e_old <- set_e_old]]
							)\union(enteredSS,{terminate}) 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
							    const_movement_MovementControl_Kp,
							    const_movement_MovementControl_Ki,
							    const_movement_MovementControl_Kd,
							    const_movement_MovementControl_step,
							    const_movement_MovementControl_EPSILON,
							    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(get_vtarget?vtarget -> true&CALL__PIDInitialize(
									id__,
								    const_movement_MovementControl_Kp,
								    const_movement_MovementControl_Ki,
								    const_movement_MovementControl_Kd,
								    const_movement_MovementControl_step,
								    const_movement_MovementControl_EPSILON,
								    const_movement_MovementControl_TARGET_TOTAL_FORCE,
									vtarget,
									const_movement_MovementControl_Kp,
									const_movement_MovementControl_Ki,
									const_movement_MovementControl_Kd,
									const_movement_MovementControl_step
								)) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i0::enter,
							 	Move::enter,
							 	SensePosition::enter,
							 	s0::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|allowMovement__.NID_SensePosition.in,endEffectorPosition__.NID_Move.in,internal__.NID_s0,internal__.NID_i0,resetMovement__.NID_SensePosition.in|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i0::VS_O__(id__,
							 		   		    const_movement_MovementControl_Kp,
							 		   		    const_movement_MovementControl_Ki,
							 		   		    const_movement_MovementControl_Kd,
							 		   		    const_movement_MovementControl_step,
							 		   		    const_movement_MovementControl_EPSILON,
							 		   		    const_movement_MovementControl_TARGET_TOTAL_FORCE)
							 		   [| { share__, terminate } |] (
							 		   Move::VS_O__(id__,
							 		   		    const_movement_MovementControl_Kp,
							 		   		    const_movement_MovementControl_Ki,
							 		   		    const_movement_MovementControl_Kd,
							 		   		    const_movement_MovementControl_step,
							 		   		    const_movement_MovementControl_EPSILON,
							 		   		    const_movement_MovementControl_TARGET_TOTAL_FORCE)
							 		   [| { share__, terminate } |] (
							 		   SensePosition::VS_O__(id__,
							 		   		    const_movement_MovementControl_Kp,
							 		   		    const_movement_MovementControl_Ki,
							 		   		    const_movement_MovementControl_Kd,
							 		   		    const_movement_MovementControl_step,
							 		   		    const_movement_MovementControl_EPSILON,
							 		   		    const_movement_MovementControl_TARGET_TOTAL_FORCE)
							 		   [| { share__, terminate } |] (
							 		   s0::VS_O__(id__,
							 		   		    const_movement_MovementControl_Kp,
							 		   		    const_movement_MovementControl_Ki,
							 		   		    const_movement_MovementControl_Kd,
							 		   		    const_movement_MovementControl_step,
							 		   		    const_movement_MovementControl_EPSILON,
							 		   		    const_movement_MovementControl_TARGET_TOTAL_FORCE)
							 		   )
							 		   )
							 		   )
							 		 )
							 		 [[Move::interrupt <- x__ | x__ <- {|interrupt,endEffectorPosition__.NID_Move.in|}]]
							 		 [[SensePosition::interrupt <- x__ | x__ <- {|interrupt,allowMovement__.NID_SensePosition.in,resetMovement__.NID_SensePosition.in|}]]
							 		 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
							 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__,setR_vcurrent |} ]] 
							 		  [[set_arrivedAtTarget <- setL_arrivedAtTarget]]
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		 			,setL_arrivedAtTarget
							 		 			,setR_vcurrent
							 		 			|}) |]
							 		 ((i0::enter -> Transitions(id__,
							 		 		    const_movement_MovementControl_Kp,
							 		 		    const_movement_MovementControl_Ki,
							 		 		    const_movement_MovementControl_Kd,
							 		 		    const_movement_MovementControl_step,
							 		 		    const_movement_MovementControl_EPSILON,
							 		 		    const_movement_MovementControl_TARGET_TOTAL_FORCE))
							 		  [[ share__ <- x__ | x__ <- {| share__,setL_arrivedAtTarget |} ]]
							 		  [[set_vcurrent <- setR_vcurrent]]
							 		 )
							 		)[[setL_arrivedAtTarget <- set_arrivedAtTarget]]
							 		 [[setR_vcurrent <- set_vcurrent]]
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		allowMovement__.x____ <- allowMovement,
							 		movementOccurred__.x____ <- movementOccurred,
							 		stepMoved__.x____ <- stepMoved,
							 		movementInitiated__.x____ <- movementInitiated,
							 		movementWasAllowed__.x____ <- movementWasAllowed,
							 		forceWasAllowed__.x____ <- forceWasAllowed,
							 		forceInitiated__.x____ <- forceInitiated,
							 		resetMovement__.x____ <- resetMovement,
							 		forceApplied__.x____ <- forceApplied,
							 		movementStart__.x____ <- movementStart,
							 		movementEnd__.x____ <- movementEnd,
							 		endEffectorPosition__.x____ <- endEffectorPosition,
							 		forceEndEffector__.x____ <- forceEndEffector,
							 		forceStart__.x____ <- forceStart,
							 		forceEnd__.x____ <- forceEnd
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_vcurrent,setR_p,setR_t_old,setR_fcurrent,setR_e,setR_t,setR_ftarget,setR_d,setR_arrivedAtTarget,setR_vtarget,setR_o,setR_i,setR_e_old |} ]] 
							  [[set_vcurrent <- setL_vcurrent,set_p <- setL_p,set_t_old <- setL_t_old,set_fcurrent <- setL_fcurrent,set_e <- setL_e,set_t <- setL_t,set_ftarget <- setL_ftarget,set_d <- setL_d,set_arrivedAtTarget <- setL_arrivedAtTarget,set_vtarget <- setL_vtarget,set_o <- setL_o,set_i <- setL_i,set_e_old <- setL_e_old]]
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							 			,setL_vcurrent
							 			,setL_p
							 			,setL_t_old
							 			,setL_fcurrent
							 			,setL_e
							 			,setL_t
							 			,setL_ftarget
							 			,setL_d
							 			,setL_arrivedAtTarget
							 			,setL_vtarget
							 			,setL_o
							 			,setL_i
							 			,setL_e_old
							 			,setR_vcurrent
							 			 			,setR_p
							 			 			,setR_t_old
							 			 			,setR_fcurrent
							 			 			,setR_e
							 			 			,setR_t
							 			 			,setR_ftarget
							 			 			,setR_d
							 			 			,setR_arrivedAtTarget
							 			 			,setR_vtarget
							 			 			,setR_o
							 			 			,setR_i
							 			 			,setR_e_old
							 			|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__,setL_vcurrent,setL_p,setL_t_old,setL_fcurrent,setL_e,setL_t,setL_ftarget,setL_d,setL_arrivedAtTarget,setL_vtarget,setL_o,setL_i,setL_e_old |} ]]
							  [[set_vcurrent <- setR_vcurrent,set_p <- setR_p,set_t_old <- setR_t_old,set_fcurrent <- setR_fcurrent,set_e <- setR_e,set_t <- setR_t,set_ftarget <- setR_ftarget,set_d <- setR_d,set_arrivedAtTarget <- setR_arrivedAtTarget,set_vtarget <- setR_vtarget,set_o <- setR_o,set_i <- setR_i,set_e_old <- setR_e_old]]
							 )
							)[[setL_vcurrent <- set_vcurrent,setL_p <- set_p,setL_t_old <- set_t_old,setL_fcurrent <- set_fcurrent,setL_e <- set_e,setL_t <- set_t,setL_ftarget <- set_ftarget,setL_d <- set_d,setL_arrivedAtTarget <- set_arrivedAtTarget,setL_vtarget <- set_vtarget,setL_o <- set_o,setL_i <- set_i,setL_e_old <- set_e_old]]
							 [[setR_vcurrent <- set_vcurrent,setR_p <- set_p,setR_t_old <- set_t_old,setR_fcurrent <- set_fcurrent,setR_e <- set_e,setR_t <- set_t,setR_ftarget <- set_ftarget,setR_d <- set_d,setR_arrivedAtTarget <- set_arrivedAtTarget,setR_vtarget <- set_vtarget,setR_o <- set_o,setR_i <- set_i,setR_e_old <- set_e_old]]
							)\{terminate} 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
					
					Transitions(id__,
							    const_movement_MovementControl_Kp,
							    const_movement_MovementControl_Ki,
							    const_movement_MovementControl_Kd,
							    const_movement_MovementControl_step,
							    const_movement_MovementControl_EPSILON,
							    const_movement_MovementControl_TARGET_TOTAL_FORCE) = ((let
						Trans = share__choice(get_arrivedAtTarget?arrivedAtTarget -> (
							((share__ -> SKIP
							 [] dbisim((true)&(allowMovement__!NID_SensePosition.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(movementWasAllowed.out -> SKIP)) ; Move::enter -> SKIP)))
							 	 [] dbisim((true)&(endEffectorPosition__!NID_Move.in?vcurrent:{vcurrent|vcurrent <- vector_real_3, true} -> share__choice(set_vcurrent!vcurrent -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(movementOccurred.out -> SKIP)) ; s0::enter -> SKIP)))
							 	 [] dbisim(((not (arrivedAtTarget)))&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; SensePosition::enter -> SKIP)))
							 	 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; SensePosition::enter -> SKIP))))
							 	 [] dbisim((true)&(resetMovement__!NID_SensePosition.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; SensePosition::enter -> SKIP)))
							 ) ; Trans)
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
						)
						)
					within
						Trans
					)
					)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: ForceApplication
				module ForceApplication
				
				enterSS = 
						{|			i0::enter,
							CheckForce::enter,
							Move::enter,
							s0::enter
						|}
				enteredSS = 
						{|			CheckForce::entered,
							Move::entered,
							s0::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_i0|
					              NID_CheckForce|
					              NID_Move|
					              NID_s0
					
					channel internal__ : NIDS
					channel allowMovement__: NIDS.InOut
					channel movementOccurred__: NIDS.InOut
					channel stepMoved__: NIDS.InOut
					channel movementInitiated__: NIDS.InOut
					channel movementWasAllowed__: NIDS.InOut
					channel forceWasAllowed__: NIDS.InOut
					channel forceInitiated__: NIDS.InOut
					channel resetMovement__: NIDS.InOut
					channel forceApplied__: NIDS.InOut
					channel movementStart__: NIDS.InOut.vector_real_3
					channel movementEnd__: NIDS.InOut
					channel endEffectorPosition__: NIDS.InOut.vector_real_3
					channel forceEndEffector__: NIDS.InOut.vector_real_3
					channel forceStart__: NIDS.InOut.vector_real_3
					channel forceEnd__: NIDS.InOut
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						D__(id__,
								    const_movement_MovementControl_Kp,
								    const_movement_MovementControl_Ki,
								    const_movement_MovementControl_Kd,
								    const_movement_MovementControl_step,
								    const_movement_MovementControl_EPSILON,
								    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__,
								    const_movement_MovementControl_Kp,
								    const_movement_MovementControl_Ki,
								    const_movement_MovementControl_Kd,
								    const_movement_MovementControl_step,
								    const_movement_MovementControl_EPSILON,
								    const_movement_MovementControl_TARGET_TOTAL_FORCE) = D__(id__,
								    const_movement_MovementControl_Kp,
								    const_movement_MovementControl_Ki,
								    const_movement_MovementControl_Kd,
								    const_movement_MovementControl_step,
								    const_movement_MovementControl_EPSILON,
								    const_movement_MovementControl_TARGET_TOTAL_FORCE)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: CheckForce
					module CheckForce
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__,
								    const_movement_MovementControl_Kp,
								    const_movement_MovementControl_Ki,
								    const_movement_MovementControl_Kd,
								    const_movement_MovementControl_step,
								    const_movement_MovementControl_EPSILON,
								    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&(share__choice(forceEndEffector.in?fcurrent -> (SStop /\ set_fcurrent!fcurrent -> SKIP)));share__choice(get_fcurrent?fcurrent -> true&CALL__PIDUpdate(
										id__,
									    const_movement_MovementControl_Kp,
									    const_movement_MovementControl_Ki,
									    const_movement_MovementControl_Kd,
									    const_movement_MovementControl_step,
									    const_movement_MovementControl_EPSILON,
									    const_movement_MovementControl_TARGET_TOTAL_FORCE,
										fcurrent,
										const_movement_MovementControl_Kp,
										const_movement_MovementControl_Ki,
										const_movement_MovementControl_Kd,
										const_movement_MovementControl_step
									)) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
								    const_movement_MovementControl_Kp,
								    const_movement_MovementControl_Ki,
								    const_movement_MovementControl_Kd,
								    const_movement_MovementControl_step,
								    const_movement_MovementControl_EPSILON,
								    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&(share__choice(forceEndEffector.in?fcurrent -> (SStop /\ set_fcurrent!fcurrent -> SKIP)));share__choice(get_fcurrent?fcurrent -> true&CALL__PIDUpdate(
										id__,
									    const_movement_MovementControl_Kp,
									    const_movement_MovementControl_Ki,
									    const_movement_MovementControl_Kd,
									    const_movement_MovementControl_step,
									    const_movement_MovementControl_EPSILON,
									    const_movement_MovementControl_TARGET_TOTAL_FORCE,
										fcurrent,
										const_movement_MovementControl_Kp,
										const_movement_MovementControl_Ki,
										const_movement_MovementControl_Kd,
										const_movement_MovementControl_step
									)) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: Move
					module Move
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__,
								    const_movement_MovementControl_Kp,
								    const_movement_MovementControl_Ki,
								    const_movement_MovementControl_Kd,
								    const_movement_MovementControl_step,
								    const_movement_MovementControl_EPSILON,
								    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(get_o?o -> true&CALL__setEEForces(
										id__,
									    const_movement_MovementControl_Kp,
									    const_movement_MovementControl_Ki,
									    const_movement_MovementControl_Kd,
									    const_movement_MovementControl_step,
									    const_movement_MovementControl_EPSILON,
									    const_movement_MovementControl_TARGET_TOTAL_FORCE,
										o
									)) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
								    const_movement_MovementControl_Kp,
								    const_movement_MovementControl_Ki,
								    const_movement_MovementControl_Kd,
								    const_movement_MovementControl_step,
								    const_movement_MovementControl_EPSILON,
								    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(get_o?o -> true&CALL__setEEForces(
										id__,
									    const_movement_MovementControl_Kp,
									    const_movement_MovementControl_Ki,
									    const_movement_MovementControl_Kd,
									    const_movement_MovementControl_step,
									    const_movement_MovementControl_EPSILON,
									    const_movement_MovementControl_TARGET_TOTAL_FORCE,
										o
									)) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s0
					module s0
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__,
								    const_movement_MovementControl_Kp,
								    const_movement_MovementControl_Ki,
								    const_movement_MovementControl_Kd,
								    const_movement_MovementControl_step,
								    const_movement_MovementControl_EPSILON,
								    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP;true&(share__choice(forceApplied.out -> SKIP));share__choice(share__choice(get_vcurrent?vcurrent -> share__choice(get_vtarget?vtarget -> true & (share__choice(set_arrivedAtTarget!(definitions_dist(vtarget,vcurrent)<=const_movement_MovementControl_EPSILON) -> SKIP))))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
								    const_movement_MovementControl_Kp,
								    const_movement_MovementControl_Ki,
								    const_movement_MovementControl_Kd,
								    const_movement_MovementControl_step,
								    const_movement_MovementControl_EPSILON,
								    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP;true&(share__choice(forceApplied.out -> SKIP));share__choice(share__choice(get_vcurrent?vcurrent -> share__choice(get_vtarget?vtarget -> true & (share__choice(set_arrivedAtTarget!(definitions_dist(vtarget,vcurrent)<=const_movement_MovementControl_EPSILON) -> SKIP))))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__,
							    const_movement_MovementControl_Kp,
							    const_movement_MovementControl_Ki,
							    const_movement_MovementControl_Kd,
							    const_movement_MovementControl_step,
							    const_movement_MovementControl_EPSILON,
							    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(share__choice(get_vcurrent?vcurrent -> share__choice(get_vtarget?vtarget -> true & (share__choice(set_ftarget!definitions_targetForces(vcurrent,vtarget,const_movement_MovementControl_TARGET_TOTAL_FORCE) -> SKIP)))));share__choice(get_ftarget?ftarget -> true&CALL__PIDInitialize(
									id__,
								    const_movement_MovementControl_Kp,
								    const_movement_MovementControl_Ki,
								    const_movement_MovementControl_Kd,
								    const_movement_MovementControl_step,
								    const_movement_MovementControl_EPSILON,
								    const_movement_MovementControl_TARGET_TOTAL_FORCE,
									ftarget,
									const_movement_MovementControl_Kp,
									const_movement_MovementControl_Ki,
									const_movement_MovementControl_Kd,
									const_movement_MovementControl_step
								)) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i0::enter,
							 	CheckForce::enter,
							 	Move::enter,
							 	s0::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|allowMovement__.NID_CheckForce.in,internal__.NID_s0,internal__.NID_i0,endEffectorPosition__.NID_Move.in,resetMovement__.NID_CheckForce.in|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i0::D__(id__,
							 		   		    const_movement_MovementControl_Kp,
							 		   		    const_movement_MovementControl_Ki,
							 		   		    const_movement_MovementControl_Kd,
							 		   		    const_movement_MovementControl_step,
							 		   		    const_movement_MovementControl_EPSILON,
							 		   		    const_movement_MovementControl_TARGET_TOTAL_FORCE)
							 		   [| { share__, terminate } |] (
							 		   CheckForce::D__(id__,
							 		   		    const_movement_MovementControl_Kp,
							 		   		    const_movement_MovementControl_Ki,
							 		   		    const_movement_MovementControl_Kd,
							 		   		    const_movement_MovementControl_step,
							 		   		    const_movement_MovementControl_EPSILON,
							 		   		    const_movement_MovementControl_TARGET_TOTAL_FORCE)
							 		   [| { share__, terminate } |] (
							 		   Move::D__(id__,
							 		   		    const_movement_MovementControl_Kp,
							 		   		    const_movement_MovementControl_Ki,
							 		   		    const_movement_MovementControl_Kd,
							 		   		    const_movement_MovementControl_step,
							 		   		    const_movement_MovementControl_EPSILON,
							 		   		    const_movement_MovementControl_TARGET_TOTAL_FORCE)
							 		   [| { share__, terminate } |] (
							 		   s0::D__(id__,
							 		   		    const_movement_MovementControl_Kp,
							 		   		    const_movement_MovementControl_Ki,
							 		   		    const_movement_MovementControl_Kd,
							 		   		    const_movement_MovementControl_step,
							 		   		    const_movement_MovementControl_EPSILON,
							 		   		    const_movement_MovementControl_TARGET_TOTAL_FORCE)
							 		   )
							 		   )
							 		   )
							 		 )
							 		 [[CheckForce::interrupt <- x__ | x__ <- {|interrupt,allowMovement__.NID_CheckForce.in,resetMovement__.NID_CheckForce.in|}]]
							 		 [[Move::interrupt <- x__ | x__ <- {|interrupt,endEffectorPosition__.NID_Move.in|}]]
							 		 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
							 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__,setR_vcurrent |} ]] 
							 		  [[set_arrivedAtTarget <- setL_arrivedAtTarget]]
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		 			,setL_arrivedAtTarget
							 		 			,setR_vcurrent
							 		 			|}) |]
							 		 ((i0::enter -> Transitions(id__,
							 		 		    const_movement_MovementControl_Kp,
							 		 		    const_movement_MovementControl_Ki,
							 		 		    const_movement_MovementControl_Kd,
							 		 		    const_movement_MovementControl_step,
							 		 		    const_movement_MovementControl_EPSILON,
							 		 		    const_movement_MovementControl_TARGET_TOTAL_FORCE))
							 		  [[ share__ <- x__ | x__ <- {| share__,setL_arrivedAtTarget |} ]]
							 		  [[set_vcurrent <- setR_vcurrent]]
							 		 )
							 		)[[setL_arrivedAtTarget <- set_arrivedAtTarget]]
							 		 [[setR_vcurrent <- set_vcurrent]]
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		allowMovement__.x____ <- allowMovement,
							 		movementOccurred__.x____ <- movementOccurred,
							 		stepMoved__.x____ <- stepMoved,
							 		movementInitiated__.x____ <- movementInitiated,
							 		movementWasAllowed__.x____ <- movementWasAllowed,
							 		forceWasAllowed__.x____ <- forceWasAllowed,
							 		forceInitiated__.x____ <- forceInitiated,
							 		resetMovement__.x____ <- resetMovement,
							 		forceApplied__.x____ <- forceApplied,
							 		movementStart__.x____ <- movementStart,
							 		movementEnd__.x____ <- movementEnd,
							 		endEffectorPosition__.x____ <- endEffectorPosition,
							 		forceEndEffector__.x____ <- forceEndEffector,
							 		forceStart__.x____ <- forceStart,
							 		forceEnd__.x____ <- forceEnd
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_vcurrent,setR_p,setR_t_old,setR_fcurrent,setR_e,setR_t,setR_ftarget,setR_d,setR_arrivedAtTarget,setR_vtarget,setR_o,setR_i,setR_e_old |} ]] 
							  [[set_vcurrent <- setL_vcurrent,set_p <- setL_p,set_t_old <- setL_t_old,set_fcurrent <- setL_fcurrent,set_e <- setL_e,set_t <- setL_t,set_ftarget <- setL_ftarget,set_d <- setL_d,set_arrivedAtTarget <- setL_arrivedAtTarget,set_vtarget <- setL_vtarget,set_o <- setL_o,set_i <- setL_i,set_e_old <- setL_e_old]]
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							 			,setL_vcurrent
							 			,setL_p
							 			,setL_t_old
							 			,setL_fcurrent
							 			,setL_e
							 			,setL_t
							 			,setL_ftarget
							 			,setL_d
							 			,setL_arrivedAtTarget
							 			,setL_vtarget
							 			,setL_o
							 			,setL_i
							 			,setL_e_old
							 			,setR_vcurrent
							 			 			,setR_p
							 			 			,setR_t_old
							 			 			,setR_fcurrent
							 			 			,setR_e
							 			 			,setR_t
							 			 			,setR_ftarget
							 			 			,setR_d
							 			 			,setR_arrivedAtTarget
							 			 			,setR_vtarget
							 			 			,setR_o
							 			 			,setR_i
							 			 			,setR_e_old
							 			|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__,setL_vcurrent,setL_p,setL_t_old,setL_fcurrent,setL_e,setL_t,setL_ftarget,setL_d,setL_arrivedAtTarget,setL_vtarget,setL_o,setL_i,setL_e_old |} ]]
							  [[set_vcurrent <- setR_vcurrent,set_p <- setR_p,set_t_old <- setR_t_old,set_fcurrent <- setR_fcurrent,set_e <- setR_e,set_t <- setR_t,set_ftarget <- setR_ftarget,set_d <- setR_d,set_arrivedAtTarget <- setR_arrivedAtTarget,set_vtarget <- setR_vtarget,set_o <- setR_o,set_i <- setR_i,set_e_old <- setR_e_old]]
							 )
							)[[setL_vcurrent <- set_vcurrent,setL_p <- set_p,setL_t_old <- set_t_old,setL_fcurrent <- set_fcurrent,setL_e <- set_e,setL_t <- set_t,setL_ftarget <- set_ftarget,setL_d <- set_d,setL_arrivedAtTarget <- set_arrivedAtTarget,setL_vtarget <- set_vtarget,setL_o <- set_o,setL_i <- set_i,setL_e_old <- set_e_old]]
							 [[setR_vcurrent <- set_vcurrent,setR_p <- set_p,setR_t_old <- set_t_old,setR_fcurrent <- set_fcurrent,setR_e <- set_e,setR_t <- set_t,setR_ftarget <- set_ftarget,setR_d <- set_d,setR_arrivedAtTarget <- set_arrivedAtTarget,setR_vtarget <- set_vtarget,setR_o <- set_o,setR_i <- set_i,setR_e_old <- set_e_old]]
							)\union(enteredSS,{terminate}) 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
							    const_movement_MovementControl_Kp,
							    const_movement_MovementControl_Ki,
							    const_movement_MovementControl_Kd,
							    const_movement_MovementControl_step,
							    const_movement_MovementControl_EPSILON,
							    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(share__choice(get_vcurrent?vcurrent -> share__choice(get_vtarget?vtarget -> true & (share__choice(set_ftarget!definitions_targetForces(vcurrent,vtarget,const_movement_MovementControl_TARGET_TOTAL_FORCE) -> SKIP)))));share__choice(get_ftarget?ftarget -> true&CALL__PIDInitialize(
									id__,
								    const_movement_MovementControl_Kp,
								    const_movement_MovementControl_Ki,
								    const_movement_MovementControl_Kd,
								    const_movement_MovementControl_step,
								    const_movement_MovementControl_EPSILON,
								    const_movement_MovementControl_TARGET_TOTAL_FORCE,
									ftarget,
									const_movement_MovementControl_Kp,
									const_movement_MovementControl_Ki,
									const_movement_MovementControl_Kd,
									const_movement_MovementControl_step
								)) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i0::enter,
							 	CheckForce::enter,
							 	Move::enter,
							 	s0::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|allowMovement__.NID_CheckForce.in,internal__.NID_s0,internal__.NID_i0,endEffectorPosition__.NID_Move.in,resetMovement__.NID_CheckForce.in|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i0::VS_O__(id__,
							 		   		    const_movement_MovementControl_Kp,
							 		   		    const_movement_MovementControl_Ki,
							 		   		    const_movement_MovementControl_Kd,
							 		   		    const_movement_MovementControl_step,
							 		   		    const_movement_MovementControl_EPSILON,
							 		   		    const_movement_MovementControl_TARGET_TOTAL_FORCE)
							 		   [| { share__, terminate } |] (
							 		   CheckForce::VS_O__(id__,
							 		   		    const_movement_MovementControl_Kp,
							 		   		    const_movement_MovementControl_Ki,
							 		   		    const_movement_MovementControl_Kd,
							 		   		    const_movement_MovementControl_step,
							 		   		    const_movement_MovementControl_EPSILON,
							 		   		    const_movement_MovementControl_TARGET_TOTAL_FORCE)
							 		   [| { share__, terminate } |] (
							 		   Move::VS_O__(id__,
							 		   		    const_movement_MovementControl_Kp,
							 		   		    const_movement_MovementControl_Ki,
							 		   		    const_movement_MovementControl_Kd,
							 		   		    const_movement_MovementControl_step,
							 		   		    const_movement_MovementControl_EPSILON,
							 		   		    const_movement_MovementControl_TARGET_TOTAL_FORCE)
							 		   [| { share__, terminate } |] (
							 		   s0::VS_O__(id__,
							 		   		    const_movement_MovementControl_Kp,
							 		   		    const_movement_MovementControl_Ki,
							 		   		    const_movement_MovementControl_Kd,
							 		   		    const_movement_MovementControl_step,
							 		   		    const_movement_MovementControl_EPSILON,
							 		   		    const_movement_MovementControl_TARGET_TOTAL_FORCE)
							 		   )
							 		   )
							 		   )
							 		 )
							 		 [[CheckForce::interrupt <- x__ | x__ <- {|interrupt,allowMovement__.NID_CheckForce.in,resetMovement__.NID_CheckForce.in|}]]
							 		 [[Move::interrupt <- x__ | x__ <- {|interrupt,endEffectorPosition__.NID_Move.in|}]]
							 		 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
							 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__,setR_vcurrent |} ]] 
							 		  [[set_arrivedAtTarget <- setL_arrivedAtTarget]]
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		 			,setL_arrivedAtTarget
							 		 			,setR_vcurrent
							 		 			|}) |]
							 		 ((i0::enter -> Transitions(id__,
							 		 		    const_movement_MovementControl_Kp,
							 		 		    const_movement_MovementControl_Ki,
							 		 		    const_movement_MovementControl_Kd,
							 		 		    const_movement_MovementControl_step,
							 		 		    const_movement_MovementControl_EPSILON,
							 		 		    const_movement_MovementControl_TARGET_TOTAL_FORCE))
							 		  [[ share__ <- x__ | x__ <- {| share__,setL_arrivedAtTarget |} ]]
							 		  [[set_vcurrent <- setR_vcurrent]]
							 		 )
							 		)[[setL_arrivedAtTarget <- set_arrivedAtTarget]]
							 		 [[setR_vcurrent <- set_vcurrent]]
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		allowMovement__.x____ <- allowMovement,
							 		movementOccurred__.x____ <- movementOccurred,
							 		stepMoved__.x____ <- stepMoved,
							 		movementInitiated__.x____ <- movementInitiated,
							 		movementWasAllowed__.x____ <- movementWasAllowed,
							 		forceWasAllowed__.x____ <- forceWasAllowed,
							 		forceInitiated__.x____ <- forceInitiated,
							 		resetMovement__.x____ <- resetMovement,
							 		forceApplied__.x____ <- forceApplied,
							 		movementStart__.x____ <- movementStart,
							 		movementEnd__.x____ <- movementEnd,
							 		endEffectorPosition__.x____ <- endEffectorPosition,
							 		forceEndEffector__.x____ <- forceEndEffector,
							 		forceStart__.x____ <- forceStart,
							 		forceEnd__.x____ <- forceEnd
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_vcurrent,setR_p,setR_t_old,setR_fcurrent,setR_e,setR_t,setR_ftarget,setR_d,setR_arrivedAtTarget,setR_vtarget,setR_o,setR_i,setR_e_old |} ]] 
							  [[set_vcurrent <- setL_vcurrent,set_p <- setL_p,set_t_old <- setL_t_old,set_fcurrent <- setL_fcurrent,set_e <- setL_e,set_t <- setL_t,set_ftarget <- setL_ftarget,set_d <- setL_d,set_arrivedAtTarget <- setL_arrivedAtTarget,set_vtarget <- setL_vtarget,set_o <- setL_o,set_i <- setL_i,set_e_old <- setL_e_old]]
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							 			,setL_vcurrent
							 			,setL_p
							 			,setL_t_old
							 			,setL_fcurrent
							 			,setL_e
							 			,setL_t
							 			,setL_ftarget
							 			,setL_d
							 			,setL_arrivedAtTarget
							 			,setL_vtarget
							 			,setL_o
							 			,setL_i
							 			,setL_e_old
							 			,setR_vcurrent
							 			 			,setR_p
							 			 			,setR_t_old
							 			 			,setR_fcurrent
							 			 			,setR_e
							 			 			,setR_t
							 			 			,setR_ftarget
							 			 			,setR_d
							 			 			,setR_arrivedAtTarget
							 			 			,setR_vtarget
							 			 			,setR_o
							 			 			,setR_i
							 			 			,setR_e_old
							 			|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__,setL_vcurrent,setL_p,setL_t_old,setL_fcurrent,setL_e,setL_t,setL_ftarget,setL_d,setL_arrivedAtTarget,setL_vtarget,setL_o,setL_i,setL_e_old |} ]]
							  [[set_vcurrent <- setR_vcurrent,set_p <- setR_p,set_t_old <- setR_t_old,set_fcurrent <- setR_fcurrent,set_e <- setR_e,set_t <- setR_t,set_ftarget <- setR_ftarget,set_d <- setR_d,set_arrivedAtTarget <- setR_arrivedAtTarget,set_vtarget <- setR_vtarget,set_o <- setR_o,set_i <- setR_i,set_e_old <- setR_e_old]]
							 )
							)[[setL_vcurrent <- set_vcurrent,setL_p <- set_p,setL_t_old <- set_t_old,setL_fcurrent <- set_fcurrent,setL_e <- set_e,setL_t <- set_t,setL_ftarget <- set_ftarget,setL_d <- set_d,setL_arrivedAtTarget <- set_arrivedAtTarget,setL_vtarget <- set_vtarget,setL_o <- set_o,setL_i <- set_i,setL_e_old <- set_e_old]]
							 [[setR_vcurrent <- set_vcurrent,setR_p <- set_p,setR_t_old <- set_t_old,setR_fcurrent <- set_fcurrent,setR_e <- set_e,setR_t <- set_t,setR_ftarget <- set_ftarget,setR_d <- set_d,setR_arrivedAtTarget <- set_arrivedAtTarget,setR_vtarget <- set_vtarget,setR_o <- set_o,setR_i <- set_i,setR_e_old <- set_e_old]]
							)\{terminate} 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
					
					Transitions(id__,
							    const_movement_MovementControl_Kp,
							    const_movement_MovementControl_Ki,
							    const_movement_MovementControl_Kd,
							    const_movement_MovementControl_step,
							    const_movement_MovementControl_EPSILON,
							    const_movement_MovementControl_TARGET_TOTAL_FORCE) = ((let
						Trans = share__choice(get_arrivedAtTarget?arrivedAtTarget -> (
							((share__ -> SKIP
							 [] dbisim((true)&(allowMovement__!NID_CheckForce.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(forceWasAllowed.out -> SKIP)) ; Move::enter -> SKIP)))
							 	 [] dbisim(((not (arrivedAtTarget)))&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; CheckForce::enter -> SKIP)))
							 	 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; CheckForce::enter -> SKIP))))
							 	 [] dbisim((true)&(endEffectorPosition__!NID_Move.in?vcurrent:{vcurrent|vcurrent <- vector_real_3, true} -> share__choice(set_vcurrent!vcurrent -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(movementOccurred.out -> SKIP)) ; s0::enter -> SKIP)))
							 	 [] dbisim((true)&(resetMovement__!NID_CheckForce.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; CheckForce::enter -> SKIP)))
							 ) ; Trans)
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
						)
						)
					within
						Trans
					)
					)
					
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				CALL__reorientGarment(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) 	= reorientGarmentCall -> SKIP
				CALL__grip(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) 	= gripCall -> SKIP
				CALL__checkCorrectHandling(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) 	= checkCorrectHandlingCall -> SKIP
				CALL__checkUserDressed(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) 	= checkUserDressedCall -> SKIP
				CALL__pushTowards(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE,
							param_target,
							param_force) 	= pushTowardsCall.param_target.param_force -> SKIP
				CALL__setEEForces(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE,
							param_v) 	= setEEForcesCall.param_v -> SKIP
				CALL__setEEPos(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE,
							param_v) 	= setEEPosCall.param_v -> SKIP
				CALL__checkMovement(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) 	= checkMovementCall -> SKIP
				CALL__stepTowards(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE,
							param_target,
							param_speed) 	= stepTowardsCall.param_target.param_speed -> SKIP
				CALL__releaseGrip(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) 	= releaseGripCall -> SKIP
				
				CALL__PIDInitialize(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) = (OP_PIDInitialize::O__(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step))
				[[
					OP_PIDInitialize::get_p <- get_p,
					OP_PIDInitialize::set_p <- set_p,
					OP_PIDInitialize::get_d <- get_d,
					OP_PIDInitialize::set_d <- set_d,
					OP_PIDInitialize::get_i <- get_i,
					OP_PIDInitialize::set_i <- set_i,
					OP_PIDInitialize::get_e <- get_e,
					OP_PIDInitialize::set_e <- set_e,
					OP_PIDInitialize::get_e_old <- get_e_old,
					OP_PIDInitialize::set_e_old <- set_e_old,
					OP_PIDInitialize::get_t <- get_t,
					OP_PIDInitialize::set_t <- set_t,
					OP_PIDInitialize::get_t_old <- get_t_old,
					OP_PIDInitialize::set_t_old <- set_t_old,
					OP_PIDInitialize::get_o <- get_o,
					OP_PIDInitialize::set_o <- set_o
				]]
				CALL__PIDUpdate(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step) = (OP_PIDUpdate::O__(id__,
							param_current,
						    const_PIDUpdate_Kp,
						    const_PIDUpdate_Ki,
						    const_PIDUpdate_Kd,
						    const_PIDUpdate_step))
				[[
					OP_PIDUpdate::get_p <- get_p,
					OP_PIDUpdate::set_p <- set_p,
					OP_PIDUpdate::get_d <- get_d,
					OP_PIDUpdate::set_d <- set_d,
					OP_PIDUpdate::get_i <- get_i,
					OP_PIDUpdate::set_i <- set_i,
					OP_PIDUpdate::get_e <- get_e,
					OP_PIDUpdate::set_e <- set_e,
					OP_PIDUpdate::get_e_old <- get_e_old,
					OP_PIDUpdate::set_e_old <- set_e_old,
					OP_PIDUpdate::get_t <- get_t,
					OP_PIDUpdate::set_t <- set_t,
					OP_PIDUpdate::get_t_old <- get_t_old,
					OP_PIDUpdate::set_t_old <- set_t_old,
					OP_PIDUpdate::get_o <- get_o,
					OP_PIDUpdate::set_o <- set_o
				]]
				-- END of Operation calls --
				
				-- STM processes
				STM(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__,
									    const_movement_MovementControl_Kp,
									    const_movement_MovementControl_Ki,
									    const_movement_MovementControl_Kd,
									    const_movement_MovementControl_step,
									    const_movement_MovementControl_EPSILON,
									    const_movement_MovementControl_TARGET_TOTAL_FORCE) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {|set_EXT_p,set_EXT_d,set_EXT_i,set_EXT_e,set_EXT_e_old,set_EXT_t,set_EXT_t_old,set_EXT_o|} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__,
							    const_movement_MovementControl_Kp,
							    const_movement_MovementControl_Ki,
							    const_movement_MovementControl_Kd,
							    const_movement_MovementControl_step,
							    const_movement_MovementControl_EPSILON,
							    const_movement_MovementControl_TARGET_TOTAL_FORCE))
				)\sharedVarHide
				
				STM_VS_O(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__,
									    const_movement_MovementControl_Kp,
									    const_movement_MovementControl_Ki,
									    const_movement_MovementControl_Kd,
									    const_movement_MovementControl_step,
									    const_movement_MovementControl_EPSILON,
									    const_movement_MovementControl_TARGET_TOTAL_FORCE) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {|set_EXT_p,set_EXT_d,set_EXT_i,set_EXT_e,set_EXT_e_old,set_EXT_t,set_EXT_t_old,set_EXT_o|} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__,
							    const_movement_MovementControl_Kp,
							    const_movement_MovementControl_Ki,
							    const_movement_MovementControl_Kd,
							    const_movement_MovementControl_step,
							    const_movement_MovementControl_EPSILON,
							    const_movement_MovementControl_TARGET_TOTAL_FORCE))
				)\sharedVarHide
				
				-- Transitions
				Transitions(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) = ((let
					Trans = share__choice(get_arrivedAtTarget?arrivedAtTarget -> (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; NotEngaged::enter -> SKIP))))
						 	 [] dbisim((true)&(movementStart__!NID_NotEngaged.in?vtarget:{vtarget|vtarget <- vector_real_3, true} -> share__choice(set_vtarget!vtarget -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_arrivedAtTarget!false -> SKIP)));true&(share__choice(movementInitiated.out -> SKIP)) ; FreeMovement::enter -> SKIP)))
						 	 [] dbisim((true)&(forceStart__!NID_NotEngaged.in?vtarget:{vtarget|vtarget <- vector_real_3, true} -> share__choice(set_vtarget!vtarget -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_arrivedAtTarget!false -> SKIP)));true&(share__choice(forceInitiated.out -> SKIP)) ; ForceApplication::enter -> SKIP)))
						 	 [] dbisim((arrivedAtTarget)&(internal__!NID_FreeMovement -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(movementEnd.out -> SKIP)) ; NotEngaged::enter -> SKIP)))
						 	 [] dbisim((arrivedAtTarget)&(internal__!NID_ForceApplication -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(forceEnd.out -> SKIP)) ; NotEngaged::enter -> SKIP)))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							NotEngaged::enter,
							FreeMovement::enter,
							ForceApplication::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,movementStart__.NID_NotEngaged.in,forceStart__.NID_NotEngaged.in,internal__.NID_FreeMovement,internal__.NID_ForceApplication|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__,
								   		    const_movement_MovementControl_Kp,
								   		    const_movement_MovementControl_Ki,
								   		    const_movement_MovementControl_Kd,
								   		    const_movement_MovementControl_step,
								   		    const_movement_MovementControl_EPSILON,
								   		    const_movement_MovementControl_TARGET_TOTAL_FORCE)
								   [| { share__, terminate } |] (
								   NotEngaged::D__(id__,
								   		    const_movement_MovementControl_Kp,
								   		    const_movement_MovementControl_Ki,
								   		    const_movement_MovementControl_Kd,
								   		    const_movement_MovementControl_step,
								   		    const_movement_MovementControl_EPSILON,
								   		    const_movement_MovementControl_TARGET_TOTAL_FORCE)
								   [| { share__, terminate } |] (
								   FreeMovement::D__(id__,
								   		    const_movement_MovementControl_Kp,
								   		    const_movement_MovementControl_Ki,
								   		    const_movement_MovementControl_Kd,
								   		    const_movement_MovementControl_step,
								   		    const_movement_MovementControl_EPSILON,
								   		    const_movement_MovementControl_TARGET_TOTAL_FORCE)
								   [| { share__, terminate } |] (
								   ForceApplication::D__(id__,
								   		    const_movement_MovementControl_Kp,
								   		    const_movement_MovementControl_Ki,
								   		    const_movement_MovementControl_Kd,
								   		    const_movement_MovementControl_step,
								   		    const_movement_MovementControl_EPSILON,
								   		    const_movement_MovementControl_TARGET_TOTAL_FORCE)
								   )
								   )
								   )
								 )
								 [[NotEngaged::interrupt <- x__ | x__ <- {|interrupt,movementStart__.NID_NotEngaged.in,forceStart__.NID_NotEngaged.in|}]]
								 [[FreeMovement::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_FreeMovement|}]]
								 [[ForceApplication::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ForceApplication|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__,setR_vtarget |} ]] 
								  [[set_arrivedAtTarget <- setL_arrivedAtTarget]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_arrivedAtTarget
								 			,setR_vtarget
								 			|}) |]
								 ((i0::enter -> Transitions(id__,
								 		    const_movement_MovementControl_Kp,
								 		    const_movement_MovementControl_Ki,
								 		    const_movement_MovementControl_Kd,
								 		    const_movement_MovementControl_step,
								 		    const_movement_MovementControl_EPSILON,
								 		    const_movement_MovementControl_TARGET_TOTAL_FORCE))
								  [[ share__ <- x__ | x__ <- {| share__,setL_arrivedAtTarget |} ]]
								  [[set_vtarget <- setR_vtarget]]
								 )
								)[[setL_arrivedAtTarget <- set_arrivedAtTarget]]
								 [[setR_vtarget <- set_vtarget]]
								)
							)
							 \ hideSet)
							[[
								allowMovement__.x____ <- allowMovement,
								movementOccurred__.x____ <- movementOccurred,
								stepMoved__.x____ <- stepMoved,
								movementInitiated__.x____ <- movementInitiated,
								movementWasAllowed__.x____ <- movementWasAllowed,
								forceWasAllowed__.x____ <- forceWasAllowed,
								forceInitiated__.x____ <- forceInitiated,
								resetMovement__.x____ <- resetMovement,
								forceApplied__.x____ <- forceApplied,
								movementStart__.x____ <- movementStart,
								movementEnd__.x____ <- movementEnd,
								endEffectorPosition__.x____ <- endEffectorPosition,
								forceEndEffector__.x____ <- forceEndEffector,
								forceStart__.x____ <- forceStart,
								forceEnd__.x____ <- forceEnd
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
					dbisim((MachineBody(id__,
							    const_movement_MovementControl_Kp,
							    const_movement_MovementControl_Ki,
							    const_movement_MovementControl_Kd,
							    const_movement_MovementControl_step,
							    const_movement_MovementControl_EPSILON,
							    const_movement_MovementControl_TARGET_TOTAL_FORCE)\ enteredSS)
					)
				
				IteratedBehaviour(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
					dbisim((MachineBody(id__,
							    const_movement_MovementControl_Kp,
							    const_movement_MovementControl_Ki,
							    const_movement_MovementControl_Kd,
							    const_movement_MovementControl_step,
							    const_movement_MovementControl_EPSILON,
							    const_movement_MovementControl_TARGET_TOTAL_FORCE)\ enteredSS)
					)
				
				Stateful(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
					((
						(Behaviour(id__,
								    const_movement_MovementControl_Kp,
								    const_movement_MovementControl_Ki,
								    const_movement_MovementControl_Kd,
								    const_movement_MovementControl_step,
								    const_movement_MovementControl_EPSILON,
								    const_movement_MovementControl_TARGET_TOTAL_FORCE) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
								    const_movement_MovementControl_Kp,
								    const_movement_MovementControl_Ki,
								    const_movement_MovementControl_Kd,
								    const_movement_MovementControl_step,
								    const_movement_MovementControl_EPSILON,
								    const_movement_MovementControl_TARGET_TOTAL_FORCE))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													dbisim(
														sbisim(
															Behaviour(id__,
																	    const_movement_MovementControl_Kp,
																	    const_movement_MovementControl_Ki,
																	    const_movement_MovementControl_Kd,
																	    const_movement_MovementControl_step,
																	    const_movement_MovementControl_EPSILON,
																	    const_movement_MovementControl_TARGET_TOTAL_FORCE)
															[| {|get_fcurrent,set_fcurrent,terminate|} |]
															Memory_fcurrent((0, 0, 0))
														)\{|get_fcurrent,set_fcurrent|}
													)
													[| {|get_ftarget,set_ftarget,terminate|} |]
													Memory_ftarget((0, 0, 0))
												)\{|get_ftarget,set_ftarget|}
											)
											[| {|get_vcurrent,set_vcurrent,terminate|} |]
											Memory_vcurrent((0, 0, 0))
										)\{|get_vcurrent,set_vcurrent|}
									)
									[| {|get_vtarget,set_vtarget,terminate|} |]
									Memory_vtarget((0, 0, 0))
								)\{|get_vtarget,set_vtarget|}
							)
							[| {|get_arrivedAtTarget,set_arrivedAtTarget,terminate|} |]
							Memory_arrivedAtTarget(false)
						)\{|get_arrivedAtTarget,set_arrivedAtTarget|}
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							NotEngaged::enter,
							FreeMovement::enter,
							ForceApplication::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,movementStart__.NID_NotEngaged.in,forceStart__.NID_NotEngaged.in,internal__.NID_FreeMovement,internal__.NID_ForceApplication|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__,
								   		    const_movement_MovementControl_Kp,
								   		    const_movement_MovementControl_Ki,
								   		    const_movement_MovementControl_Kd,
								   		    const_movement_MovementControl_step,
								   		    const_movement_MovementControl_EPSILON,
								   		    const_movement_MovementControl_TARGET_TOTAL_FORCE)
								   [| { share__, terminate } |] (
								   NotEngaged::VS_O__(id__,
								   		    const_movement_MovementControl_Kp,
								   		    const_movement_MovementControl_Ki,
								   		    const_movement_MovementControl_Kd,
								   		    const_movement_MovementControl_step,
								   		    const_movement_MovementControl_EPSILON,
								   		    const_movement_MovementControl_TARGET_TOTAL_FORCE)
								   [| { share__, terminate } |] (
								   FreeMovement::VS_O__(id__,
								   		    const_movement_MovementControl_Kp,
								   		    const_movement_MovementControl_Ki,
								   		    const_movement_MovementControl_Kd,
								   		    const_movement_MovementControl_step,
								   		    const_movement_MovementControl_EPSILON,
								   		    const_movement_MovementControl_TARGET_TOTAL_FORCE)
								   [| { share__, terminate } |] (
								   ForceApplication::VS_O__(id__,
								   		    const_movement_MovementControl_Kp,
								   		    const_movement_MovementControl_Ki,
								   		    const_movement_MovementControl_Kd,
								   		    const_movement_MovementControl_step,
								   		    const_movement_MovementControl_EPSILON,
								   		    const_movement_MovementControl_TARGET_TOTAL_FORCE)
								   )
								   )
								   )
								 )
								 [[NotEngaged::interrupt <- x__ | x__ <- {|interrupt,movementStart__.NID_NotEngaged.in,forceStart__.NID_NotEngaged.in|}]]
								 [[FreeMovement::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_FreeMovement|}]]
								 [[ForceApplication::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ForceApplication|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__,setR_vtarget |} ]] 
								  [[set_arrivedAtTarget <- setL_arrivedAtTarget]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_arrivedAtTarget
								 			,setR_vtarget
								 			|}) |]
								 ((i0::enter -> Transitions(id__,
								 		    const_movement_MovementControl_Kp,
								 		    const_movement_MovementControl_Ki,
								 		    const_movement_MovementControl_Kd,
								 		    const_movement_MovementControl_step,
								 		    const_movement_MovementControl_EPSILON,
								 		    const_movement_MovementControl_TARGET_TOTAL_FORCE))
								  [[ share__ <- x__ | x__ <- {| share__,setL_arrivedAtTarget |} ]]
								  [[set_vtarget <- setR_vtarget]]
								 )
								)[[setL_arrivedAtTarget <- set_arrivedAtTarget]]
								 [[setR_vtarget <- set_vtarget]]
								)
							)
							 \ hideSet)
							[[
								allowMovement__.x____ <- allowMovement,
								movementOccurred__.x____ <- movementOccurred,
								stepMoved__.x____ <- stepMoved,
								movementInitiated__.x____ <- movementInitiated,
								movementWasAllowed__.x____ <- movementWasAllowed,
								forceWasAllowed__.x____ <- forceWasAllowed,
								forceInitiated__.x____ <- forceInitiated,
								resetMovement__.x____ <- resetMovement,
								forceApplied__.x____ <- forceApplied,
								movementStart__.x____ <- movementStart,
								movementEnd__.x____ <- movementEnd,
								endEffectorPosition__.x____ <- endEffectorPosition,
								forceEndEffector__.x____ <- forceEndEffector,
								forceStart__.x____ <- forceStart,
								forceEnd__.x____ <- forceEnd
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
					dbisim((MachineBody_VS_O(id__,
							    const_movement_MovementControl_Kp,
							    const_movement_MovementControl_Ki,
							    const_movement_MovementControl_Kd,
							    const_movement_MovementControl_step,
							    const_movement_MovementControl_EPSILON,
							    const_movement_MovementControl_TARGET_TOTAL_FORCE))
					)
				
				IteratedBehaviour_VS_O(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
					dbisim((MachineBody_VS_O(id__,
							    const_movement_MovementControl_Kp,
							    const_movement_MovementControl_Ki,
							    const_movement_MovementControl_Kd,
							    const_movement_MovementControl_step,
							    const_movement_MovementControl_EPSILON,
							    const_movement_MovementControl_TARGET_TOTAL_FORCE))
					)
				
				Stateful_VS_O(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) = 
					dbisim((
						(Behaviour_VS_O(id__,
								    const_movement_MovementControl_Kp,
								    const_movement_MovementControl_Ki,
								    const_movement_MovementControl_Kd,
								    const_movement_MovementControl_step,
								    const_movement_MovementControl_EPSILON,
								    const_movement_MovementControl_TARGET_TOTAL_FORCE) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
								    const_movement_MovementControl_Kp,
								    const_movement_MovementControl_Ki,
								    const_movement_MovementControl_Kd,
								    const_movement_MovementControl_step,
								    const_movement_MovementControl_EPSILON,
								    const_movement_MovementControl_TARGET_TOTAL_FORCE))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful_VS_O(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													dbisim(
														sbisim(
															Behaviour_VS_O(id__,
																	    const_movement_MovementControl_Kp,
																	    const_movement_MovementControl_Ki,
																	    const_movement_MovementControl_Kd,
																	    const_movement_MovementControl_step,
																	    const_movement_MovementControl_EPSILON,
																	    const_movement_MovementControl_TARGET_TOTAL_FORCE)
															[| {|get_fcurrent,set_fcurrent,terminate|} |]
															Memory_fcurrent((0, 0, 0))
														)\{|get_fcurrent,set_fcurrent|}
													)
													[| {|get_ftarget,set_ftarget,terminate|} |]
													Memory_ftarget((0, 0, 0))
												)\{|get_ftarget,set_ftarget|}
											)
											[| {|get_vcurrent,set_vcurrent,terminate|} |]
											Memory_vcurrent((0, 0, 0))
										)\{|get_vcurrent,set_vcurrent|}
									)
									[| {|get_vtarget,set_vtarget,terminate|} |]
									Memory_vtarget((0, 0, 0))
								)\{|get_vtarget,set_vtarget|}
							)
							[| {|get_arrivedAtTarget,set_arrivedAtTarget,terminate|} |]
							Memory_arrivedAtTarget(false)
						)\{|get_arrivedAtTarget,set_arrivedAtTarget|}
					)
					)
				
				-- END
				
				-- Memory
				-- Memory variables
				Memory_arrivedAtTarget(arrivedAtTarget) =
					get_arrivedAtTarget!arrivedAtTarget -> Memory_arrivedAtTarget(arrivedAtTarget)
					[]
					set_arrivedAtTarget?x__ -> Memory_arrivedAtTarget(x__)
					[]
					terminate -> SKIP
				Memory_vtarget(vtarget) =
					get_vtarget!vtarget -> Memory_vtarget(vtarget)
					[]
					set_vtarget?x__ -> Memory_vtarget(x__)
					[]
					terminate -> SKIP
				Memory_vcurrent(vcurrent) =
					get_vcurrent!vcurrent -> Memory_vcurrent(vcurrent)
					[]
					set_vcurrent?x__ -> Memory_vcurrent(x__)
					[]
					terminate -> SKIP
				Memory_ftarget(ftarget) =
					get_ftarget!ftarget -> Memory_ftarget(ftarget)
					[]
					set_ftarget?x__ -> Memory_ftarget(x__)
					[]
					terminate -> SKIP
				Memory_fcurrent(fcurrent) =
					get_fcurrent!fcurrent -> Memory_fcurrent(fcurrent)
					[]
					set_fcurrent?x__ -> Memory_fcurrent(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) = Memory_arrivedAtTarget(false)
				[| { terminate } |] (
				Memory_vtarget((0, 0, 0))
				[| { terminate } |] (
				Memory_vcurrent((0, 0, 0))
				[| { terminate } |] (
				Memory_ftarget((0, 0, 0))
				[| { terminate } |] (
				Memory_fcurrent((0, 0, 0))
				)
				)
				)
				)
				
				getsetLocalChannels = {|get_arrivedAtTarget,set_arrivedAtTarget,get_vtarget,set_vtarget,get_vcurrent,set_vcurrent,get_ftarget,set_ftarget,get_fcurrent,set_fcurrent|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) = STM_VS_O(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE)
				
				D__(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) = STM(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) \ internal_events
				O__(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) = sbisim(diamond(D__(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE)))
				VS__(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) = FVS__(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE)
				VS_O__(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) = sbisim(diamond(FVS__(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE)))
				HEXT__(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) = O__(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) [|shared_variable_events|] SKIP
				HUP__(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) = O__(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) [|{share__}|] SKIP
				
				-- Shared memory
				-- Shared memory variables
				Memory_p(p) =
					get_p!p -> Memory_p(p)
					[]
					set_p?x__ -> Memory_p(x__)
					[]
					set_EXT_p?x__ -> Memory_p(x__)
					[]
					terminate -> SKIP
				Memory_d(d) =
					get_d!d -> Memory_d(d)
					[]
					set_d?x__ -> Memory_d(x__)
					[]
					set_EXT_d?x__ -> Memory_d(x__)
					[]
					terminate -> SKIP
				Memory_i(i) =
					get_i!i -> Memory_i(i)
					[]
					set_i?x__ -> Memory_i(x__)
					[]
					set_EXT_i?x__ -> Memory_i(x__)
					[]
					terminate -> SKIP
				Memory_e(e) =
					get_e!e -> Memory_e(e)
					[]
					set_e?x__ -> Memory_e(x__)
					[]
					set_EXT_e?x__ -> Memory_e(x__)
					[]
					terminate -> SKIP
				Memory_e_old(e_old) =
					get_e_old!e_old -> Memory_e_old(e_old)
					[]
					set_e_old?x__ -> Memory_e_old(x__)
					[]
					set_EXT_e_old?x__ -> Memory_e_old(x__)
					[]
					terminate -> SKIP
				Memory_t(t) =
					get_t!t -> Memory_t(t)
					[]
					set_t?x__ -> Memory_t(x__)
					[]
					set_EXT_t?x__ -> Memory_t(x__)
					[]
					terminate -> SKIP
				Memory_t_old(t_old) =
					get_t_old!t_old -> Memory_t_old(t_old)
					[]
					set_t_old?x__ -> Memory_t_old(x__)
					[]
					set_EXT_t_old?x__ -> Memory_t_old(x__)
					[]
					terminate -> SKIP
				Memory_o(o) =
					get_o!o -> Memory_o(o)
					[]
					set_o?x__ -> Memory_o(x__)
					[]
					set_EXT_o?x__ -> Memory_o(x__)
					[]
					terminate -> SKIP
				
				-- sharedVarMemory process
				sharedVarMemory(id__,
						    const_movement_MovementControl_Kp,
						    const_movement_MovementControl_Ki,
						    const_movement_MovementControl_Kd,
						    const_movement_MovementControl_step,
						    const_movement_MovementControl_EPSILON,
						    const_movement_MovementControl_TARGET_TOTAL_FORCE) = Memory_p((0, 0, 0))
				[| { terminate } |] (
				Memory_d((0, 0, 0))
				[| { terminate } |] (
				Memory_i((0, 0, 0))
				[| { terminate } |] (
				Memory_e((0, 0, 0))
				[| { terminate } |] (
				Memory_e_old((0, 0, 0))
				[| { terminate } |] (
				Memory_t((0, 0, 0))
				[| { terminate } |] (
				Memory_t_old((0, 0, 0))
				[| { terminate } |] (
				Memory_o((0, 0, 0))
				)
				)
				)
				)
				)
				)
				)
				
				sharedVarSync = {|get_p,set_p,set_EXT_p,get_d,set_d,set_EXT_d,get_i,set_i,set_EXT_i,get_e,set_e,set_EXT_e,get_e_old,set_e_old,set_EXT_e_old,get_t,set_t,set_EXT_t,get_t_old,set_t_old,set_EXT_t_old,get_o,set_o,set_EXT_o|}
				
				sharedVarHide = {|get_p,get_d,get_i,get_e,get_e_old,get_t,get_t_old,get_o|}
			endmodule
			module stm_stop
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_Allowing|
				              NID_Awaiting
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_emergencyStopped, set_emergencyStopped, setL_emergencyStopped, setR_emergencyStopped: core_boolean
				channel get_environmentallyStopped, set_environmentallyStopped, setL_environmentallyStopped, setR_environmentallyStopped: core_boolean
				channel get_collisionStopped, set_collisionStopped, setL_collisionStopped, setR_collisionStopped: core_boolean
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel allowMovement__: NIDS.InOut
				channel allowMovement: InOut
				channel environmentalStop__: NIDS.InOut
				channel environmentalStop: InOut
				channel environmentalResume__: NIDS.InOut
				channel environmentalResume: InOut
				channel movementOccurred__: NIDS.InOut
				channel movementOccurred: InOut
				channel allowedMovement__: NIDS.InOut
				channel allowedMovement: InOut
				channel noticedMovementOccurred__: NIDS.InOut
				channel noticedMovementOccurred: InOut
				channel resetMovement__: NIDS.InOut
				channel resetMovement: InOut
				channel emergencyStop__: NIDS.InOut
				channel emergencyStop: InOut
				channel resumeDressing__: NIDS.InOut
				channel resumeDressing: InOut
				channel collisionStop__: NIDS.InOut
				channel collisionStop: InOut
				channel collisionResume__: NIDS.InOut
				channel collisionResume: InOut
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				Allowing::enter,
				Awaiting::enter
				|}
				
				enteredSS = 	{|
				Allowing::entered,
				Awaiting::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	allowMovement,
					environmentalStop,
					environmentalResume,
					movementOccurred,
					allowedMovement,
					noticedMovementOccurred,
					resetMovement,
					emergencyStop,
					resumeDressing,
					collisionStop,
					collisionResume
					|}
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: Allowing
				module Allowing
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: Awaiting
				module Awaiting
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = share__choice(get_emergencyStopped?emergencyStopped -> get_collisionStopped?collisionStopped -> get_environmentallyStopped?environmentallyStopped -> (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Allowing::enter -> SKIP))))
						 	 [] dbisim(((not (emergencyStopped)))&(emergencyStop__!NID_Allowing.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_emergencyStopped!true -> SKIP))) ; Allowing::enter -> SKIP)))
						 	 [] dbisim(((not (environmentallyStopped)))&(environmentalStop__!NID_Allowing.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(resetMovement.out -> SKIP));share__choice(true & (share__choice(set_environmentallyStopped!true -> SKIP))) ; Allowing::enter -> SKIP)))
						 	 [] dbisim((emergencyStopped)&(resumeDressing__!NID_Allowing.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(resetMovement.out -> SKIP));share__choice(true & (share__choice(set_emergencyStopped!false -> SKIP))) ; Allowing::enter -> SKIP)))
						 	 [] dbisim((environmentallyStopped)&(environmentalResume__!NID_Allowing.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(resetMovement.out -> SKIP));share__choice(true & (share__choice(set_environmentallyStopped!false -> SKIP))) ; Allowing::enter -> SKIP)))
						 	 [] dbisim(((not (collisionStopped)))&(collisionStop__!NID_Allowing.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_collisionStopped!true -> SKIP))) ; Allowing::enter -> SKIP)))
						 	 [] dbisim(((((not (emergencyStopped)) and (not (environmentallyStopped))) and (not (collisionStopped))))&(internal__!NID_Allowing -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(allowMovement.out -> SKIP)) ; Awaiting::enter -> SKIP)))
						 	 [] dbisim((true)&(movementOccurred__!NID_Awaiting.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Allowing::enter -> SKIP)))
						 	 [] dbisim((environmentallyStopped)&(environmentalResume__!NID_Awaiting.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_environmentallyStopped!false -> SKIP))) ; Awaiting::enter -> SKIP)))
						 	 [] dbisim(((not (emergencyStopped)))&(emergencyStop__!NID_Awaiting.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_emergencyStopped!true -> SKIP))) ; Awaiting::enter -> SKIP)))
						 	 [] dbisim(((not (environmentallyStopped)))&(environmentalStop__!NID_Awaiting.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_environmentallyStopped!true -> SKIP))) ; Awaiting::enter -> SKIP)))
						 	 [] dbisim((emergencyStopped)&(resumeDressing__!NID_Awaiting.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_emergencyStopped!false -> SKIP))) ; Awaiting::enter -> SKIP)))
						 	 [] dbisim((emergencyStopped)&(resumeDressing__!NID_Awaiting.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_emergencyStopped!false -> SKIP))) ; Awaiting::enter -> SKIP)))
						 	 [] dbisim((collisionStopped)&(collisionResume__!NID_Allowing.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(resetMovement.out -> SKIP));share__choice(true & (share__choice(set_collisionStopped!false -> SKIP))) ; Allowing::enter -> SKIP)))
						 	 [] dbisim(((not (collisionStopped)))&(collisionStop__!NID_Awaiting.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_collisionStopped!true -> SKIP))) ; Awaiting::enter -> SKIP)))
						 	 [] dbisim((collisionStopped)&(collisionResume__!NID_Awaiting.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_collisionStopped!false -> SKIP))) ; Awaiting::enter -> SKIP)))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							Allowing::enter,
							Awaiting::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,emergencyStop__.NID_Allowing.in,environmentalStop__.NID_Allowing.in,resumeDressing__.NID_Allowing.in,environmentalResume__.NID_Allowing.in,collisionStop__.NID_Allowing.in,internal__.NID_Allowing,movementOccurred__.NID_Awaiting.in,environmentalResume__.NID_Awaiting.in,emergencyStop__.NID_Awaiting.in,environmentalStop__.NID_Awaiting.in,resumeDressing__.NID_Awaiting.in,resumeDressing__.NID_Awaiting.in,collisionResume__.NID_Allowing.in,collisionStop__.NID_Awaiting.in,collisionResume__.NID_Awaiting.in|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__)
								   [| { share__, terminate } |] (
								   Allowing::D__(id__)
								   [| { share__, terminate } |] (
								   Awaiting::D__(id__)
								   )
								   )
								 )
								 [[Allowing::interrupt <- x__ | x__ <- {|interrupt,emergencyStop__.NID_Allowing.in,environmentalStop__.NID_Allowing.in,resumeDressing__.NID_Allowing.in,environmentalResume__.NID_Allowing.in,collisionStop__.NID_Allowing.in,internal__.NID_Allowing,collisionResume__.NID_Allowing.in|}]]
								 [[Awaiting::interrupt <- x__ | x__ <- {|interrupt,movementOccurred__.NID_Awaiting.in,environmentalResume__.NID_Awaiting.in,emergencyStop__.NID_Awaiting.in,environmentalStop__.NID_Awaiting.in,resumeDressing__.NID_Awaiting.in,resumeDressing__.NID_Awaiting.in,collisionStop__.NID_Awaiting.in,collisionResume__.NID_Awaiting.in|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_emergencyStopped <- setL_emergencyStopped,set_collisionStopped <- setL_collisionStopped,set_environmentallyStopped <- setL_environmentallyStopped]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_emergencyStopped
								 			,setL_collisionStopped
								 			,setL_environmentallyStopped
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_emergencyStopped,setL_collisionStopped,setL_environmentallyStopped |} ]]
								 )
								)[[setL_emergencyStopped <- set_emergencyStopped,setL_collisionStopped <- set_collisionStopped,setL_environmentallyStopped <- set_environmentallyStopped]]
								)
							)
							 \ hideSet)
							[[
								allowMovement__.x____ <- allowMovement,
								environmentalStop__.x____ <- environmentalStop,
								environmentalResume__.x____ <- environmentalResume,
								movementOccurred__.x____ <- movementOccurred,
								allowedMovement__.x____ <- allowedMovement,
								noticedMovementOccurred__.x____ <- noticedMovementOccurred,
								resetMovement__.x____ <- resetMovement,
								emergencyStop__.x____ <- emergencyStop,
								resumeDressing__.x____ <- resumeDressing,
								collisionStop__.x____ <- collisionStop,
								collisionResume__.x____ <- collisionResume
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				IteratedBehaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				Stateful(id__) = 
					((
						(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful(id__) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											Behaviour(id__)
											[| {|get_collisionStopped,set_collisionStopped,terminate|} |]
											Memory_collisionStopped(false)
										)\{|get_collisionStopped,set_collisionStopped|}
									)
									[| {|get_environmentallyStopped,set_environmentallyStopped,terminate|} |]
									Memory_environmentallyStopped(false)
								)\{|get_environmentallyStopped,set_environmentallyStopped|}
							)
							[| {|get_emergencyStopped,set_emergencyStopped,terminate|} |]
							Memory_emergencyStopped(false)
						)\{|get_emergencyStopped,set_emergencyStopped|}
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							Allowing::enter,
							Awaiting::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,emergencyStop__.NID_Allowing.in,environmentalStop__.NID_Allowing.in,resumeDressing__.NID_Allowing.in,environmentalResume__.NID_Allowing.in,collisionStop__.NID_Allowing.in,internal__.NID_Allowing,movementOccurred__.NID_Awaiting.in,environmentalResume__.NID_Awaiting.in,emergencyStop__.NID_Awaiting.in,environmentalStop__.NID_Awaiting.in,resumeDressing__.NID_Awaiting.in,resumeDressing__.NID_Awaiting.in,collisionResume__.NID_Allowing.in,collisionStop__.NID_Awaiting.in,collisionResume__.NID_Awaiting.in|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__)
								   [| { share__, terminate } |] (
								   Allowing::VS_O__(id__)
								   [| { share__, terminate } |] (
								   Awaiting::VS_O__(id__)
								   )
								   )
								 )
								 [[Allowing::interrupt <- x__ | x__ <- {|interrupt,emergencyStop__.NID_Allowing.in,environmentalStop__.NID_Allowing.in,resumeDressing__.NID_Allowing.in,environmentalResume__.NID_Allowing.in,collisionStop__.NID_Allowing.in,internal__.NID_Allowing,collisionResume__.NID_Allowing.in|}]]
								 [[Awaiting::interrupt <- x__ | x__ <- {|interrupt,movementOccurred__.NID_Awaiting.in,environmentalResume__.NID_Awaiting.in,emergencyStop__.NID_Awaiting.in,environmentalStop__.NID_Awaiting.in,resumeDressing__.NID_Awaiting.in,resumeDressing__.NID_Awaiting.in,collisionStop__.NID_Awaiting.in,collisionResume__.NID_Awaiting.in|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_emergencyStopped <- setL_emergencyStopped,set_collisionStopped <- setL_collisionStopped,set_environmentallyStopped <- setL_environmentallyStopped]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_emergencyStopped
								 			,setL_collisionStopped
								 			,setL_environmentallyStopped
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_emergencyStopped,setL_collisionStopped,setL_environmentallyStopped |} ]]
								 )
								)[[setL_emergencyStopped <- set_emergencyStopped,setL_collisionStopped <- set_collisionStopped,setL_environmentallyStopped <- set_environmentallyStopped]]
								)
							)
							 \ hideSet)
							[[
								allowMovement__.x____ <- allowMovement,
								environmentalStop__.x____ <- environmentalStop,
								environmentalResume__.x____ <- environmentalResume,
								movementOccurred__.x____ <- movementOccurred,
								allowedMovement__.x____ <- allowedMovement,
								noticedMovementOccurred__.x____ <- noticedMovementOccurred,
								resetMovement__.x____ <- resetMovement,
								emergencyStop__.x____ <- emergencyStop,
								resumeDressing__.x____ <- resumeDressing,
								collisionStop__.x____ <- collisionStop,
								collisionResume__.x____ <- collisionResume
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				IteratedBehaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				Stateful_VS_O(id__) = 
					dbisim((
						(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful_VS_O(id__) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											Behaviour_VS_O(id__)
											[| {|get_collisionStopped,set_collisionStopped,terminate|} |]
											Memory_collisionStopped(false)
										)\{|get_collisionStopped,set_collisionStopped|}
									)
									[| {|get_environmentallyStopped,set_environmentallyStopped,terminate|} |]
									Memory_environmentallyStopped(false)
								)\{|get_environmentallyStopped,set_environmentallyStopped|}
							)
							[| {|get_emergencyStopped,set_emergencyStopped,terminate|} |]
							Memory_emergencyStopped(false)
						)\{|get_emergencyStopped,set_emergencyStopped|}
					)
					)
				
				-- END
				
				-- Memory
				-- Memory variables
				Memory_emergencyStopped(emergencyStopped) =
					get_emergencyStopped!emergencyStopped -> Memory_emergencyStopped(emergencyStopped)
					[]
					set_emergencyStopped?x__ -> Memory_emergencyStopped(x__)
					[]
					terminate -> SKIP
				Memory_environmentallyStopped(environmentallyStopped) =
					get_environmentallyStopped!environmentallyStopped -> Memory_environmentallyStopped(environmentallyStopped)
					[]
					set_environmentallyStopped?x__ -> Memory_environmentallyStopped(x__)
					[]
					terminate -> SKIP
				Memory_collisionStopped(collisionStopped) =
					get_collisionStopped!collisionStopped -> Memory_collisionStopped(collisionStopped)
					[]
					set_collisionStopped?x__ -> Memory_collisionStopped(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__) = Memory_emergencyStopped(false)
				[| { terminate } |] (
				Memory_environmentallyStopped(false)
				[| { terminate } |] (
				Memory_collisionStopped(false)
				)
				)
				
				getsetLocalChannels = {|get_emergencyStopped,set_emergencyStopped,get_environmentallyStopped,set_environmentallyStopped,get_collisionStopped,set_collisionStopped|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__)
				
				D__(id__) = STM(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = sbisim(diamond(FVS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				HUP__(id__) = O__(id__) [|{share__}|] SKIP
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
			endmodule
			module stm_environment
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_SensingHazard|
				              NID_OtherAgent|
				              NID_BackgroundNoise
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_otherAgent, set_otherAgent, setL_otherAgent, setR_otherAgent: core_boolean
				channel get_level, set_level, setL_level, setR_level: definitions_NoiseLevel
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel environmentalStop__: NIDS.InOut
				channel environmentalStop: InOut
				channel environmentalResume__: NIDS.InOut
				channel environmentalResume: InOut
				channel backgroundNoiseLevel__: NIDS.InOut.definitions_NoiseLevel
				channel backgroundNoiseLevel: InOut.definitions_NoiseLevel
				channel otherAgentDetected__: NIDS.InOut.core_boolean
				channel otherAgentDetected: InOut.core_boolean
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				SensingHazard::enter,
				OtherAgent::enter,
				BackgroundNoise::enter
				|}
				
				enteredSS = 	{|
				SensingHazard::entered,
				OtherAgent::entered,
				BackgroundNoise::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	environmentalStop,
					environmentalResume,
					backgroundNoiseLevel,
					otherAgentDetected
					|}
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: SensingHazard
				module SensingHazard
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: OtherAgent
				module OtherAgent
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: BackgroundNoise
				module BackgroundNoise
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = share__choice(get_level?level -> get_otherAgent?otherAgent -> (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; SensingHazard::enter -> SKIP))))
						 	 [] dbisim((otherAgentDetected__!NID_SensingHazard.in?otherAgent:{otherAgent|otherAgent <- core_boolean, (not (otherAgent))} -> share__choice(set_otherAgent!otherAgent -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(environmentalResume.out -> SKIP)) ; OtherAgent::enter -> SKIP)))
						 	 [] dbisim((otherAgentDetected__!NID_OtherAgent.in?otherAgent:{otherAgent|otherAgent <- core_boolean, otherAgent} -> share__choice(set_otherAgent!otherAgent -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(environmentalResume.out -> SKIP)) ; SensingHazard::enter -> SKIP)))
						 	 [] dbisim(((level==definitions_NoiseLevel_High))&(internal__!NID_SensingHazard -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(environmentalStop.out -> SKIP)) ; BackgroundNoise::enter -> SKIP)))
						 	 [] dbisim(((level!=definitions_NoiseLevel_High))&(internal__!NID_BackgroundNoise -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(environmentalResume.out -> SKIP)) ; SensingHazard::enter -> SKIP)))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							SensingHazard::enter,
							OtherAgent::enter,
							BackgroundNoise::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,otherAgentDetected__.NID_SensingHazard.in,otherAgentDetected__.NID_OtherAgent.in,internal__.NID_SensingHazard,internal__.NID_BackgroundNoise|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__)
								   [| { share__, terminate } |] (
								   SensingHazard::D__(id__)
								   [| { share__, terminate } |] (
								   OtherAgent::D__(id__)
								   [| { share__, terminate } |] (
								   BackgroundNoise::D__(id__)
								   )
								   )
								   )
								 )
								 [[SensingHazard::interrupt <- x__ | x__ <- {|interrupt,otherAgentDetected__.NID_SensingHazard.in,internal__.NID_SensingHazard|}]]
								 [[OtherAgent::interrupt <- x__ | x__ <- {|interrupt,otherAgentDetected__.NID_OtherAgent.in|}]]
								 [[BackgroundNoise::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_BackgroundNoise|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__,setR_otherAgent |} ]] 
								  [[set_level <- setL_level,set_otherAgent <- setL_otherAgent]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_level
								 			,setL_otherAgent
								 			,setR_otherAgent
								 			|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_level,setL_otherAgent |} ]]
								  [[set_otherAgent <- setR_otherAgent]]
								 )
								)[[setL_level <- set_level,setL_otherAgent <- set_otherAgent]]
								 [[setR_otherAgent <- set_otherAgent]]
								)
							)
							 \ hideSet)
							[[
								environmentalStop__.x____ <- environmentalStop,
								environmentalResume__.x____ <- environmentalResume,
								backgroundNoiseLevel__.x____ <- backgroundNoiseLevel,
								otherAgentDetected__.x____ <- otherAgentDetected
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				IteratedBehaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				Stateful(id__) = 
					((
						(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful(id__) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									Behaviour(id__)
									[| {|get_level,set_level,terminate|} |]
									Memory_level(definitions_NoiseLevel_High)
								)\{|get_level,set_level|}
							)
							[| {|get_otherAgent,set_otherAgent,terminate|} |]
							Memory_otherAgent(true)
						)\{|get_otherAgent,set_otherAgent|}
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							SensingHazard::enter,
							OtherAgent::enter,
							BackgroundNoise::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,otherAgentDetected__.NID_SensingHazard.in,otherAgentDetected__.NID_OtherAgent.in,internal__.NID_SensingHazard,internal__.NID_BackgroundNoise|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__)
								   [| { share__, terminate } |] (
								   SensingHazard::VS_O__(id__)
								   [| { share__, terminate } |] (
								   OtherAgent::VS_O__(id__)
								   [| { share__, terminate } |] (
								   BackgroundNoise::VS_O__(id__)
								   )
								   )
								   )
								 )
								 [[SensingHazard::interrupt <- x__ | x__ <- {|interrupt,otherAgentDetected__.NID_SensingHazard.in,internal__.NID_SensingHazard|}]]
								 [[OtherAgent::interrupt <- x__ | x__ <- {|interrupt,otherAgentDetected__.NID_OtherAgent.in|}]]
								 [[BackgroundNoise::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_BackgroundNoise|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__,setR_otherAgent |} ]] 
								  [[set_level <- setL_level,set_otherAgent <- setL_otherAgent]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_level
								 			,setL_otherAgent
								 			,setR_otherAgent
								 			|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_level,setL_otherAgent |} ]]
								  [[set_otherAgent <- setR_otherAgent]]
								 )
								)[[setL_level <- set_level,setL_otherAgent <- set_otherAgent]]
								 [[setR_otherAgent <- set_otherAgent]]
								)
							)
							 \ hideSet)
							[[
								environmentalStop__.x____ <- environmentalStop,
								environmentalResume__.x____ <- environmentalResume,
								backgroundNoiseLevel__.x____ <- backgroundNoiseLevel,
								otherAgentDetected__.x____ <- otherAgentDetected
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				IteratedBehaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				Stateful_VS_O(id__) = 
					dbisim((
						(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful_VS_O(id__) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									Behaviour_VS_O(id__)
									[| {|get_level,set_level,terminate|} |]
									Memory_level(definitions_NoiseLevel_High)
								)\{|get_level,set_level|}
							)
							[| {|get_otherAgent,set_otherAgent,terminate|} |]
							Memory_otherAgent(true)
						)\{|get_otherAgent,set_otherAgent|}
					)
					)
				
				-- END
				
				-- Memory
				-- Memory variables
				Memory_otherAgent(otherAgent) =
					get_otherAgent!otherAgent -> Memory_otherAgent(otherAgent)
					[]
					set_otherAgent?x__ -> Memory_otherAgent(x__)
					[]
					terminate -> SKIP
				Memory_level(level) =
					get_level!level -> Memory_level(level)
					[]
					set_level?x__ -> Memory_level(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__) = Memory_otherAgent(true)
				[| { terminate } |] (
				Memory_level(definitions_NoiseLevel_High)
				)
				
				getsetLocalChannels = {|get_otherAgent,set_otherAgent,get_level,set_level|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__)
				
				D__(id__) = STM(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = sbisim(diamond(FVS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				HUP__(id__) = O__(id__) [|{share__}|] SKIP
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
			endmodule
			
				-- undefined operations
				CALL__reorientGarment(id__) 	= reorientGarmentCall -> SKIP
				CALL__pushTowards(id__,
						    param_target,
						    param_force) 	= pushTowardsCall.param_target.param_force -> SKIP
				CALL__checkFault(id__) 	= checkFaultCall -> SKIP
				CALL__setEEForces(id__,
						    param_v) 	= setEEForcesCall.param_v -> SKIP
				CALL__getEEPos(id__) 	= getEEPosCall -> SKIP
				CALL__detectGarment(id__) 	= detectGarmentCall -> SKIP
				CALL__grip(id__) 	= gripCall -> SKIP
				CALL__checkCorrectHandling(id__) 	= checkCorrectHandlingCall -> SKIP
				CALL__checkUserDressed(id__) 	= checkUserDressedCall -> SKIP
				CALL__setEEPos(id__,
						    param_v) 	= setEEPosCall.param_v -> SKIP
				CALL__checkMovement(id__) 	= checkMovementCall -> SKIP
				CALL__stepTowards(id__,
						    param_target,
						    param_speed) 	= stepTowardsCall.param_target.param_speed -> SKIP
				CALL__detectSecondArm(id__) 	= detectSecondArmCall -> SKIP
				CALL__releaseGrip(id__) 	= releaseGripCall -> SKIP
				CALL__detectUserPose(id__) 	= detectUserPoseCall -> SKIP
				
				-- declaring controller memory
				Memory(id__, p, d, i, e, e_old, t, t_old, o, Kp, Ki, Kd, step) = (
					set_p?x__ -> stm_movement::set_EXT_p!x__ -> 
					Memory(id__,x__,d,i,e,e_old,t,t_old,o,Kp,Ki,Kd,step)
					  []
					set_d?x__ -> stm_movement::set_EXT_d!x__ -> 
					Memory(id__,p,x__,i,e,e_old,t,t_old,o,Kp,Ki,Kd,step)
					  []
					set_i?x__ -> stm_movement::set_EXT_i!x__ -> 
					Memory(id__,p,d,x__,e,e_old,t,t_old,o,Kp,Ki,Kd,step)
					  []
					set_e?x__ -> stm_movement::set_EXT_e!x__ -> 
					Memory(id__,p,d,i,x__,e_old,t,t_old,o,Kp,Ki,Kd,step)
					  []
					set_e_old?x__ -> stm_movement::set_EXT_e_old!x__ -> 
					Memory(id__,p,d,i,e,x__,t,t_old,o,Kp,Ki,Kd,step)
					  []
					set_t?x__ -> stm_movement::set_EXT_t!x__ -> 
					Memory(id__,p,d,i,e,e_old,x__,t_old,o,Kp,Ki,Kd,step)
					  []
					set_t_old?x__ -> stm_movement::set_EXT_t_old!x__ -> 
					Memory(id__,p,d,i,e,e_old,t,x__,o,Kp,Ki,Kd,step)
					  []
					set_o?x__ -> stm_movement::set_EXT_o!x__ -> 
					Memory(id__,p,d,i,e,e_old,t,t_old,x__,Kp,Ki,Kd,step)
				)
				
				D__(id__,
						    const_radcontrol_CDressingControl_Kp,
						    const_radcontrol_CDressingControl_Ki,
						    const_radcontrol_CDressingControl_Kd,
						    const_radcontrol_CDressingControl_step,
						    const_radcontrol_CDressingControl_stm_movement_EPSILON,
						    const_radcontrol_CDressingControl_stm_movement_TARGET_TOTAL_FORCE) = 	((
						(
							stm_dressing::D__(id__)[[
								stm_dressing::terminate <- terminate,
								stm_dressing::snaggingDetected <- snaggingDetected,
								stm_dressing::invalidTrajectory <- invalidTrajectory,
								stm_dressing::invalidPoseDetected <- invalidPoseDetected,
								stm_dressing::userInterrupt <- userInterrupt,
								stm_dressing::poseDetected <- poseDetected,
								stm_dressing::dressingRequest <- dressingRequest,
								stm_dressing::garmentDetected <- garmentDetected,
								stm_dressing::dressedJoint <- dressedJoint,
								stm_dressing::movementEnd.in <- stm_movement::movementEnd.out,
								stm_dressing::movementEnd.out <- stm_movement::movementEnd.in,
								stm_dressing::armConfig <- armConfig,
								stm_dressing::gripCorrect <- gripCorrect,
								stm_dressing::secondHandDetected <- secondHandDetected,
								stm_dressing::userDressed <- userDressed,
								stm_dressing::correctedMovement <- correctedMovement,
								stm_dressing::gripperEngaged <- gripperEngaged,
								stm_dressing::forceEnd.in <- stm_movement::forceEnd.out,
								stm_dressing::forceEnd.out <- stm_movement::forceEnd.in,
								stm_dressing::userMoved <- userMoved,
								stm_dressing::handlingCorrect <- handlingCorrect,
								stm_dressing::garmentAtHand <- garmentAtHand,
								stm_dressing::arrivedAtGarment <- arrivedAtGarment,
								stm_dressing::garmentGripped <- garmentGripped,
								stm_dressing::orientedGarment <- orientedGarment,
								stm_dressing::reorientGarmentCall <- reorientGarmentCall,
								stm_dressing::pushTowardsCall <- pushTowardsCall,
								stm_dressing::checkFaultCall <- checkFaultCall,
								stm_dressing::setEEForcesCall <- setEEForcesCall,
								stm_dressing::getEEPosCall <- getEEPosCall,
								stm_dressing::detectGarmentCall <- detectGarmentCall,
								stm_dressing::gripCall <- gripCall,
								stm_dressing::checkCorrectHandlingCall <- checkCorrectHandlingCall,
								stm_dressing::checkUserDressedCall <- checkUserDressedCall,
								stm_dressing::setEEPosCall <- setEEPosCall,
								stm_dressing::checkMovementCall <- checkMovementCall,
								stm_dressing::stepTowardsCall <- stepTowardsCall,
								stm_dressing::detectSecondArmCall <- detectSecondArmCall,
								stm_dressing::releaseGripCall <- releaseGripCall,
								stm_dressing::detectUserPoseCall <- detectUserPoseCall
							]]
						)
							[|{|terminate, stm_movement::movementEnd, stm_dressing::movementStart, stm_dressing::forceStart, stm_movement::forceEnd|}|]
						(
							(
								let
									const_movement_MovementControl_EPSILON = 1
									const_movement_MovementControl_TARGET_TOTAL_FORCE = 1
									const_movement_MovementControl_Kp = const_radcontrol_CDressingControl_Kp
									const_movement_MovementControl_Ki = const_radcontrol_CDressingControl_Ki
									const_movement_MovementControl_Kd = const_radcontrol_CDressingControl_Kd
									const_movement_MovementControl_step = const_radcontrol_CDressingControl_step
								within 
								stm_movement::D__(id__,
										    const_movement_MovementControl_Kp,
										    const_movement_MovementControl_Ki,
										    const_movement_MovementControl_Kd,
										    const_movement_MovementControl_step,
										    const_movement_MovementControl_EPSILON,
										    const_movement_MovementControl_TARGET_TOTAL_FORCE)[[
									stm_movement::terminate <- terminate,
									stm_movement::allowMovement.in <- stm_stop::allowMovement.out,
									stm_movement::allowMovement.out <- stm_stop::allowMovement.in,
									stm_movement::movementStart.in <- stm_dressing::movementStart.out,
									stm_movement::movementStart.out <- stm_dressing::movementStart.in,
									stm_movement::endEffectorPosition <- endEffectorPosition,
									stm_movement::forceEndEffector <- forceEndEffector,
									stm_movement::forceStart.in <- stm_dressing::forceStart.out,
									stm_movement::forceStart.out <- stm_dressing::forceStart.in,
									stm_movement::movementInitiated <- movementInitiated,
									stm_movement::stepMoved <- stepMoved,
									stm_movement::movementWasAllowed <- movementWasAllowed,
									stm_movement::forceWasAllowed <- forceWasAllowed,
									stm_movement::forceInitiated <- forceInitiated,
									stm_movement::resetMovement.in <- stm_stop::resetMovement.out,
									stm_movement::resetMovement.out <- stm_stop::resetMovement.in,
									stm_movement::forceApplied <- forceApplied,
									stm_movement::set_p <- set_p,
									stm_movement::get_p <- get_p,
									stm_movement::set_d <- set_d,
									stm_movement::get_d <- get_d,
									stm_movement::set_i <- set_i,
									stm_movement::get_i <- get_i,
									stm_movement::set_e <- set_e,
									stm_movement::get_e <- get_e,
									stm_movement::set_e_old <- set_e_old,
									stm_movement::get_e_old <- get_e_old,
									stm_movement::set_t <- set_t,
									stm_movement::get_t <- get_t,
									stm_movement::set_t_old <- set_t_old,
									stm_movement::get_t_old <- get_t_old,
									stm_movement::set_o <- set_o,
									stm_movement::get_o <- get_o,
									stm_movement::reorientGarmentCall <- reorientGarmentCall,
									stm_movement::gripCall <- gripCall,
									stm_movement::checkCorrectHandlingCall <- checkCorrectHandlingCall,
									stm_movement::checkUserDressedCall <- checkUserDressedCall,
									stm_movement::pushTowardsCall <- pushTowardsCall,
									stm_movement::setEEForcesCall <- setEEForcesCall,
									stm_movement::setEEPosCall <- setEEPosCall,
									stm_movement::checkMovementCall <- checkMovementCall,
									stm_movement::stepTowardsCall <- stepTowardsCall,
									stm_movement::releaseGripCall <- releaseGripCall
								]]
							)
								[|{|terminate, stm_stop::allowMovement, stm_movement::movementOccurred, stm_stop::resetMovement|}|]
							(
								(
									stm_stop::D__(id__)[[
										stm_stop::terminate <- terminate,
										stm_stop::emergencyStop <- emergencyStop,
										stm_stop::resumeDressing <- resumeDressing,
										stm_stop::environmentalResume.in <- stm_environment::environmentalResume.out,
										stm_stop::environmentalResume.out <- stm_environment::environmentalResume.in,
										stm_stop::environmentalStop.in <- stm_environment::environmentalStop.out,
										stm_stop::environmentalStop.out <- stm_environment::environmentalStop.in,
										stm_stop::collisionStop <- collisionStop,
										stm_stop::collisionResume <- collisionResume,
										stm_stop::movementOccurred.in <- stm_movement::movementOccurred.out,
										stm_stop::movementOccurred.out <- stm_movement::movementOccurred.in,
										stm_stop::allowedMovement <- allowedMovement,
										stm_stop::noticedMovementOccurred <- noticedMovementOccurred
									]]
								)
									[|{|terminate, stm_environment::environmentalResume, stm_environment::environmentalStop|}|]
								(
									stm_environment::D__(id__)[[
										stm_environment::terminate <- terminate,
										stm_environment::backgroundNoiseLevel <- backgroundNoiseLevel,
										stm_environment::otherAgentDetected <- otherAgentDetected
									]]
								)
							)
							\diff(
								{|terminate, stm_environment::environmentalResume, stm_environment::environmentalStop|},
								{|terminate|}
							)
						)
						\diff(
							{|terminate, stm_stop::allowMovement, stm_movement::movementOccurred, stm_stop::resetMovement|},
							{|terminate|}
						)
					)
					\diff(
						{|terminate, stm_movement::movementEnd, stm_dressing::movementStart, stm_dressing::forceStart, stm_movement::forceEnd|},
						{|terminate|}
					)
						[|
							union(
								{|
									set_p,
									set_d,
									set_i,
									set_e,
									set_e_old,
									set_t,
									set_t_old,
									set_o
								|},
								{|
									stm_movement::set_EXT_p,stm_movement::set_EXT_d,stm_movement::set_EXT_i,stm_movement::set_EXT_e,stm_movement::set_EXT_e_old,stm_movement::set_EXT_t,stm_movement::set_EXT_t_old,stm_movement::set_EXT_o
								|}
							)
						|]
					Memory(id__, (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), const_radcontrol_CDressingControl_Kp, const_radcontrol_CDressingControl_Ki, const_radcontrol_CDressingControl_Kd, const_radcontrol_CDressingControl_step)
				)
				\ union(
					{|
						set_p, get_p,
						set_d, get_d,
						set_i, get_i,
						set_e, get_e,
						set_e_old, get_e_old,
						set_t, get_t,
						set_t_old, get_t_old,
						set_o, get_o
					|},
					{|
						stm_movement::set_EXT_p,stm_movement::set_EXT_d,stm_movement::set_EXT_i,stm_movement::set_EXT_e,stm_movement::set_EXT_e_old,stm_movement::set_EXT_t,stm_movement::set_EXT_t_old,stm_movement::set_EXT_o
					|}
				)
				[|{|terminate|}|>SKIP
				
				-- VS version
				VS__(id__,
						    const_radcontrol_CDressingControl_Kp,
						    const_radcontrol_CDressingControl_Ki,
						    const_radcontrol_CDressingControl_Kd,
						    const_radcontrol_CDressingControl_step,
						    const_radcontrol_CDressingControl_stm_movement_EPSILON,
						    const_radcontrol_CDressingControl_stm_movement_TARGET_TOTAL_FORCE) = 	((
						(
							stm_dressing::VS__(id__)[[
								stm_dressing::terminate <- terminate,
								stm_dressing::snaggingDetected <- snaggingDetected,
								stm_dressing::invalidTrajectory <- invalidTrajectory,
								stm_dressing::invalidPoseDetected <- invalidPoseDetected,
								stm_dressing::userInterrupt <- userInterrupt,
								stm_dressing::poseDetected <- poseDetected,
								stm_dressing::dressingRequest <- dressingRequest,
								stm_dressing::garmentDetected <- garmentDetected,
								stm_dressing::dressedJoint <- dressedJoint,
								stm_dressing::movementEnd.in <- stm_movement::movementEnd.out,
								stm_dressing::movementEnd.out <- stm_movement::movementEnd.in,
								stm_dressing::armConfig <- armConfig,
								stm_dressing::gripCorrect <- gripCorrect,
								stm_dressing::secondHandDetected <- secondHandDetected,
								stm_dressing::userDressed <- userDressed,
								stm_dressing::correctedMovement <- correctedMovement,
								stm_dressing::gripperEngaged <- gripperEngaged,
								stm_dressing::forceEnd.in <- stm_movement::forceEnd.out,
								stm_dressing::forceEnd.out <- stm_movement::forceEnd.in,
								stm_dressing::userMoved <- userMoved,
								stm_dressing::handlingCorrect <- handlingCorrect,
								stm_dressing::garmentAtHand <- garmentAtHand,
								stm_dressing::arrivedAtGarment <- arrivedAtGarment,
								stm_dressing::garmentGripped <- garmentGripped,
								stm_dressing::orientedGarment <- orientedGarment,
								stm_dressing::reorientGarmentCall <- reorientGarmentCall,
								stm_dressing::pushTowardsCall <- pushTowardsCall,
								stm_dressing::checkFaultCall <- checkFaultCall,
								stm_dressing::setEEForcesCall <- setEEForcesCall,
								stm_dressing::getEEPosCall <- getEEPosCall,
								stm_dressing::detectGarmentCall <- detectGarmentCall,
								stm_dressing::gripCall <- gripCall,
								stm_dressing::checkCorrectHandlingCall <- checkCorrectHandlingCall,
								stm_dressing::checkUserDressedCall <- checkUserDressedCall,
								stm_dressing::setEEPosCall <- setEEPosCall,
								stm_dressing::checkMovementCall <- checkMovementCall,
								stm_dressing::stepTowardsCall <- stepTowardsCall,
								stm_dressing::detectSecondArmCall <- detectSecondArmCall,
								stm_dressing::releaseGripCall <- releaseGripCall,
								stm_dressing::detectUserPoseCall <- detectUserPoseCall
							]]
						)
							[|{|terminate, stm_movement::movementEnd, stm_dressing::movementStart, stm_dressing::forceStart, stm_movement::forceEnd|}|]
						(
							(
								let
									const_movement_MovementControl_EPSILON = 1
									const_movement_MovementControl_TARGET_TOTAL_FORCE = 1
									const_movement_MovementControl_Kp = const_radcontrol_CDressingControl_Kp
									const_movement_MovementControl_Ki = const_radcontrol_CDressingControl_Ki
									const_movement_MovementControl_Kd = const_radcontrol_CDressingControl_Kd
									const_movement_MovementControl_step = const_radcontrol_CDressingControl_step
								within 
								stm_movement::VS__(id__,
										    const_movement_MovementControl_Kp,
										    const_movement_MovementControl_Ki,
										    const_movement_MovementControl_Kd,
										    const_movement_MovementControl_step,
										    const_movement_MovementControl_EPSILON,
										    const_movement_MovementControl_TARGET_TOTAL_FORCE)[[
									stm_movement::terminate <- terminate,
									stm_movement::allowMovement.in <- stm_stop::allowMovement.out,
									stm_movement::allowMovement.out <- stm_stop::allowMovement.in,
									stm_movement::movementStart.in <- stm_dressing::movementStart.out,
									stm_movement::movementStart.out <- stm_dressing::movementStart.in,
									stm_movement::endEffectorPosition <- endEffectorPosition,
									stm_movement::forceEndEffector <- forceEndEffector,
									stm_movement::forceStart.in <- stm_dressing::forceStart.out,
									stm_movement::forceStart.out <- stm_dressing::forceStart.in,
									stm_movement::movementInitiated <- movementInitiated,
									stm_movement::stepMoved <- stepMoved,
									stm_movement::movementWasAllowed <- movementWasAllowed,
									stm_movement::forceWasAllowed <- forceWasAllowed,
									stm_movement::forceInitiated <- forceInitiated,
									stm_movement::resetMovement.in <- stm_stop::resetMovement.out,
									stm_movement::resetMovement.out <- stm_stop::resetMovement.in,
									stm_movement::forceApplied <- forceApplied,
									stm_movement::set_p <- set_p,
									stm_movement::get_p <- get_p,
									stm_movement::set_d <- set_d,
									stm_movement::get_d <- get_d,
									stm_movement::set_i <- set_i,
									stm_movement::get_i <- get_i,
									stm_movement::set_e <- set_e,
									stm_movement::get_e <- get_e,
									stm_movement::set_e_old <- set_e_old,
									stm_movement::get_e_old <- get_e_old,
									stm_movement::set_t <- set_t,
									stm_movement::get_t <- get_t,
									stm_movement::set_t_old <- set_t_old,
									stm_movement::get_t_old <- get_t_old,
									stm_movement::set_o <- set_o,
									stm_movement::get_o <- get_o,
									stm_movement::reorientGarmentCall <- reorientGarmentCall,
									stm_movement::gripCall <- gripCall,
									stm_movement::checkCorrectHandlingCall <- checkCorrectHandlingCall,
									stm_movement::checkUserDressedCall <- checkUserDressedCall,
									stm_movement::pushTowardsCall <- pushTowardsCall,
									stm_movement::setEEForcesCall <- setEEForcesCall,
									stm_movement::setEEPosCall <- setEEPosCall,
									stm_movement::checkMovementCall <- checkMovementCall,
									stm_movement::stepTowardsCall <- stepTowardsCall,
									stm_movement::releaseGripCall <- releaseGripCall
								]]
							)
								[|{|terminate, stm_stop::allowMovement, stm_movement::movementOccurred, stm_stop::resetMovement|}|]
							(
								(
									stm_stop::VS__(id__)[[
										stm_stop::terminate <- terminate,
										stm_stop::emergencyStop <- emergencyStop,
										stm_stop::resumeDressing <- resumeDressing,
										stm_stop::environmentalResume.in <- stm_environment::environmentalResume.out,
										stm_stop::environmentalResume.out <- stm_environment::environmentalResume.in,
										stm_stop::environmentalStop.in <- stm_environment::environmentalStop.out,
										stm_stop::environmentalStop.out <- stm_environment::environmentalStop.in,
										stm_stop::collisionStop <- collisionStop,
										stm_stop::collisionResume <- collisionResume,
										stm_stop::movementOccurred.in <- stm_movement::movementOccurred.out,
										stm_stop::movementOccurred.out <- stm_movement::movementOccurred.in,
										stm_stop::allowedMovement <- allowedMovement,
										stm_stop::noticedMovementOccurred <- noticedMovementOccurred
									]]
								)
									[|{|terminate, stm_environment::environmentalResume, stm_environment::environmentalStop|}|]
								(
									stm_environment::VS__(id__)[[
										stm_environment::terminate <- terminate,
										stm_environment::backgroundNoiseLevel <- backgroundNoiseLevel,
										stm_environment::otherAgentDetected <- otherAgentDetected
									]]
								)
							)
							\diff(
								{|terminate, stm_environment::environmentalResume, stm_environment::environmentalStop|},
								{|terminate|}
							)
						)
						\diff(
							{|terminate, stm_stop::allowMovement, stm_movement::movementOccurred, stm_stop::resetMovement|},
							{|terminate|}
						)
					)
					\diff(
						{|terminate, stm_movement::movementEnd, stm_dressing::movementStart, stm_dressing::forceStart, stm_movement::forceEnd|},
						{|terminate|}
					)
						[|
							union(
								{|
									set_p,
									set_d,
									set_i,
									set_e,
									set_e_old,
									set_t,
									set_t_old,
									set_o
								|},
								{|
									stm_movement::set_EXT_p,stm_movement::set_EXT_d,stm_movement::set_EXT_i,stm_movement::set_EXT_e,stm_movement::set_EXT_e_old,stm_movement::set_EXT_t,stm_movement::set_EXT_t_old,stm_movement::set_EXT_o
								|}
							)
						|]
					Memory(id__, (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), const_radcontrol_CDressingControl_Kp, const_radcontrol_CDressingControl_Ki, const_radcontrol_CDressingControl_Kd, const_radcontrol_CDressingControl_step)
				)
				\ union(
					{|
						set_p, get_p,
						set_d, get_d,
						set_i, get_i,
						set_e, get_e,
						set_e_old, get_e_old,
						set_t, get_t,
						set_t_old, get_t_old,
						set_o, get_o
					|},
					{|
						stm_movement::set_EXT_p,stm_movement::set_EXT_d,stm_movement::set_EXT_i,stm_movement::set_EXT_e,stm_movement::set_EXT_e_old,stm_movement::set_EXT_t,stm_movement::set_EXT_t_old,stm_movement::set_EXT_o
					|}
				)
				[|{|terminate|}|>SKIP
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__,
						    const_radcontrol_CDressingControl_Kp,
						    const_radcontrol_CDressingControl_Ki,
						    const_radcontrol_CDressingControl_Kd,
						    const_radcontrol_CDressingControl_step,
						    const_radcontrol_CDressingControl_stm_movement_EPSILON,
						    const_radcontrol_CDressingControl_stm_movement_TARGET_TOTAL_FORCE) = sbisim(diamond(	((
						(
							stm_dressing::O__(id__)[[
								stm_dressing::terminate <- terminate,
								stm_dressing::snaggingDetected <- snaggingDetected,
								stm_dressing::invalidTrajectory <- invalidTrajectory,
								stm_dressing::invalidPoseDetected <- invalidPoseDetected,
								stm_dressing::userInterrupt <- userInterrupt,
								stm_dressing::poseDetected <- poseDetected,
								stm_dressing::dressingRequest <- dressingRequest,
								stm_dressing::garmentDetected <- garmentDetected,
								stm_dressing::dressedJoint <- dressedJoint,
								stm_dressing::movementEnd.in <- stm_movement::movementEnd.out,
								stm_dressing::movementEnd.out <- stm_movement::movementEnd.in,
								stm_dressing::armConfig <- armConfig,
								stm_dressing::gripCorrect <- gripCorrect,
								stm_dressing::secondHandDetected <- secondHandDetected,
								stm_dressing::userDressed <- userDressed,
								stm_dressing::correctedMovement <- correctedMovement,
								stm_dressing::gripperEngaged <- gripperEngaged,
								stm_dressing::forceEnd.in <- stm_movement::forceEnd.out,
								stm_dressing::forceEnd.out <- stm_movement::forceEnd.in,
								stm_dressing::userMoved <- userMoved,
								stm_dressing::handlingCorrect <- handlingCorrect,
								stm_dressing::garmentAtHand <- garmentAtHand,
								stm_dressing::arrivedAtGarment <- arrivedAtGarment,
								stm_dressing::garmentGripped <- garmentGripped,
								stm_dressing::orientedGarment <- orientedGarment,
								stm_dressing::reorientGarmentCall <- reorientGarmentCall,
								stm_dressing::pushTowardsCall <- pushTowardsCall,
								stm_dressing::checkFaultCall <- checkFaultCall,
								stm_dressing::setEEForcesCall <- setEEForcesCall,
								stm_dressing::getEEPosCall <- getEEPosCall,
								stm_dressing::detectGarmentCall <- detectGarmentCall,
								stm_dressing::gripCall <- gripCall,
								stm_dressing::checkCorrectHandlingCall <- checkCorrectHandlingCall,
								stm_dressing::checkUserDressedCall <- checkUserDressedCall,
								stm_dressing::setEEPosCall <- setEEPosCall,
								stm_dressing::checkMovementCall <- checkMovementCall,
								stm_dressing::stepTowardsCall <- stepTowardsCall,
								stm_dressing::detectSecondArmCall <- detectSecondArmCall,
								stm_dressing::releaseGripCall <- releaseGripCall,
								stm_dressing::detectUserPoseCall <- detectUserPoseCall
							]]
						)
							[|{|terminate, stm_movement::movementEnd, stm_dressing::movementStart, stm_dressing::forceStart, stm_movement::forceEnd|}|]
						(
							(
								let
									const_movement_MovementControl_EPSILON = 1
									const_movement_MovementControl_TARGET_TOTAL_FORCE = 1
									const_movement_MovementControl_Kp = const_radcontrol_CDressingControl_Kp
									const_movement_MovementControl_Ki = const_radcontrol_CDressingControl_Ki
									const_movement_MovementControl_Kd = const_radcontrol_CDressingControl_Kd
									const_movement_MovementControl_step = const_radcontrol_CDressingControl_step
								within 
								stm_movement::O__(id__,
										    const_movement_MovementControl_Kp,
										    const_movement_MovementControl_Ki,
										    const_movement_MovementControl_Kd,
										    const_movement_MovementControl_step,
										    const_movement_MovementControl_EPSILON,
										    const_movement_MovementControl_TARGET_TOTAL_FORCE)[[
									stm_movement::terminate <- terminate,
									stm_movement::allowMovement.in <- stm_stop::allowMovement.out,
									stm_movement::allowMovement.out <- stm_stop::allowMovement.in,
									stm_movement::movementStart.in <- stm_dressing::movementStart.out,
									stm_movement::movementStart.out <- stm_dressing::movementStart.in,
									stm_movement::endEffectorPosition <- endEffectorPosition,
									stm_movement::forceEndEffector <- forceEndEffector,
									stm_movement::forceStart.in <- stm_dressing::forceStart.out,
									stm_movement::forceStart.out <- stm_dressing::forceStart.in,
									stm_movement::movementInitiated <- movementInitiated,
									stm_movement::stepMoved <- stepMoved,
									stm_movement::movementWasAllowed <- movementWasAllowed,
									stm_movement::forceWasAllowed <- forceWasAllowed,
									stm_movement::forceInitiated <- forceInitiated,
									stm_movement::resetMovement.in <- stm_stop::resetMovement.out,
									stm_movement::resetMovement.out <- stm_stop::resetMovement.in,
									stm_movement::forceApplied <- forceApplied,
									stm_movement::set_p <- set_p,
									stm_movement::get_p <- get_p,
									stm_movement::set_d <- set_d,
									stm_movement::get_d <- get_d,
									stm_movement::set_i <- set_i,
									stm_movement::get_i <- get_i,
									stm_movement::set_e <- set_e,
									stm_movement::get_e <- get_e,
									stm_movement::set_e_old <- set_e_old,
									stm_movement::get_e_old <- get_e_old,
									stm_movement::set_t <- set_t,
									stm_movement::get_t <- get_t,
									stm_movement::set_t_old <- set_t_old,
									stm_movement::get_t_old <- get_t_old,
									stm_movement::set_o <- set_o,
									stm_movement::get_o <- get_o,
									stm_movement::reorientGarmentCall <- reorientGarmentCall,
									stm_movement::gripCall <- gripCall,
									stm_movement::checkCorrectHandlingCall <- checkCorrectHandlingCall,
									stm_movement::checkUserDressedCall <- checkUserDressedCall,
									stm_movement::pushTowardsCall <- pushTowardsCall,
									stm_movement::setEEForcesCall <- setEEForcesCall,
									stm_movement::setEEPosCall <- setEEPosCall,
									stm_movement::checkMovementCall <- checkMovementCall,
									stm_movement::stepTowardsCall <- stepTowardsCall,
									stm_movement::releaseGripCall <- releaseGripCall
								]]
							)
								[|{|terminate, stm_stop::allowMovement, stm_movement::movementOccurred, stm_stop::resetMovement|}|]
							(
								(
									stm_stop::O__(id__)[[
										stm_stop::terminate <- terminate,
										stm_stop::emergencyStop <- emergencyStop,
										stm_stop::resumeDressing <- resumeDressing,
										stm_stop::environmentalResume.in <- stm_environment::environmentalResume.out,
										stm_stop::environmentalResume.out <- stm_environment::environmentalResume.in,
										stm_stop::environmentalStop.in <- stm_environment::environmentalStop.out,
										stm_stop::environmentalStop.out <- stm_environment::environmentalStop.in,
										stm_stop::collisionStop <- collisionStop,
										stm_stop::collisionResume <- collisionResume,
										stm_stop::movementOccurred.in <- stm_movement::movementOccurred.out,
										stm_stop::movementOccurred.out <- stm_movement::movementOccurred.in,
										stm_stop::allowedMovement <- allowedMovement,
										stm_stop::noticedMovementOccurred <- noticedMovementOccurred
									]]
								)
									[|{|terminate, stm_environment::environmentalResume, stm_environment::environmentalStop|}|]
								(
									stm_environment::O__(id__)[[
										stm_environment::terminate <- terminate,
										stm_environment::backgroundNoiseLevel <- backgroundNoiseLevel,
										stm_environment::otherAgentDetected <- otherAgentDetected
									]]
								)
							)
							\diff(
								{|terminate, stm_environment::environmentalResume, stm_environment::environmentalStop|},
								{|terminate|}
							)
						)
						\diff(
							{|terminate, stm_stop::allowMovement, stm_movement::movementOccurred, stm_stop::resetMovement|},
							{|terminate|}
						)
					)
					\diff(
						{|terminate, stm_movement::movementEnd, stm_dressing::movementStart, stm_dressing::forceStart, stm_movement::forceEnd|},
						{|terminate|}
					)
						[|
							union(
								{|
									set_p,
									set_d,
									set_i,
									set_e,
									set_e_old,
									set_t,
									set_t_old,
									set_o
								|},
								{|
									stm_movement::set_EXT_p,stm_movement::set_EXT_d,stm_movement::set_EXT_i,stm_movement::set_EXT_e,stm_movement::set_EXT_e_old,stm_movement::set_EXT_t,stm_movement::set_EXT_t_old,stm_movement::set_EXT_o
								|}
							)
						|]
					dbisim(Memory(id__, (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), const_radcontrol_CDressingControl_Kp, const_radcontrol_CDressingControl_Ki, const_radcontrol_CDressingControl_Kd, const_radcontrol_CDressingControl_step))
				)
				\ union(
					{|
						set_p, get_p,
						set_d, get_d,
						set_i, get_i,
						set_e, get_e,
						set_e_old, get_e_old,
						set_t, get_t,
						set_t_old, get_t_old,
						set_o, get_o
					|},
					{|
						stm_movement::set_EXT_p,stm_movement::set_EXT_d,stm_movement::set_EXT_i,stm_movement::set_EXT_e,stm_movement::set_EXT_e_old,stm_movement::set_EXT_t,stm_movement::set_EXT_t_old,stm_movement::set_EXT_o
					|}
				)
				[|{|terminate|}|>SKIP
				))
								
				-- VS_O version
				VS_O__(id__,
						    const_radcontrol_CDressingControl_Kp,
						    const_radcontrol_CDressingControl_Ki,
						    const_radcontrol_CDressingControl_Kd,
						    const_radcontrol_CDressingControl_step,
						    const_radcontrol_CDressingControl_stm_movement_EPSILON,
						    const_radcontrol_CDressingControl_stm_movement_TARGET_TOTAL_FORCE) = sbisim(diamond(	((
						(
							stm_dressing::VS_O__(id__)[[
								stm_dressing::terminate <- terminate,
								stm_dressing::snaggingDetected <- snaggingDetected,
								stm_dressing::invalidTrajectory <- invalidTrajectory,
								stm_dressing::invalidPoseDetected <- invalidPoseDetected,
								stm_dressing::userInterrupt <- userInterrupt,
								stm_dressing::poseDetected <- poseDetected,
								stm_dressing::dressingRequest <- dressingRequest,
								stm_dressing::garmentDetected <- garmentDetected,
								stm_dressing::dressedJoint <- dressedJoint,
								stm_dressing::movementEnd.in <- stm_movement::movementEnd.out,
								stm_dressing::movementEnd.out <- stm_movement::movementEnd.in,
								stm_dressing::armConfig <- armConfig,
								stm_dressing::gripCorrect <- gripCorrect,
								stm_dressing::secondHandDetected <- secondHandDetected,
								stm_dressing::userDressed <- userDressed,
								stm_dressing::correctedMovement <- correctedMovement,
								stm_dressing::gripperEngaged <- gripperEngaged,
								stm_dressing::forceEnd.in <- stm_movement::forceEnd.out,
								stm_dressing::forceEnd.out <- stm_movement::forceEnd.in,
								stm_dressing::userMoved <- userMoved,
								stm_dressing::handlingCorrect <- handlingCorrect,
								stm_dressing::garmentAtHand <- garmentAtHand,
								stm_dressing::arrivedAtGarment <- arrivedAtGarment,
								stm_dressing::garmentGripped <- garmentGripped,
								stm_dressing::orientedGarment <- orientedGarment,
								stm_dressing::reorientGarmentCall <- reorientGarmentCall,
								stm_dressing::pushTowardsCall <- pushTowardsCall,
								stm_dressing::checkFaultCall <- checkFaultCall,
								stm_dressing::setEEForcesCall <- setEEForcesCall,
								stm_dressing::getEEPosCall <- getEEPosCall,
								stm_dressing::detectGarmentCall <- detectGarmentCall,
								stm_dressing::gripCall <- gripCall,
								stm_dressing::checkCorrectHandlingCall <- checkCorrectHandlingCall,
								stm_dressing::checkUserDressedCall <- checkUserDressedCall,
								stm_dressing::setEEPosCall <- setEEPosCall,
								stm_dressing::checkMovementCall <- checkMovementCall,
								stm_dressing::stepTowardsCall <- stepTowardsCall,
								stm_dressing::detectSecondArmCall <- detectSecondArmCall,
								stm_dressing::releaseGripCall <- releaseGripCall,
								stm_dressing::detectUserPoseCall <- detectUserPoseCall
							]]
						)
							[|{|terminate, stm_movement::movementEnd, stm_dressing::movementStart, stm_dressing::forceStart, stm_movement::forceEnd|}|]
						(
							(
								let
									const_movement_MovementControl_EPSILON = 1
									const_movement_MovementControl_TARGET_TOTAL_FORCE = 1
									const_movement_MovementControl_Kp = const_radcontrol_CDressingControl_Kp
									const_movement_MovementControl_Ki = const_radcontrol_CDressingControl_Ki
									const_movement_MovementControl_Kd = const_radcontrol_CDressingControl_Kd
									const_movement_MovementControl_step = const_radcontrol_CDressingControl_step
								within 
								stm_movement::VS_O__(id__,
										    const_movement_MovementControl_Kp,
										    const_movement_MovementControl_Ki,
										    const_movement_MovementControl_Kd,
										    const_movement_MovementControl_step,
										    const_movement_MovementControl_EPSILON,
										    const_movement_MovementControl_TARGET_TOTAL_FORCE)[[
									stm_movement::terminate <- terminate,
									stm_movement::allowMovement.in <- stm_stop::allowMovement.out,
									stm_movement::allowMovement.out <- stm_stop::allowMovement.in,
									stm_movement::movementStart.in <- stm_dressing::movementStart.out,
									stm_movement::movementStart.out <- stm_dressing::movementStart.in,
									stm_movement::endEffectorPosition <- endEffectorPosition,
									stm_movement::forceEndEffector <- forceEndEffector,
									stm_movement::forceStart.in <- stm_dressing::forceStart.out,
									stm_movement::forceStart.out <- stm_dressing::forceStart.in,
									stm_movement::movementInitiated <- movementInitiated,
									stm_movement::stepMoved <- stepMoved,
									stm_movement::movementWasAllowed <- movementWasAllowed,
									stm_movement::forceWasAllowed <- forceWasAllowed,
									stm_movement::forceInitiated <- forceInitiated,
									stm_movement::resetMovement.in <- stm_stop::resetMovement.out,
									stm_movement::resetMovement.out <- stm_stop::resetMovement.in,
									stm_movement::forceApplied <- forceApplied,
									stm_movement::set_p <- set_p,
									stm_movement::get_p <- get_p,
									stm_movement::set_d <- set_d,
									stm_movement::get_d <- get_d,
									stm_movement::set_i <- set_i,
									stm_movement::get_i <- get_i,
									stm_movement::set_e <- set_e,
									stm_movement::get_e <- get_e,
									stm_movement::set_e_old <- set_e_old,
									stm_movement::get_e_old <- get_e_old,
									stm_movement::set_t <- set_t,
									stm_movement::get_t <- get_t,
									stm_movement::set_t_old <- set_t_old,
									stm_movement::get_t_old <- get_t_old,
									stm_movement::set_o <- set_o,
									stm_movement::get_o <- get_o,
									stm_movement::reorientGarmentCall <- reorientGarmentCall,
									stm_movement::gripCall <- gripCall,
									stm_movement::checkCorrectHandlingCall <- checkCorrectHandlingCall,
									stm_movement::checkUserDressedCall <- checkUserDressedCall,
									stm_movement::pushTowardsCall <- pushTowardsCall,
									stm_movement::setEEForcesCall <- setEEForcesCall,
									stm_movement::setEEPosCall <- setEEPosCall,
									stm_movement::checkMovementCall <- checkMovementCall,
									stm_movement::stepTowardsCall <- stepTowardsCall,
									stm_movement::releaseGripCall <- releaseGripCall
								]]
							)
								[|{|terminate, stm_stop::allowMovement, stm_movement::movementOccurred, stm_stop::resetMovement|}|]
							(
								(
									stm_stop::VS_O__(id__)[[
										stm_stop::terminate <- terminate,
										stm_stop::emergencyStop <- emergencyStop,
										stm_stop::resumeDressing <- resumeDressing,
										stm_stop::environmentalResume.in <- stm_environment::environmentalResume.out,
										stm_stop::environmentalResume.out <- stm_environment::environmentalResume.in,
										stm_stop::environmentalStop.in <- stm_environment::environmentalStop.out,
										stm_stop::environmentalStop.out <- stm_environment::environmentalStop.in,
										stm_stop::collisionStop <- collisionStop,
										stm_stop::collisionResume <- collisionResume,
										stm_stop::movementOccurred.in <- stm_movement::movementOccurred.out,
										stm_stop::movementOccurred.out <- stm_movement::movementOccurred.in,
										stm_stop::allowedMovement <- allowedMovement,
										stm_stop::noticedMovementOccurred <- noticedMovementOccurred
									]]
								)
									[|{|terminate, stm_environment::environmentalResume, stm_environment::environmentalStop|}|]
								(
									stm_environment::VS_O__(id__)[[
										stm_environment::terminate <- terminate,
										stm_environment::backgroundNoiseLevel <- backgroundNoiseLevel,
										stm_environment::otherAgentDetected <- otherAgentDetected
									]]
								)
							)
							\diff(
								{|terminate, stm_environment::environmentalResume, stm_environment::environmentalStop|},
								{|terminate|}
							)
						)
						\diff(
							{|terminate, stm_stop::allowMovement, stm_movement::movementOccurred, stm_stop::resetMovement|},
							{|terminate|}
						)
					)
					\diff(
						{|terminate, stm_movement::movementEnd, stm_dressing::movementStart, stm_dressing::forceStart, stm_movement::forceEnd|},
						{|terminate|}
					)
						[|
							union(
								{|
									set_p,
									set_d,
									set_i,
									set_e,
									set_e_old,
									set_t,
									set_t_old,
									set_o
								|},
								{|
									stm_movement::set_EXT_p,stm_movement::set_EXT_d,stm_movement::set_EXT_i,stm_movement::set_EXT_e,stm_movement::set_EXT_e_old,stm_movement::set_EXT_t,stm_movement::set_EXT_t_old,stm_movement::set_EXT_o
								|}
							)
						|]
					dbisim(Memory(id__, (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), const_radcontrol_CDressingControl_Kp, const_radcontrol_CDressingControl_Ki, const_radcontrol_CDressingControl_Kd, const_radcontrol_CDressingControl_step))
				)
				\ union(
					{|
						set_p, get_p,
						set_d, get_d,
						set_i, get_i,
						set_e, get_e,
						set_e_old, get_e_old,
						set_t, get_t,
						set_t_old, get_t_old,
						set_o, get_o
					|},
					{|
						stm_movement::set_EXT_p,stm_movement::set_EXT_d,stm_movement::set_EXT_i,stm_movement::set_EXT_e,stm_movement::set_EXT_e_old,stm_movement::set_EXT_t,stm_movement::set_EXT_t_old,stm_movement::set_EXT_o
					|}
				)
				[|{|terminate|}|>SKIP
				))
			
				HEXT(id__,
						    const_radcontrol_CDressingControl_Kp,
						    const_radcontrol_CDressingControl_Ki,
						    const_radcontrol_CDressingControl_Kd,
						    const_radcontrol_CDressingControl_step,
						    const_radcontrol_CDressingControl_stm_movement_EPSILON,
						    const_radcontrol_CDressingControl_stm_movement_TARGET_TOTAL_FORCE) = O__(id__,
						    const_radcontrol_CDressingControl_Kp,
						    const_radcontrol_CDressingControl_Ki,
						    const_radcontrol_CDressingControl_Kd,
						    const_radcontrol_CDressingControl_step,
						    const_radcontrol_CDressingControl_stm_movement_EPSILON,
						    const_radcontrol_CDressingControl_stm_movement_TARGET_TOTAL_FORCE) [|shared_variable_events|] SKIP			
	
		endmodule
	
	-- declaring module memory
	Memory(id__) = SKIP
	
	D__(id__,
			    const_RobotAssistedDressing_ctrl_radcontrol_Kp,
			    const_RobotAssistedDressing_ctrl_radcontrol_Ki,
			    const_RobotAssistedDressing_ctrl_radcontrol_Kd,
			    const_RobotAssistedDressing_ctrl_radcontrol_step,
			    const_radcontrol_CDressingControl_stm_movement_EPSILON,
			    const_radcontrol_CDressingControl_stm_movement_TARGET_TOTAL_FORCE) = 	(
			(
				(SKIP)
					[|{||}|]
				(
					(
						let
							const_radcontrol_CDressingControl_Kp = 1
							const_radcontrol_CDressingControl_Ki = 1
							const_radcontrol_CDressingControl_Kd = 0
							const_radcontrol_CDressingControl_step = 0
						within 
						ctrl_radcontrol::D__(id__,
								    const_radcontrol_CDressingControl_Kp,
								    const_radcontrol_CDressingControl_Ki,
								    const_radcontrol_CDressingControl_Kd,
								    const_radcontrol_CDressingControl_step,
								    const_radcontrol_CDressingControl_stm_movement_EPSILON,
								    const_radcontrol_CDressingControl_stm_movement_TARGET_TOTAL_FORCE)[[
							ctrl_radcontrol::terminate <- terminate,
							ctrl_radcontrol::snaggingDetected <- snaggingDetected,
							ctrl_radcontrol::garmentDetected <- garmentDetected,
							ctrl_radcontrol::dressingRequest <- dressingRequest,
							ctrl_radcontrol::userInterrupt <- userInterrupt,
							ctrl_radcontrol::invalidPoseDetected <- invalidPoseDetected,
							ctrl_radcontrol::poseDetected <- poseDetected,
							ctrl_radcontrol::invalidTrajectory <- invalidTrajectory,
							ctrl_radcontrol::armConfig <- armConfig,
							ctrl_radcontrol::resumeDressing <- resumeDressing,
							ctrl_radcontrol::emergencyStop <- emergencyStop,
							ctrl_radcontrol::otherAgentDetected <- otherAgentDetected,
							ctrl_radcontrol::backgroundNoiseLevel <- backgroundNoiseLevel,
							ctrl_radcontrol::gripCorrect <- gripCorrect,
							ctrl_radcontrol::gripperEngaged <- gripperEngaged,
							ctrl_radcontrol::dressedJoint <- dressedJoint,
							ctrl_radcontrol::correctedMovement <- correctedMovement,
							ctrl_radcontrol::secondHandDetected <- secondHandDetected,
							ctrl_radcontrol::collisionStop <- collisionStop,
							ctrl_radcontrol::forceEndEffector <- forceEndEffector,
							ctrl_radcontrol::collisionResume <- collisionResume,
							ctrl_radcontrol::endEffectorPosition <- endEffectorPosition,
							ctrl_radcontrol::userDressed <- userDressed,
							ctrl_radcontrol::userMoved <- userMoved,
							ctrl_radcontrol::stepMoved <- stepMoved,
							ctrl_radcontrol::movementWasAllowed <- movementWasAllowed,
							ctrl_radcontrol::allowedMovement <- allowedMovement,
							ctrl_radcontrol::noticedMovementOccurred <- noticedMovementOcurred,
							ctrl_radcontrol::movementInitiated <- movementInitiated,
							ctrl_radcontrol::forceInitiated <- forceInitiated,
							ctrl_radcontrol::forceWasAllowed <- forceWasAllowed,
							ctrl_radcontrol::handlingCorrect <- handlingCorrect,
							ctrl_radcontrol::garmentAtHand <- garmentAtHand,
							ctrl_radcontrol::arrivedAtGarment <- arrivedAtGarment,
							ctrl_radcontrol::garmentGripped <- garmentGripped,
							ctrl_radcontrol::orientedGarment <- orientedGarment,
							ctrl_radcontrol::reorientGarmentCall <- reorientGarmentCall,
							ctrl_radcontrol::pushTowardsCall <- pushTowardsCall,
							ctrl_radcontrol::checkFaultCall <- checkFaultCall,
							ctrl_radcontrol::setEEForcesCall <- setEEForcesCall,
							ctrl_radcontrol::getEEPosCall <- getEEPosCall,
							ctrl_radcontrol::detectGarmentCall <- detectGarmentCall,
							ctrl_radcontrol::gripCall <- gripCall,
							ctrl_radcontrol::checkCorrectHandlingCall <- checkCorrectHandlingCall,
							ctrl_radcontrol::checkUserDressedCall <- checkUserDressedCall,
							ctrl_radcontrol::setEEPosCall <- setEEPosCall,
							ctrl_radcontrol::checkMovementCall <- checkMovementCall,
							ctrl_radcontrol::stepTowardsCall <- stepTowardsCall,
							ctrl_radcontrol::detectSecondArmCall <- detectSecondArmCall,
							ctrl_radcontrol::releaseGripCall <- releaseGripCall,
							ctrl_radcontrol::detectUserPoseCall <- detectUserPoseCall
						]]
						\ {|
							ctrl_radcontrol::forceApplied
						|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	
	-- visible state equivalent
	
	VS__(id__,
			    const_RobotAssistedDressing_ctrl_radcontrol_Kp,
			    const_RobotAssistedDressing_ctrl_radcontrol_Ki,
			    const_RobotAssistedDressing_ctrl_radcontrol_Kd,
			    const_RobotAssistedDressing_ctrl_radcontrol_step,
			    const_radcontrol_CDressingControl_stm_movement_EPSILON,
			    const_radcontrol_CDressingControl_stm_movement_TARGET_TOTAL_FORCE) = 	(
			(
				(SKIP)
					[|{||}|]
				(
					(
						let
							const_radcontrol_CDressingControl_Kp = 1
							const_radcontrol_CDressingControl_Ki = 1
							const_radcontrol_CDressingControl_Kd = 0
							const_radcontrol_CDressingControl_step = 0
						within 
						ctrl_radcontrol::VS__(id__,
								    const_radcontrol_CDressingControl_Kp,
								    const_radcontrol_CDressingControl_Ki,
								    const_radcontrol_CDressingControl_Kd,
								    const_radcontrol_CDressingControl_step,
								    const_radcontrol_CDressingControl_stm_movement_EPSILON,
								    const_radcontrol_CDressingControl_stm_movement_TARGET_TOTAL_FORCE)[[
							ctrl_radcontrol::terminate <- terminate,
							ctrl_radcontrol::snaggingDetected <- snaggingDetected,
							ctrl_radcontrol::garmentDetected <- garmentDetected,
							ctrl_radcontrol::dressingRequest <- dressingRequest,
							ctrl_radcontrol::userInterrupt <- userInterrupt,
							ctrl_radcontrol::invalidPoseDetected <- invalidPoseDetected,
							ctrl_radcontrol::poseDetected <- poseDetected,
							ctrl_radcontrol::invalidTrajectory <- invalidTrajectory,
							ctrl_radcontrol::armConfig <- armConfig,
							ctrl_radcontrol::resumeDressing <- resumeDressing,
							ctrl_radcontrol::emergencyStop <- emergencyStop,
							ctrl_radcontrol::otherAgentDetected <- otherAgentDetected,
							ctrl_radcontrol::backgroundNoiseLevel <- backgroundNoiseLevel,
							ctrl_radcontrol::gripCorrect <- gripCorrect,
							ctrl_radcontrol::gripperEngaged <- gripperEngaged,
							ctrl_radcontrol::dressedJoint <- dressedJoint,
							ctrl_radcontrol::correctedMovement <- correctedMovement,
							ctrl_radcontrol::secondHandDetected <- secondHandDetected,
							ctrl_radcontrol::collisionStop <- collisionStop,
							ctrl_radcontrol::forceEndEffector <- forceEndEffector,
							ctrl_radcontrol::collisionResume <- collisionResume,
							ctrl_radcontrol::endEffectorPosition <- endEffectorPosition,
							ctrl_radcontrol::userDressed <- userDressed,
							ctrl_radcontrol::userMoved <- userMoved,
							ctrl_radcontrol::stepMoved <- stepMoved,
							ctrl_radcontrol::movementWasAllowed <- movementWasAllowed,
							ctrl_radcontrol::allowedMovement <- allowedMovement,
							ctrl_radcontrol::noticedMovementOccurred <- noticedMovementOcurred,
							ctrl_radcontrol::movementInitiated <- movementInitiated,
							ctrl_radcontrol::forceInitiated <- forceInitiated,
							ctrl_radcontrol::forceWasAllowed <- forceWasAllowed,
							ctrl_radcontrol::handlingCorrect <- handlingCorrect,
							ctrl_radcontrol::garmentAtHand <- garmentAtHand,
							ctrl_radcontrol::arrivedAtGarment <- arrivedAtGarment,
							ctrl_radcontrol::garmentGripped <- garmentGripped,
							ctrl_radcontrol::orientedGarment <- orientedGarment,
							ctrl_radcontrol::reorientGarmentCall <- reorientGarmentCall,
							ctrl_radcontrol::pushTowardsCall <- pushTowardsCall,
							ctrl_radcontrol::checkFaultCall <- checkFaultCall,
							ctrl_radcontrol::setEEForcesCall <- setEEForcesCall,
							ctrl_radcontrol::getEEPosCall <- getEEPosCall,
							ctrl_radcontrol::detectGarmentCall <- detectGarmentCall,
							ctrl_radcontrol::gripCall <- gripCall,
							ctrl_radcontrol::checkCorrectHandlingCall <- checkCorrectHandlingCall,
							ctrl_radcontrol::checkUserDressedCall <- checkUserDressedCall,
							ctrl_radcontrol::setEEPosCall <- setEEPosCall,
							ctrl_radcontrol::checkMovementCall <- checkMovementCall,
							ctrl_radcontrol::stepTowardsCall <- stepTowardsCall,
							ctrl_radcontrol::detectSecondArmCall <- detectSecondArmCall,
							ctrl_radcontrol::releaseGripCall <- releaseGripCall,
							ctrl_radcontrol::detectUserPoseCall <- detectUserPoseCall
						]]
						\ {|
							ctrl_radcontrol::forceApplied
						|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	
	-- O version (optimised)
	
	O__(id__,
			    const_RobotAssistedDressing_ctrl_radcontrol_Kp,
			    const_RobotAssistedDressing_ctrl_radcontrol_Ki,
			    const_RobotAssistedDressing_ctrl_radcontrol_Kd,
			    const_RobotAssistedDressing_ctrl_radcontrol_step,
			    const_radcontrol_CDressingControl_stm_movement_EPSILON,
			    const_radcontrol_CDressingControl_stm_movement_TARGET_TOTAL_FORCE) = sbisim(diamond(	(
			(
				(SKIP)
					[|{||}|]
				(
					(
						let
							const_radcontrol_CDressingControl_Kp = 1
							const_radcontrol_CDressingControl_Ki = 1
							const_radcontrol_CDressingControl_Kd = 0
							const_radcontrol_CDressingControl_step = 0
						within 
						ctrl_radcontrol::O__(id__,
								    const_radcontrol_CDressingControl_Kp,
								    const_radcontrol_CDressingControl_Ki,
								    const_radcontrol_CDressingControl_Kd,
								    const_radcontrol_CDressingControl_step,
								    const_radcontrol_CDressingControl_stm_movement_EPSILON,
								    const_radcontrol_CDressingControl_stm_movement_TARGET_TOTAL_FORCE)[[
							ctrl_radcontrol::terminate <- terminate,
							ctrl_radcontrol::snaggingDetected <- snaggingDetected,
							ctrl_radcontrol::garmentDetected <- garmentDetected,
							ctrl_radcontrol::dressingRequest <- dressingRequest,
							ctrl_radcontrol::userInterrupt <- userInterrupt,
							ctrl_radcontrol::invalidPoseDetected <- invalidPoseDetected,
							ctrl_radcontrol::poseDetected <- poseDetected,
							ctrl_radcontrol::invalidTrajectory <- invalidTrajectory,
							ctrl_radcontrol::armConfig <- armConfig,
							ctrl_radcontrol::resumeDressing <- resumeDressing,
							ctrl_radcontrol::emergencyStop <- emergencyStop,
							ctrl_radcontrol::otherAgentDetected <- otherAgentDetected,
							ctrl_radcontrol::backgroundNoiseLevel <- backgroundNoiseLevel,
							ctrl_radcontrol::gripCorrect <- gripCorrect,
							ctrl_radcontrol::gripperEngaged <- gripperEngaged,
							ctrl_radcontrol::dressedJoint <- dressedJoint,
							ctrl_radcontrol::correctedMovement <- correctedMovement,
							ctrl_radcontrol::secondHandDetected <- secondHandDetected,
							ctrl_radcontrol::collisionStop <- collisionStop,
							ctrl_radcontrol::forceEndEffector <- forceEndEffector,
							ctrl_radcontrol::collisionResume <- collisionResume,
							ctrl_radcontrol::endEffectorPosition <- endEffectorPosition,
							ctrl_radcontrol::userDressed <- userDressed,
							ctrl_radcontrol::userMoved <- userMoved,
							ctrl_radcontrol::stepMoved <- stepMoved,
							ctrl_radcontrol::movementWasAllowed <- movementWasAllowed,
							ctrl_radcontrol::allowedMovement <- allowedMovement,
							ctrl_radcontrol::noticedMovementOccurred <- noticedMovementOcurred,
							ctrl_radcontrol::movementInitiated <- movementInitiated,
							ctrl_radcontrol::forceInitiated <- forceInitiated,
							ctrl_radcontrol::forceWasAllowed <- forceWasAllowed,
							ctrl_radcontrol::handlingCorrect <- handlingCorrect,
							ctrl_radcontrol::garmentAtHand <- garmentAtHand,
							ctrl_radcontrol::arrivedAtGarment <- arrivedAtGarment,
							ctrl_radcontrol::garmentGripped <- garmentGripped,
							ctrl_radcontrol::orientedGarment <- orientedGarment,
							ctrl_radcontrol::reorientGarmentCall <- reorientGarmentCall,
							ctrl_radcontrol::pushTowardsCall <- pushTowardsCall,
							ctrl_radcontrol::checkFaultCall <- checkFaultCall,
							ctrl_radcontrol::setEEForcesCall <- setEEForcesCall,
							ctrl_radcontrol::getEEPosCall <- getEEPosCall,
							ctrl_radcontrol::detectGarmentCall <- detectGarmentCall,
							ctrl_radcontrol::gripCall <- gripCall,
							ctrl_radcontrol::checkCorrectHandlingCall <- checkCorrectHandlingCall,
							ctrl_radcontrol::checkUserDressedCall <- checkUserDressedCall,
							ctrl_radcontrol::setEEPosCall <- setEEPosCall,
							ctrl_radcontrol::checkMovementCall <- checkMovementCall,
							ctrl_radcontrol::stepTowardsCall <- stepTowardsCall,
							ctrl_radcontrol::detectSecondArmCall <- detectSecondArmCall,
							ctrl_radcontrol::releaseGripCall <- releaseGripCall,
							ctrl_radcontrol::detectUserPoseCall <- detectUserPoseCall
						]]
						\ {|
							ctrl_radcontrol::forceApplied
						|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	))
	
	-- visible state optimised equivalent
	
	VS_O__(id__,
			    const_RobotAssistedDressing_ctrl_radcontrol_Kp,
			    const_RobotAssistedDressing_ctrl_radcontrol_Ki,
			    const_RobotAssistedDressing_ctrl_radcontrol_Kd,
			    const_RobotAssistedDressing_ctrl_radcontrol_step,
			    const_radcontrol_CDressingControl_stm_movement_EPSILON,
			    const_radcontrol_CDressingControl_stm_movement_TARGET_TOTAL_FORCE) = sbisim(diamond(	(
			(
				(SKIP)
					[|{||}|]
				(
					(
						let
							const_radcontrol_CDressingControl_Kp = 1
							const_radcontrol_CDressingControl_Ki = 1
							const_radcontrol_CDressingControl_Kd = 0
							const_radcontrol_CDressingControl_step = 0
						within 
						ctrl_radcontrol::VS_O__(id__,
								    const_radcontrol_CDressingControl_Kp,
								    const_radcontrol_CDressingControl_Ki,
								    const_radcontrol_CDressingControl_Kd,
								    const_radcontrol_CDressingControl_step,
								    const_radcontrol_CDressingControl_stm_movement_EPSILON,
								    const_radcontrol_CDressingControl_stm_movement_TARGET_TOTAL_FORCE)[[
							ctrl_radcontrol::terminate <- terminate,
							ctrl_radcontrol::snaggingDetected <- snaggingDetected,
							ctrl_radcontrol::garmentDetected <- garmentDetected,
							ctrl_radcontrol::dressingRequest <- dressingRequest,
							ctrl_radcontrol::userInterrupt <- userInterrupt,
							ctrl_radcontrol::invalidPoseDetected <- invalidPoseDetected,
							ctrl_radcontrol::poseDetected <- poseDetected,
							ctrl_radcontrol::invalidTrajectory <- invalidTrajectory,
							ctrl_radcontrol::armConfig <- armConfig,
							ctrl_radcontrol::resumeDressing <- resumeDressing,
							ctrl_radcontrol::emergencyStop <- emergencyStop,
							ctrl_radcontrol::otherAgentDetected <- otherAgentDetected,
							ctrl_radcontrol::backgroundNoiseLevel <- backgroundNoiseLevel,
							ctrl_radcontrol::gripCorrect <- gripCorrect,
							ctrl_radcontrol::gripperEngaged <- gripperEngaged,
							ctrl_radcontrol::dressedJoint <- dressedJoint,
							ctrl_radcontrol::correctedMovement <- correctedMovement,
							ctrl_radcontrol::secondHandDetected <- secondHandDetected,
							ctrl_radcontrol::collisionStop <- collisionStop,
							ctrl_radcontrol::forceEndEffector <- forceEndEffector,
							ctrl_radcontrol::collisionResume <- collisionResume,
							ctrl_radcontrol::endEffectorPosition <- endEffectorPosition,
							ctrl_radcontrol::userDressed <- userDressed,
							ctrl_radcontrol::userMoved <- userMoved,
							ctrl_radcontrol::stepMoved <- stepMoved,
							ctrl_radcontrol::movementWasAllowed <- movementWasAllowed,
							ctrl_radcontrol::allowedMovement <- allowedMovement,
							ctrl_radcontrol::noticedMovementOccurred <- noticedMovementOcurred,
							ctrl_radcontrol::movementInitiated <- movementInitiated,
							ctrl_radcontrol::forceInitiated <- forceInitiated,
							ctrl_radcontrol::forceWasAllowed <- forceWasAllowed,
							ctrl_radcontrol::handlingCorrect <- handlingCorrect,
							ctrl_radcontrol::garmentAtHand <- garmentAtHand,
							ctrl_radcontrol::arrivedAtGarment <- arrivedAtGarment,
							ctrl_radcontrol::garmentGripped <- garmentGripped,
							ctrl_radcontrol::orientedGarment <- orientedGarment,
							ctrl_radcontrol::reorientGarmentCall <- reorientGarmentCall,
							ctrl_radcontrol::pushTowardsCall <- pushTowardsCall,
							ctrl_radcontrol::checkFaultCall <- checkFaultCall,
							ctrl_radcontrol::setEEForcesCall <- setEEForcesCall,
							ctrl_radcontrol::getEEPosCall <- getEEPosCall,
							ctrl_radcontrol::detectGarmentCall <- detectGarmentCall,
							ctrl_radcontrol::gripCall <- gripCall,
							ctrl_radcontrol::checkCorrectHandlingCall <- checkCorrectHandlingCall,
							ctrl_radcontrol::checkUserDressedCall <- checkUserDressedCall,
							ctrl_radcontrol::setEEPosCall <- setEEPosCall,
							ctrl_radcontrol::checkMovementCall <- checkMovementCall,
							ctrl_radcontrol::stepTowardsCall <- stepTowardsCall,
							ctrl_radcontrol::detectSecondArmCall <- detectSecondArmCall,
							ctrl_radcontrol::releaseGripCall <- releaseGripCall,
							ctrl_radcontrol::detectUserPoseCall <- detectUserPoseCall
						]]
						\ {|
							ctrl_radcontrol::forceApplied
						|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	))
	
	-- O version (optimised) with visible assignments
	
	AS_O__(id__,
			    const_RobotAssistedDressing_ctrl_radcontrol_Kp,
			    const_RobotAssistedDressing_ctrl_radcontrol_Ki,
			    const_RobotAssistedDressing_ctrl_radcontrol_Kd,
			    const_RobotAssistedDressing_ctrl_radcontrol_step,
			    const_radcontrol_CDressingControl_stm_movement_EPSILON,
			    const_radcontrol_CDressingControl_stm_movement_TARGET_TOTAL_FORCE) = sbisim(diamond(	(
			(
				(SKIP)
					[|{||}|]
				(
					(
						let
							const_radcontrol_CDressingControl_Kp = 1
							const_radcontrol_CDressingControl_Ki = 1
							const_radcontrol_CDressingControl_Kd = 0
							const_radcontrol_CDressingControl_step = 0
						within 
						ctrl_radcontrol::O__(id__,
								    const_radcontrol_CDressingControl_Kp,
								    const_radcontrol_CDressingControl_Ki,
								    const_radcontrol_CDressingControl_Kd,
								    const_radcontrol_CDressingControl_step,
								    const_radcontrol_CDressingControl_stm_movement_EPSILON,
								    const_radcontrol_CDressingControl_stm_movement_TARGET_TOTAL_FORCE)[[
							ctrl_radcontrol::terminate <- terminate,
							ctrl_radcontrol::snaggingDetected <- snaggingDetected,
							ctrl_radcontrol::garmentDetected <- garmentDetected,
							ctrl_radcontrol::dressingRequest <- dressingRequest,
							ctrl_radcontrol::userInterrupt <- userInterrupt,
							ctrl_radcontrol::invalidPoseDetected <- invalidPoseDetected,
							ctrl_radcontrol::poseDetected <- poseDetected,
							ctrl_radcontrol::invalidTrajectory <- invalidTrajectory,
							ctrl_radcontrol::armConfig <- armConfig,
							ctrl_radcontrol::resumeDressing <- resumeDressing,
							ctrl_radcontrol::emergencyStop <- emergencyStop,
							ctrl_radcontrol::otherAgentDetected <- otherAgentDetected,
							ctrl_radcontrol::backgroundNoiseLevel <- backgroundNoiseLevel,
							ctrl_radcontrol::gripCorrect <- gripCorrect,
							ctrl_radcontrol::gripperEngaged <- gripperEngaged,
							ctrl_radcontrol::dressedJoint <- dressedJoint,
							ctrl_radcontrol::correctedMovement <- correctedMovement,
							ctrl_radcontrol::secondHandDetected <- secondHandDetected,
							ctrl_radcontrol::collisionStop <- collisionStop,
							ctrl_radcontrol::forceEndEffector <- forceEndEffector,
							ctrl_radcontrol::collisionResume <- collisionResume,
							ctrl_radcontrol::endEffectorPosition <- endEffectorPosition,
							ctrl_radcontrol::userDressed <- userDressed,
							ctrl_radcontrol::userMoved <- userMoved,
							ctrl_radcontrol::stepMoved <- stepMoved,
							ctrl_radcontrol::movementWasAllowed <- movementWasAllowed,
							ctrl_radcontrol::allowedMovement <- allowedMovement,
							ctrl_radcontrol::noticedMovementOccurred <- noticedMovementOcurred,
							ctrl_radcontrol::movementInitiated <- movementInitiated,
							ctrl_radcontrol::forceInitiated <- forceInitiated,
							ctrl_radcontrol::forceWasAllowed <- forceWasAllowed,
							ctrl_radcontrol::handlingCorrect <- handlingCorrect,
							ctrl_radcontrol::garmentAtHand <- garmentAtHand,
							ctrl_radcontrol::arrivedAtGarment <- arrivedAtGarment,
							ctrl_radcontrol::garmentGripped <- garmentGripped,
							ctrl_radcontrol::orientedGarment <- orientedGarment,
							ctrl_radcontrol::reorientGarmentCall <- reorientGarmentCall,
							ctrl_radcontrol::pushTowardsCall <- pushTowardsCall,
							ctrl_radcontrol::checkFaultCall <- checkFaultCall,
							ctrl_radcontrol::setEEForcesCall <- setEEForcesCall,
							ctrl_radcontrol::getEEPosCall <- getEEPosCall,
							ctrl_radcontrol::detectGarmentCall <- detectGarmentCall,
							ctrl_radcontrol::gripCall <- gripCall,
							ctrl_radcontrol::checkCorrectHandlingCall <- checkCorrectHandlingCall,
							ctrl_radcontrol::checkUserDressedCall <- checkUserDressedCall,
							ctrl_radcontrol::setEEPosCall <- setEEPosCall,
							ctrl_radcontrol::checkMovementCall <- checkMovementCall,
							ctrl_radcontrol::stepTowardsCall <- stepTowardsCall,
							ctrl_radcontrol::detectSecondArmCall <- detectSecondArmCall,
							ctrl_radcontrol::releaseGripCall <- releaseGripCall,
							ctrl_radcontrol::detectUserPoseCall <- detectUserPoseCall
						]]
						\ {|
							ctrl_radcontrol::forceApplied
						|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	))
	
endmodule




