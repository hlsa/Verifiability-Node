
--
-- RoboChart generator version 3.0.0.202209090727
-- Automatically generated on 18-11-2022 19:31:55
--
-- Iterated compression status: true
-- Assertions compression status: false
--

module EnvironmentalMonitor
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i0|
	              NID_SensingHazard|
	              NID_OtherAgent|
	              NID_BackgroundNoise
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_otherAgent, set_otherAgent, setL_otherAgent, setR_otherAgent: core_boolean
	channel get_level, set_level, setL_level, setR_level: definitions_NoiseLevel
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel environmentalStop__: NIDS.InOut
	channel environmentalStop: InOut
	channel environmentalResume__: NIDS.InOut
	channel environmentalResume: InOut
	channel backgroundNoiseLevel__: NIDS.InOut.definitions_NoiseLevel
	channel backgroundNoiseLevel: InOut.definitions_NoiseLevel
	channel otherAgentDetected__: NIDS.InOut.core_boolean
	channel otherAgentDetected: InOut.core_boolean
	
	-- Declaring call and ret events for undefined operations
	
	enterSS = {|
	i0::enter,
	SensingHazard::enter,
	OtherAgent::enter,
	BackgroundNoise::enter
	|}
	
	enteredSS = 	{|
	SensingHazard::entered,
	OtherAgent::entered,
	BackgroundNoise::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	environmentalStop,
		environmentalResume,
		backgroundNoiseLevel,
		otherAgentDetected
		|}
	
	channel clockReset, clockResetL, clockResetR 
	
	localClockResets = {||}
	
	
	channel get_CLID_SensingHazard : core_clock_type 
	channel get_CLID_BackgroundNoise : core_clock_type 
	channel get_CLID_OtherAgent : core_clock_type 
	--channel increment__
	
	CLID_SensingHazard_clock_type(id__) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_BackgroundNoise_clock_type(id__) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_OtherAgent_clock_type(id__) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	

		-- Nodes --
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- Initial: i0
		module i0
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__) = D__(id__)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: SensingHazard
		module SensingHazard
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: OtherAgent
		module OtherAgent
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: BackgroundNoise
		module BackgroundNoise
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		-- END of Nodes --
		
		Timed(OneStep) {
		-- Operation calls --
		-- Only the undefined operations are declared here.
		-- If the state machine is in isolation, all required operations will be undefined.
		-- If it is in the context of a controller, the required operations not provided by the
		-- controller will be declared here, and the defined operations will be defined in the
		-- context of the Controller module, and therefore within scope of the state machine module.
		
		-- END of Operation calls --
	
		-- STM processes
		STM(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
		( 
			(
				(
					(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
				 	[[ share__ <- x__ | x__ <- {||} ]]
				)
			[| {share__} |]
			SKIP
			)
			[| union(sharedVarSync,{terminate}) |]
			dbisim(sharedVarMemory(id__))
		)\sharedVarHide
		,<{terminate},{tock}>)
		
		STM_VS_O(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
		( 
			(
				(
					(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
				 	[[ share__ <- x__ | x__ <- {||} ]]
				)
			[| {share__} |]
			SKIP
			)
			[| union(sharedVarSync,{terminate}) |]
			dbisim(sharedVarMemory(id__))
		)\sharedVarHide
		,<{terminate},{tock}>)
		
		-- Transitions
		Transitions(id__) = ((let
			Trans = share__choice(get_otherAgent?otherAgent -> get_level?level -> TimeOut_1(
				 (share__ -> SKIP
				 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; SensingHazard::enter -> SKIP))))
				 [] dbisim((otherAgentDetected__!NID_SensingHazard.in?otherAgent:{otherAgent|otherAgent <- core_boolean, (not (otherAgent))} -> share__choice(set_otherAgent!otherAgent -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(environmentalResume.out -> SKIP)) ; OtherAgent::enter -> SKIP)))
				 [] dbisim((otherAgentDetected__!NID_OtherAgent.in?otherAgent:{otherAgent|otherAgent <- core_boolean, otherAgent} -> share__choice(set_otherAgent!otherAgent -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(environmentalResume.out -> SKIP)) ; SensingHazard::enter -> SKIP)))
				 [] dbisim(((level==definitions_NoiseLevel_High))&(internal__!NID_SensingHazard -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(environmentalStop.out -> SKIP)) ; BackgroundNoise::enter -> SKIP)))
				 [] dbisim(((level!=definitions_NoiseLevel_High))&(internal__!NID_BackgroundNoise -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(environmentalResume.out -> SKIP)) ; SensingHazard::enter -> SKIP)))
				 []
				 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
				 )
			,SKIP);Trans
			)
		within
			Trans [|{terminate}|> SKIP
		)
		)
		
		-- Stateful
		-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
		
		-- Named process definitions
		MachineBody(id__) = 
			dbisim((
			let
				finalNodesEntered = {||}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i0::enter,
					SensingHazard::enter,
					OtherAgent::enter,
					BackgroundNoise::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_i0,otherAgentDetected__.NID_SensingHazard.in,otherAgentDetected__.NID_OtherAgent.in,internal__.NID_SensingHazard,internal__.NID_BackgroundNoise|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   i0::D__(id__)
						   [| { share__, terminate } |] (
						   SensingHazard::D__(id__)
						   [| { share__, terminate } |] (
						   OtherAgent::D__(id__)
						   [| { share__, terminate } |] (
						   BackgroundNoise::D__(id__)
						   )
						   )
						   )
						 )
						 [[SensingHazard::interrupt <- x__ | x__ <- {|interrupt,otherAgentDetected__.NID_SensingHazard.in,internal__.NID_SensingHazard|}]]
						 [[OtherAgent::interrupt <- x__ | x__ <- {|interrupt,otherAgentDetected__.NID_OtherAgent.in|}]]
						 [[BackgroundNoise::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_BackgroundNoise|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_otherAgent |} ]] 
						  [[set_otherAgent <- setL_otherAgent,set_level <- setL_level]]
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 			,setL_otherAgent
						 			,setL_level
						 			,setR_otherAgent
						 			|}) |]
						 ((i0::enter -> Transitions(id__))
						  [[ share__ <- x__ | x__ <- {| share__,setL_otherAgent,setL_level |} ]]
						  [[set_otherAgent <- setR_otherAgent]]
						 )
						)[[setL_otherAgent <- set_otherAgent,setL_level <- set_level]]
						 [[setR_otherAgent <- set_otherAgent]]
						)
					)
					 \ hideSet)
					[[
						environmentalStop__.x____ <- environmentalStop,
						environmentalResume__.x____ <- environmentalResume,
						backgroundNoiseLevel__.x____ <- backgroundNoiseLevel,
						otherAgentDetected__.x____ <- otherAgentDetected
						| x____ <- NIDS
					]]
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour(id__) = 
			dbisim((let
				stateClockSync = {|get_CLID_SensingHazard,SensingHazard::entered,get_CLID_BackgroundNoise,BackgroundNoise::entered,get_CLID_OtherAgent,OtherAgent::entered|}
			 within
				(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
			)
			)
		
		IteratedBehaviour(id__) = 
			dbisim((let
				stateClockSync = {|get_CLID_SensingHazard,SensingHazard::entered,get_CLID_BackgroundNoise,BackgroundNoise::entered,get_CLID_OtherAgent,OtherAgent::entered|}
			 within
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										MachineBody(id__)
										[| {|get_CLID_OtherAgent,OtherAgent::entered,terminate|} |]
										dbisim(Clock_CLID_OtherAgent(id__,0))
									)\{|get_CLID_OtherAgent|}
								)
								[| {|get_CLID_BackgroundNoise,BackgroundNoise::entered,terminate|} |]
								dbisim(Clock_CLID_BackgroundNoise(id__,0))
							)\{|get_CLID_BackgroundNoise|}
						)
						[| {|get_CLID_SensingHazard,SensingHazard::entered,terminate|} |]
						dbisim(Clock_CLID_SensingHazard(id__,0))
					)\{|get_CLID_SensingHazard|}
				)
				) \ union(stateClockSync,enteredSS)
			)
			)
		
		Stateful(id__) = 
			((let
				getsetLocalChannels = {|get_otherAgent,set_otherAgent,
				get_level,set_level|}
				clockSync = {||}
			within
				(Behaviour(id__) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__) [| {terminate} |] Clocks(id__))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful(id__) =
			(dbisim(
				sbisim(
					dbisim(
						sbisim(
							IteratedBehaviour(id__)
							[| {|get_level,set_level,terminate|} |]
							Memory_level(definitions_NoiseLevel_High)
						)\{|get_level,set_level|}
					)
					[| {|get_otherAgent,set_otherAgent,terminate|} |]
					Memory_otherAgent(true)
				)\{|get_otherAgent,set_otherAgent|}
			)
			)
		
		-- Visible counterparts
		MachineBody_VS_O(id__) = 
			dbisim((
			let
				finalNodesEntered = {||}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i0::enter,
					SensingHazard::enter,
					OtherAgent::enter,
					BackgroundNoise::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_i0,otherAgentDetected__.NID_SensingHazard.in,otherAgentDetected__.NID_OtherAgent.in,internal__.NID_SensingHazard,internal__.NID_BackgroundNoise|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   i0::VS_O__(id__)
						   [| { share__, terminate } |] (
						   SensingHazard::VS_O__(id__)
						   [| { share__, terminate } |] (
						   OtherAgent::VS_O__(id__)
						   [| { share__, terminate } |] (
						   BackgroundNoise::VS_O__(id__)
						   )
						   )
						   )
						 )
						 [[SensingHazard::interrupt <- x__ | x__ <- {|interrupt,otherAgentDetected__.NID_SensingHazard.in,internal__.NID_SensingHazard|}]]
						 [[OtherAgent::interrupt <- x__ | x__ <- {|interrupt,otherAgentDetected__.NID_OtherAgent.in|}]]
						 [[BackgroundNoise::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_BackgroundNoise|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_otherAgent |} ]] 
						  [[set_otherAgent <- setL_otherAgent,set_level <- setL_level]]
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 			,setL_otherAgent
						 			,setL_level
						 			,setR_otherAgent
						 			|}) |]
						 ((i0::enter -> Transitions(id__))
						  [[ share__ <- x__ | x__ <- {| share__,setL_otherAgent,setL_level |} ]]
						  [[set_otherAgent <- setR_otherAgent]]
						 )
						)[[setL_otherAgent <- set_otherAgent,setL_level <- set_level]]
						 [[setR_otherAgent <- set_otherAgent]]
						)
					)
					 \ hideSet)
					[[
						environmentalStop__.x____ <- environmentalStop,
						environmentalResume__.x____ <- environmentalResume,
						backgroundNoiseLevel__.x____ <- backgroundNoiseLevel,
						otherAgentDetected__.x____ <- otherAgentDetected
						| x____ <- NIDS
					]]
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour_VS_O(id__) = 
			dbisim((let
				stateClockSync = {|get_CLID_SensingHazard,SensingHazard::entered,get_CLID_BackgroundNoise,BackgroundNoise::entered,get_CLID_OtherAgent,OtherAgent::entered|}
			 within
				(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		IteratedBehaviour_VS_O(id__) = 
			dbisim((let
				stateClockSync = {|get_CLID_SensingHazard,SensingHazard::entered,get_CLID_BackgroundNoise,BackgroundNoise::entered,get_CLID_OtherAgent,OtherAgent::entered|}
			 within
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										MachineBody_VS_O(id__)
										[| {|get_CLID_OtherAgent,OtherAgent::entered,terminate|} |]
										dbisim(Clock_CLID_OtherAgent(id__,0))
									)\{|get_CLID_OtherAgent|}
								)
								[| {|get_CLID_BackgroundNoise,BackgroundNoise::entered,terminate|} |]
								dbisim(Clock_CLID_BackgroundNoise(id__,0))
							)\{|get_CLID_BackgroundNoise|}
						)
						[| {|get_CLID_SensingHazard,SensingHazard::entered,terminate|} |]
						dbisim(Clock_CLID_SensingHazard(id__,0))
					)\{|get_CLID_SensingHazard|}
				)
				) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		Stateful_VS_O(id__) = 
			dbisim((let
				getsetLocalChannels = {|get_otherAgent,set_otherAgent,
				get_level,set_level|}
				clockSync = {||}
			within
				(Behaviour_VS_O(id__) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__) [| {terminate} |] Clocks(id__))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful_VS_O(id__) =
			(dbisim(
				sbisim(
					dbisim(
						sbisim(
							IteratedBehaviour_VS_O(id__)
							[| {|get_level,set_level,terminate|} |]
							Memory_level(definitions_NoiseLevel_High)
						)\{|get_level,set_level|}
					)
					[| {|get_otherAgent,set_otherAgent,terminate|} |]
					Memory_otherAgent(true)
				)\{|get_otherAgent,set_otherAgent|}
			)
			)
		
		-- END
		
		-- Memory
		-- Memory variables
		Memory_otherAgent(otherAgent) =
			get_otherAgent!otherAgent -> Memory_otherAgent(otherAgent)
			[]
			set_otherAgent?x__ -> Memory_otherAgent(x__)
			[]
			terminate -> SKIP
		Memory_level(level) =
			get_level!level -> Memory_level(level)
			[]
			set_level?x__ -> Memory_level(x__)
			[]
			terminate -> SKIP
		
		-- varMemory process
		varMemory(id__) = Memory_otherAgent(true)
		[| { terminate } |] (
		Memory_level(definitions_NoiseLevel_High)
		)
		
		getsetLocalChannels = {|get_otherAgent,set_otherAgent,get_level,set_level|}
		
		-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
		FVS__(id__) = STM_VS_O(id__) \ localClockResets
		D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
		O__(id__) = dbisim(D__(id__))
		VS__(id__) = FVS__(id__)
		VS_O__(id__) = dbisim(FVS__(id__))
		HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
		FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
		HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
		
		-- Clocks
		
		Clocks(id__) = terminate -> SKIP
		
		clockSync = {||}
		
		Clock_CLID_SensingHazard(id__,x__) = 
			TimeOut_1(
				SensingHazard::entered -> Clock_CLID_SensingHazard(id__,0)
				[]
				get_CLID_SensingHazard!x__ -> Clock_CLID_SensingHazard(id__,x__)
				[]
				terminate -> SKIP,Clock_CLID_SensingHazard(id__,clock_type_plus(x__,1,CLID_SensingHazard_clock_type(id__))))
		Clock_CLID_BackgroundNoise(id__,x__) = 
			TimeOut_1(
				BackgroundNoise::entered -> Clock_CLID_BackgroundNoise(id__,0)
				[]
				get_CLID_BackgroundNoise!x__ -> Clock_CLID_BackgroundNoise(id__,x__)
				[]
				terminate -> SKIP,Clock_CLID_BackgroundNoise(id__,clock_type_plus(x__,1,CLID_BackgroundNoise_clock_type(id__))))
		Clock_CLID_OtherAgent(id__,x__) = 
			TimeOut_1(
				OtherAgent::entered -> Clock_CLID_OtherAgent(id__,0)
				[]
				get_CLID_OtherAgent!x__ -> Clock_CLID_OtherAgent(id__,x__)
				[]
				terminate -> SKIP,Clock_CLID_OtherAgent(id__,clock_type_plus(x__,1,CLID_OtherAgent_clock_type(id__))))
		
		StateClocks(id__) = dbisim(Clock_CLID_SensingHazard(id__,0))
		[| { terminate } |] (
		dbisim(Clock_CLID_BackgroundNoise(id__,0))
		[| { terminate } |] (
		dbisim(Clock_CLID_OtherAgent(id__,0))
		)
		)
		
		stateClockSync = {|get_CLID_SensingHazard,SensingHazard::entered,get_CLID_BackgroundNoise,BackgroundNoise::entered,get_CLID_OtherAgent,OtherAgent::entered|}
		
		-- Shared memory
		-- Shared memory variables
		
		-- sharedVarMemory process
		sharedVarMemory(id__) = terminate -> SKIP
		
		sharedVarSync = {||}
		
		sharedVarHide = {||}
		}
endmodule
