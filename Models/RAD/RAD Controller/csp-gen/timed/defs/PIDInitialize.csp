
--
-- RoboChart generator version 3.0.0.202209090727
-- Automatically generated on 18-11-2022 19:31:55
--
-- Iterated compression status: true
-- Assertions compression status: false
--

-- compileSelfContainedOperation
module OP_PIDInitialize
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i0|
	              NID_f0|
	              NID_Init
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_p, set_p, setL_p, setR_p: vector_real_3
	channel get_d, set_d, setL_d, setR_d: vector_real_3
	channel get_i, set_i, setL_i, setR_i: vector_real_3
	channel get_e, set_e, setL_e, setR_e: vector_real_3
	channel get_e_old, set_e_old, setL_e_old, setR_e_old: vector_real_3
	channel get_t, set_t, setL_t, setR_t: vector_real_3
	channel get_t_old, set_t_old, setL_t_old, setR_t_old: vector_real_3
	channel get_o, set_o, setL_o, setR_o: vector_real_3
	
	-- Shared variable channels
	channel set_EXT_p: vector_real_3
	channel set_EXT_d: vector_real_3
	channel set_EXT_i: vector_real_3
	channel set_EXT_e: vector_real_3
	channel set_EXT_e_old: vector_real_3
	channel set_EXT_t: vector_real_3
	channel set_EXT_t_old: vector_real_3
	channel set_EXT_o: vector_real_3
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	
	-- Declaring call and ret events for undefined operations
	
	enterSS = {|
	i0::enter,
	f0::enter,
	Init::enter
	|}
	
	enteredSS = 	{|
	f0::entered,
	Init::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
		set_EXT_p,
		set_EXT_d,
		set_EXT_i,
		set_EXT_e,
		set_EXT_e_old,
		set_EXT_t,
		set_EXT_t_old,
		set_EXT_o
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	set_EXT_p, set_p,
		set_EXT_d, set_d,
		set_EXT_i, set_i,
		set_EXT_e, set_e,
		set_EXT_e_old, set_e_old,
		set_EXT_t, set_t,
		set_EXT_t_old, set_t_old,
		set_EXT_o, set_o
		, share__
		|}
	
	channel clockReset, clockResetL, clockResetR 
	
	localClockResets = {||}
	
	
	channel get_CLID_f0 : core_clock_type 
	channel get_CLID_Init : core_clock_type 
	--channel increment__
	
	CLID_f0_clock_type(id__,
			          const_PIDInitialize_Kp,
			          const_PIDInitialize_Ki,
			          const_PIDInitialize_Kd,
			          const_PIDInitialize_step) = 
		let
			max = (clock_type_max(Union({
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_Init_clock_type(id__,
			          const_PIDInitialize_Kp,
			          const_PIDInitialize_Ki,
			          const_PIDInitialize_Kd,
			          const_PIDInitialize_step) = 
		let
			max = (clock_type_max(Union({
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	
	
		-- Nodes --
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- Initial: i0
		module i0
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) = D__(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- Final state: f0
		module f0
		
		exports
		
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				D__(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
						
						Entering 	= entered -> SKIP ; Active
						Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
						Interrupted	= share__choice(exit -> exited -> Inactive)
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) = D__(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: Init
		module Init
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(true & (share__choice(set_p!(0,0,0) -> SKIP)));share__choice(true & (share__choice(set_d!(0,0,0) -> SKIP)));share__choice(true & (share__choice(set_e!(0,0,0) -> SKIP)));share__choice(true & (share__choice(set_e_old!(0,0,0) -> SKIP)));share__choice(true & (share__choice(set_t!param_target -> SKIP)));share__choice(true & (share__choice(set_t_old!(0,0,0) -> SKIP)));share__choice(true & (share__choice(set_o!(0,0,0) -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(true & (share__choice(set_p!(0,0,0) -> SKIP)));share__choice(true & (share__choice(set_d!(0,0,0) -> SKIP)));share__choice(true & (share__choice(set_e!(0,0,0) -> SKIP)));share__choice(true & (share__choice(set_e_old!(0,0,0) -> SKIP)));share__choice(true & (share__choice(set_t!param_target -> SKIP)));share__choice(true & (share__choice(set_t_old!(0,0,0) -> SKIP)));share__choice(true & (share__choice(set_o!(0,0,0) -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_PIDInitialize_Kp,
						          const_PIDInitialize_Ki,
						          const_PIDInitialize_Kd,
						          const_PIDInitialize_step) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		-- END of Nodes --
		
		Timed(OneStep) {
		-- Operation calls --
		-- Only the undefined operations are declared here.
		-- If the state machine is in isolation, all required operations will be undefined.
		-- If it is in the context of a controller, the required operations not provided by the
		-- controller will be declared here, and the defined operations will be defined in the
		-- context of the Controller module, and therefore within scope of the state machine module.
		
		-- END of Operation calls --
	
		-- STM processes
		STM(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
		Stateful(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step) \ {terminate}
		
		STM_VS_O(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
		Stateful(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step) \ {terminate}
		
		-- Transitions
		Transitions(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step) = ((let
			Trans = TimeOut_1(
				 (share__ -> SKIP
				 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Init::enter -> SKIP))))
				 [] dbisim((true)&(internal__!NID_Init -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
				 []
				 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
				 )
			,SKIP);Trans
		within
			Trans [|{terminate}|> SKIP
		)
		)
		
		-- Stateful
		-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
		
		-- Named process definitions
		MachineBody(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step) = 
			dbisim((
			let
				finalNodesEntered = {|f0::entered|}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i0::enter,
					f0::enter,
					Init::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_i0,internal__.NID_Init|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   i0::D__(id__,
						   			param_target,
						   		    const_PIDInitialize_Kp,
						   		    const_PIDInitialize_Ki,
						   		    const_PIDInitialize_Kd,
						   		    const_PIDInitialize_step)
						   [| { share__, terminate } |] (
						   f0::D__(id__,
						   			param_target,
						   		    const_PIDInitialize_Kp,
						   		    const_PIDInitialize_Ki,
						   		    const_PIDInitialize_Kd,
						   		    const_PIDInitialize_step)
						   [| { share__, terminate } |] (
						   Init::D__(id__,
						   			param_target,
						   		    const_PIDInitialize_Kp,
						   		    const_PIDInitialize_Ki,
						   		    const_PIDInitialize_Kd,
						   		    const_PIDInitialize_step)
						   )
						   )
						 )
						 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[Init::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Init|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						|}) |]
						 ((i0::enter -> Transitions(id__,
						 			param_target,
						 		    const_PIDInitialize_Kp,
						 		    const_PIDInitialize_Ki,
						 		    const_PIDInitialize_Kd,
						 		    const_PIDInitialize_step))
						  [[ share__ <- x__ | x__ <- {| share__ |} ]]
						 )
						)
						)
					)
					 \ hideSet)
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__,
				 		          const_PIDInitialize_Kp,
				 		          const_PIDInitialize_Ki,
				 		          const_PIDInitialize_Kd,
				 		          const_PIDInitialize_step)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step) = 
			dbisim((let
				stateClockSync = {|get_CLID_Init,Init::entered|}
			 within
				(MachineBody(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
						          const_PIDInitialize_Kp,
						          const_PIDInitialize_Ki,
						          const_PIDInitialize_Kd,
						          const_PIDInitialize_step)) \ union(stateClockSync,enteredSS)
			)
			)
		
		
		Stateful(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step) = 
			((let
				getsetLocalChannels = {||}
				clockSync = {||}
			within
				(Behaviour(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 			param_target,
				 		    const_PIDInitialize_Kp,
				 		    const_PIDInitialize_Ki,
				 		    const_PIDInitialize_Kd,
				 		    const_PIDInitialize_step) [| {terminate} |] Clocks(id__,
				 		          const_PIDInitialize_Kp,
				 		          const_PIDInitialize_Ki,
				 		          const_PIDInitialize_Kd,
				 		          const_PIDInitialize_step))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		
		-- Visible counterparts
		MachineBody_VS_O(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step) = 
			dbisim((
			let
				finalNodesEntered = {|f0::entered|}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i0::enter,
					f0::enter,
					Init::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_i0,internal__.NID_Init|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   i0::VS_O__(id__,
						   			param_target,
						   		    const_PIDInitialize_Kp,
						   		    const_PIDInitialize_Ki,
						   		    const_PIDInitialize_Kd,
						   		    const_PIDInitialize_step)
						   [| { share__, terminate } |] (
						   f0::VS_O__(id__,
						   			param_target,
						   		    const_PIDInitialize_Kp,
						   		    const_PIDInitialize_Ki,
						   		    const_PIDInitialize_Kd,
						   		    const_PIDInitialize_step)
						   [| { share__, terminate } |] (
						   Init::VS_O__(id__,
						   			param_target,
						   		    const_PIDInitialize_Kp,
						   		    const_PIDInitialize_Ki,
						   		    const_PIDInitialize_Kd,
						   		    const_PIDInitialize_step)
						   )
						   )
						 )
						 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[Init::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Init|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						|}) |]
						 ((i0::enter -> Transitions(id__,
						 			param_target,
						 		    const_PIDInitialize_Kp,
						 		    const_PIDInitialize_Ki,
						 		    const_PIDInitialize_Kd,
						 		    const_PIDInitialize_step))
						  [[ share__ <- x__ | x__ <- {| share__ |} ]]
						 )
						)
						)
					)
					 \ hideSet)
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__,
				 		          const_PIDInitialize_Kp,
				 		          const_PIDInitialize_Ki,
				 		          const_PIDInitialize_Kd,
				 		          const_PIDInitialize_step)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour_VS_O(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step) = 
			dbisim((let
				stateClockSync = {|get_CLID_Init,Init::entered|}
			 within
				(MachineBody_VS_O(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
						          const_PIDInitialize_Kp,
						          const_PIDInitialize_Ki,
						          const_PIDInitialize_Kd,
						          const_PIDInitialize_step)) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		
		Stateful_VS_O(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step) = 
			dbisim((let
				getsetLocalChannels = {||}
				clockSync = {||}
			within
				(Behaviour_VS_O(id__,
							param_target,
						    const_PIDInitialize_Kp,
						    const_PIDInitialize_Ki,
						    const_PIDInitialize_Kd,
						    const_PIDInitialize_step) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 			param_target,
				 		    const_PIDInitialize_Kp,
				 		    const_PIDInitialize_Ki,
				 		    const_PIDInitialize_Kd,
				 		    const_PIDInitialize_step) [| {terminate} |] Clocks(id__,
				 		          const_PIDInitialize_Kp,
				 		          const_PIDInitialize_Ki,
				 		          const_PIDInitialize_Kd,
				 		          const_PIDInitialize_step))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		
		-- END
		
		-- Memory
		-- Memory variables
		
		-- varMemory process
		varMemory(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step) = terminate -> SKIP
		
		getsetLocalChannels = {||}
		
		-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
		FVS__(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step) = STM_VS_O(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step) \ localClockResets
		D__(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step) = timed_priority(STM(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step) \ union(internal_events,localClockResets))
		O__(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step) = dbisim(D__(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step))
		VS__(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step) = FVS__(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step)
		VS_O__(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step) = dbisim(FVS__(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step))
		HEXT__(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step) = O__(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step) [|shared_variable_events|] SKIP
		FVS_C__(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step) = dbisim(timed_priority(STM(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step) \ internal_events))
		HUP__(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step) = timed_priority(O__(id__,
					param_target,
				    const_PIDInitialize_Kp,
				    const_PIDInitialize_Ki,
				    const_PIDInitialize_Kd,
				    const_PIDInitialize_step) [|{share__}|] SKIP)
		
		-- Clocks
		
		Clocks(id__,
				          const_PIDInitialize_Kp,
				          const_PIDInitialize_Ki,
				          const_PIDInitialize_Kd,
				          const_PIDInitialize_step) = terminate -> SKIP
		
		clockSync = {||}
		
		Clock_CLID_Init(id__,x__,
				          const_PIDInitialize_Kp,
				          const_PIDInitialize_Ki,
				          const_PIDInitialize_Kd,
				          const_PIDInitialize_step) = 
			TimeOut_1(
				Init::entered -> Clock_CLID_Init(id__,0,
						          const_PIDInitialize_Kp,
						          const_PIDInitialize_Ki,
						          const_PIDInitialize_Kd,
						          const_PIDInitialize_step)
				[]
				get_CLID_Init!x__ -> Clock_CLID_Init(id__,x__,
						          const_PIDInitialize_Kp,
						          const_PIDInitialize_Ki,
						          const_PIDInitialize_Kd,
						          const_PIDInitialize_step)
				[]
				terminate -> SKIP,Clock_CLID_Init(id__,clock_type_plus(x__,1,CLID_Init_clock_type(id__,
						          const_PIDInitialize_Kp,
						          const_PIDInitialize_Ki,
						          const_PIDInitialize_Kd,
						          const_PIDInitialize_step)),
						          const_PIDInitialize_Kp,
						          const_PIDInitialize_Ki,
						          const_PIDInitialize_Kd,
						          const_PIDInitialize_step))
		
		StateClocks(id__,
				          const_PIDInitialize_Kp,
				          const_PIDInitialize_Ki,
				          const_PIDInitialize_Kd,
				          const_PIDInitialize_step) = dbisim(Clock_CLID_Init(id__,0,
				          const_PIDInitialize_Kp,
				          const_PIDInitialize_Ki,
				          const_PIDInitialize_Kd,
				          const_PIDInitialize_step))
		
		stateClockSync = {|get_CLID_Init,Init::entered|}
		}
			endmodule
