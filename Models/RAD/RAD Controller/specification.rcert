specification group RAD {
	target = module RobotAssistedDressing	
    sequence DressingRequest {
    	actors T and W
        any in MStops until
	        W->>T: event dressingRequest
	        any until
	        	deadlock (on T)
	        end
        end
    }
    
    sequence MovementToGripGarment {
        actors T and W
        any until
            T->>W: op detectGarment()
            any in MStops until
                W->>T: event garmentDetected(any) end
            any in set MMovementOrGripOrStop until
               W->>T: event gripCorrect(true) end 
            any in MStops until
                T->>W: event garmentGripped() end
        end
        any until
            deadlock (on T)
        end
    }
    
    sequence MovementToGripGarmentPar {
        actors T and W
        par
            any until
                T->>W: op detectGarment()
                W->>T: event garmentDetected(any)
                any in set MMovementOrGrip until
                   W->>T: event gripCorrect(true) end 
                T->>W: event garmentGripped()
                any until
                    deadlock (on T)
                end
            end
        and
            any in MStops until
                deadlock (on T)
            end
        end
    }
    
    sequence CorrectHandling {
        actors T and W
        par
            any until
                W->>T: event gripCorrect(true)
                T->>W: event garmentGripped()
                T->>W: op checkCorrectHandling()
                loop (at least 0 times)
                    W->>T: event handlingCorrect(false) (hot)
                    T->>W: op reorientGarment()
                    T->>W: op checkCorrectHandling() end
                W->>T: event handlingCorrect(true)
                any until
                    deadlock (on T)
                end
            end
        and
            any in MStops until
                deadlock (on T)
            end
        end
    }
   
    sequence DressesInOrder {
        actors T and W
        any except MJoints until
            T->>W: event dressedJoint(2) end
        any except MJoints until
            T->>W: event dressedJoint(1) end
        any except MJoints until
            T->>W: event dressedJoint(0) end
        any until
            deadlock (on T)
        end
    }
           
    sequence DressesOutOfOrder {
        actors T and W
        any except MJoints until
            T->>W: event dressedJoint(1) end
        any except MJoints until
            T->>W: event dressedJoint(2) end
        any except MJoints until
            T->>W: event dressedJoint(0) end
        any until
            deadlock (on T)
        end
    }

    // Currently the sequencing allows at most one movement to occur after 
    // an emergency stop if the emergency stop request occurs in between 
    // checking whether movement was allowed and making the movement
    // I don't know how we could do better without using some kind of interrupt or
    // priorities
    sequence RespondToStop {
        actors T and W
        loop
            any except MStop until
                W->>T: event emergencyStop(hot)
            end
            opt
                any except MMovement until
                    alt
                        T->>W: op setEEPos(any) else
                        T->>W: op setEEForces(any) end
                end
            end
            any except MMovement until
                W->>T: event resumeDressing end
        end
    }
    
    sequence RespondToStopQuickly {
        actors T and W
        loop
            any except set MStop until
                W->>T: event emergencyStop(hot)
            end
            opt
                any except set MMovement until
                    alt
                        T->>W: op setEEPos(any) else
                        T->>W: op setEEForces(any) end
                end
            end
            any except set MMovement until
                W->>T: event resumeDressing end
            any until
                deadlock (on T)
            end
        end
    }
        
    
    sequence RespondToStopImmediately {
        actors T and W
        loop
            any except MStop until
                W->>T: event emergencyStop(hot)
            end
            any in MStopMonitoring until
                opt
                    alt
                        T->>W: event movementWasAllowed else
                        T->>W: event forceWasAllowed end
                end
            end
            any in MStopMonitoring until
                opt
                    alt
                        T->>W: op setEEPos(any) else
                        T->>W: op setEEForces(any) end
                end
            end
            any except MMovement until
                W->>T: event resumeDressing end
        end
    }
        
    sequence RespondToCollision {
        actors T and W
        loop
            any except MCollision until
                W->>T: event collisionStop(hot)
            end
            opt
                any except MMovement until
                    alt
                        T->>W: op setEEPos(any) else
                        T->>W: op setEEForces(any) end
                end
            end
            any except MMovement until
                W->>T: event collisionResume end
        end
    }
message set MStops = {
        W->>T: event emergencyStop,
        W->>T: event resumeDressing,
        W->>T: event collisionStop,
        W->>T: event collisionResume,
        W->>T: event otherAgentDetected(any)
    }
    message set MU = universe
    message set MJoints = {
        T->>W: event dressedJoint(0),
        T->>W: event dressedJoint(1),
        T->>W: event dressedJoint(2)
    }
    message set MStop = {
        W->>T: event emergencyStop,
        W->>T: event resumeDressing
    }
    message set MCollision = {
        W->>T: event collisionStop,
        W->>T: event collisionResume
    }
    message set MOtherStops = {
        W->>T: event collisionStop,
        W->>T: event collisionResume,
        W->>T: event otherAgentDetected(any)
    }
    message set MMovement = {
        T->>W: op setEEPos(any),
        T->>W: op setEEForces(any)
    }
    message set MMovementToGarment = {
        T->>W: op setEEPos(any),
        T->>W: op setEEForces(any),
        T->>W: event arrivedAtGarment(),
        T->>W: event gripCorrect(true)
    }
    message set MMovementOrResume = {
        T->>W: op setEEPos(any),
        T->>W: op setEEForces(any),
        W->>T: event resumeDressing
    }
    message set MStopMonitoring = {
        W->>T: event otherAgentDetected(any),
        W->>T: event backgroundNoiseLevel(any),
        W->>T: event collisionStop,
        W->>T: event collisionResume,
        W->>T: event otherAgentDetected(any)
    }
    message set MCollisionMonitoring = {
        W->>T: event otherAgentDetected(any),
        W->>T: event backgroundNoiseLevel(any),
        W->>T: event otherAgentDetected(any)
    }
    message set MCollisionStop = {
        W->>T: event collisionStop,
        W->>T: event collisionResume
    }
    message set MMovementOrGrip = {
        T->>W: op setEEPos(any),
        T->>W: op setEEForces(any),
        T->>W: op grip(),
        W->>T: event gripCorrect(false),
        T->>W: event movementInitiated,
        W->>T: event endEffectorPosition(any),
        T->>W: event movementWasAllowed,
        T->>W: event stepMoved,
        W->>T: event garmentDetected(any),
        T->>W: op detectGarment()
    }
    message set MMovementOrGripOrStop = {
        T->>W: op setEEPos(any),
        T->>W: op setEEForces(any),
        T->>W: op grip(),
        W->>T: event gripCorrect(false),
        T->>W: event movementInitiated,
        W->>T: event resumeDressing,
        W->>T: event emergencyStop,
        W->>T: event otherAgentDetected(any),
        W->>T: event backgroundNoiseLevel(any),
        W->>T: event collisionStop,
        W->>T: event collisionResume,
        W->>T: event otherAgentDetected(any),
        W->>T: event endEffectorPosition(any),
        T->>W: event movementWasAllowed,
        T->>W: event stepMoved,
        W->>T: event garmentDetected(any),
        T->>W: op detectGarment()
    }
    actors = { target as T, world as W }
}
        
    
//	    
//// , MC->>W: event forceApplied
specification group RADInternal {
    target = components of controller radcontrol::CDressingControl
    actors = {
        component radcontrol::CDressingControl::stm_dressing as DC,
        component radcontrol::CDressingControl::stm_movement as MC,
        component radcontrol::CDressingControl::stm_stop     as ES,
        world as W
    } 
    message set MRelevant = {
        DC->>MC: event movementStart(any),
        ES->>MC: event allowMovement,
        MC->>W: event stepMoved,
        MC->>ES: event movementOccurred,
        MC->>ES: event movementStarted,
        MC->>ES: event movementEnded
    }
    message set MMCtoES = {
        DC->>MC: event movementStart(any),
        MC->>W: event stepMoved,
        MC->>ES: event movementOccurred,
        MC->>ES: event movementStarted,
        MC->>ES: event movementEnded
    }
    sequence DressingSequence {
        actors DC, MC, ES and W
        loop (at least 0)
            any except MRelevant until
                alt
                    DC->>MC: event movementStart(any)
                else
                    DC->>MC: event forceStart(any)
                end
            end
            any except MRelevant until
                MC->>ES: event movementStarted end
            loop (at least 0)
                any except MRelevant until
                    ES->>MC: event allowMovement end
                any except MRelevant until
                    alt
                        MC->>W: event stepMoved else
                        MC->>W: event forceApplied end
                end
                any except MRelevant until
                    MC->>ES: event movementOccurred end
            end
            any except MRelevant until
                MC->>ES: event movementEnded end
            any except MRelevant until
                MC->>DC: event movementEnd end
        end
    }
    
    sequence DressingSequence2a {
        actors DC, MC, ES and W
        loop (at least 0)
            par
                any except MRelevant until
                    ES->>MC: event allowMovement end
            and
                any except MRelevant until
                    DC->>MC: event movementStart(any) end
            end
            any except MRelevant until
                alt
                    MC->>W: event stepMoved else
                    MC->>W: event forceApplied end
            end
            any except MRelevant until
                MC->>ES: event movementOccurred end
            any except MRelevant until
                MC->>DC: event movementEnd end
        end
    }
    
    sequence DressingSequence2b {
        actors DC, MC, ES and W
        alt
            any except MRelevant until
                ES->>MC: event allowMovement
                any except MRelevant until
                    DC->>MC: event movementStart(any) end
            end
        else
            any except MRelevant until
                DC->>MC: event movementStart(any)
                any except MRelevant until
                    ES->>MC: event allowMovement end
            end
        end
        any except MRelevant until
            alt
                MC->>W: event stepMoved else
                MC->>W: event forceApplied end
        end
        any except MRelevant until
            MC->>ES: event movementOccurred end
        any except MMCtoES until
            MC->>DC: event movementEnd end
        any until
            deadlock (on DC)
        end
    }
    
    sequence DressingSequence3 {
        actors DC, MC, ES and W
        par
            any except MRelevant until
                ES->>MC: event allowMovement end
        and
            any except MRelevant until
                DC->>MC: event movementStart(any) end
        end
        any except MRelevant until
            alt
                MC->>W: event stepMoved else
                MC->>W: event forceApplied end
        end
        any except MRelevant until
            MC->>ES: event movementOccurred end
        any except MRelevant until
            alt
                MC->>W: event stepMoved else
                MC->>W: event forceApplied end
        end
        any except MRelevant until
            MC->>ES: event movementOccurred end
        loop (at least 0)
            any except MRelevant until
                ES->>W: event allowMovement end
            any except MRelevant until
                alt
                    MC->>W: event stepMoved else
                    MC->>W: event forceApplied end
            end
            any except MRelevant until
                MC->>ES: event movementOccurred end
        end
        loop (at least 0)
            par
                any except MRelevant until
                    MC->>DC: event movementEnd end
                any except MRelevant until
                    DC->>MC: event movementStart(any) end
            and
                ES->>MC: event allowMovement end
        end
                
    }
}
   	    	     
assertion D1: RAD::DressingRequest holds in the traces model
// Currently vacuously true since we do not get this far
assertion D2: RAD::DressesInOrder holds in the traces model
assertion D3: RAD::DressesOutOfOrder does not hold in the traces model
assertion D4: RAD::RespondToStop holds in the traces model
assertion D5: RAD::RespondToStopImmediately holds in the traces model
assertion D6: RAD::RespondToCollision holds in the traces model
assertion D7: RAD::RespondToStopQuickly holds in the timed model
assertion D8: RAD::MovementToGripGarment holds in the traces model
assertion D9: RAD::MovementToGripGarmentPar holds in the traces model
assertion D10: RAD::CorrectHandling holds in the traces model
assertion D10t: RAD::CorrectHandling holds in the timed model
assertion D11: RADInternal::DressingSequence holds in the traces model
assertion D12a: RADInternal::DressingSequence2a holds in the traces model
assertion D12b: RADInternal::DressingSequence2b holds in the traces model
