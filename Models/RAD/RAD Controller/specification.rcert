specification group RAD
    target = module RobotAssistedDressing
     
    actors = { target as T, world as W } 
    
    message set MStops = { W->>T: event emergencyStop, W->>T: event resumeDressing, W->>T: event collisionStop, W->>T: event collisionResume, W->>T: event otherAgentDetected }
    message set MU = universe
    message set MJoints = { T->>W: event dressedJoint(0), T->>W: event dressedJoint(1), T->>W: event dressedJoint(2) }
    message set MStop = { W->>T: event emergencyStop, W->>T: event resumeDressing }
    message set MOtherStops = { W->>T: event collisionStop, W->>T: event collisionResume, W->>T: event otherAgentDetected }
    message set MMovement = {T->>W: op setEEPos(any), T->>W: op setEEForces(any)}
    message set MMovementOrResume = {T->>W: op setEEPos(any), T->>W: op setEEForces(any), W->>T: event resumeDressing}
    message set MMonitoring = { W->>T: event otherAgentDetected(any), W->>T: event backgroundNoiseLevel(any), W->>T: event collisionStop, W->>T: event collisionResume, W->>T: event otherAgentDetected }
    // message set MHighNoise = {W->>T: event backgroundNoiseLevel(RobotAssistedDressing::NoiseLevel::High)}
     
    sequence DressingRequest
        actors T and W
        any in set MStops until: W->>T: event dressingRequest
        any until: deadlock on T
        
    sequence DressesInOrder
    	actors T and W
    	any except set MJoints until: T->>W: event dressedJoint(2)
    	any except set MJoints until: T->>W: event dressedJoint(1)
    	any except set MJoints until: T->>W: event dressedJoint(0)
    	any until: deadlock on T
   	    
    sequence DressesOutOfOrder
    	actors T and W
    	any except set MJoints until: T->>W: event dressedJoint(1)
    	any except set MJoints until: T->>W: event dressedJoint(2)
    	any except set MJoints until: T->>W: event dressedJoint(0)
    	any until: deadlock on T
    
    // Currently the sequencing allows at most one movement to occur after 
    // an emergency stop if the emergency stop request occurs in between 
    // checking whether movement was allowed and making the movement
    // I don't know how we could do better without using some kind of interrupt or
    // priorities
    sequence RespondToStop
    	actors T and W
    	loop
	    	any except set MStop until: W->>T: event emergencyStop(hot)
	    	opt
	    		any except set MMovement until:
	    		xalt: T->>W: op setEEPos(any)
	    		else: T->>W: op setEEForces(any)
	    		end
	    	end
	    	any except set MMovement until: W->>T: event resumeDressing
	    end
	    
	
    sequence RespondToStopImmediately
    	actors T and W
    	loop
	    	any except set MStop until: W->>T: event emergencyStop(hot)
	    	any in set MMonitoring until:
	    	opt
	    		alt: T->>W: event movementWasAllowed
	    		else: T->>W: event forceWasAllowed
	    		end
	    	end
	    	any in set MMonitoring until:
	    	opt
	    		alt: T->>W: op setEEPos(any)
	    		else: T->>W: op setEEForces(any)
	    		end
	    	end
	    	any except set MMovement until: W->>T: event resumeDressing
	    end
    	
    	
   	        
   	    	     
assertion D1: RAD::DressingRequest holds in the traces model
// Currently vacuously true since we do not get this far
assertion D2: RAD::DressesInOrder holds in the traces model
assertion D3: RAD::DressesOutOfOrder does not hold in the traces model
assertion D4: RAD::RespondToStop holds in the traces model
assertion D5: RAD::RespondToStopImmediately holds in the traces model