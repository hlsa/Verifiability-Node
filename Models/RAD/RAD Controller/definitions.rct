package definitions

// import math::*

interface FrankaArmControl {
	stepTowards(target: vector(real, 3), speed: real)
	pushTowards(target: vector(real, 3), force: real)
	grip ( )
	releaseGrip ( )
setEEForces ( v : vector ( real , 3 ) )
	setEEPos ( v : vector ( real , 3 ) )
reorientGarment ( )
checkMovement ( )
}

interface DressingEvents {
	event snaggingDetected
	event invalidTrajectory

	event invalidPoseDetected
	event userInterrupt

	event poseDetected : vector ( vector(real, 3) , 3 )
	event dressingRequest

	event garmentDetected : vector(real, 3)

	event armConfig

	event gripCorrect : boolean
	event gripperEngaged : boolean
event correctedMovement

	event secondHandDetected : vector(real, 3)
	event userDressed

event handlingCorrect : boolean
}

interface SensorOperations {
	detectGarment ( )
detectUserPose ( )
checkFault ( )
detectSecondArm ( )
getEEPos ( )
}

interface EmergencyStopEvents {
	event emergencyStop

	event resumeDressing
	
	event collisionStop
	event collisionResume
}

interface EnvironmentalEvents {
	event backgroundNoiseLevel : NoiseLevel
	event otherAgentDetected : boolean
}

enumeration NoiseLevel { High Medium Low }

interface MovementEvents {
	event movementStart : vector(real, 3)
	event movementEnd

}

interface ForceEvents {
	event forceStart : vector(real, 3)
	event forceEnd
}

interface HRIOperations {
	checkCorrectHandling ( )
checkUserDressed ( )
}

interface FrankaArmEvents {
	event endEffectorPosition : vector(real, 3)
	event forceEndEffector: vector(real, 3)
}

function jointPosition(xs: vector(vector(real, 3), 3), i: int): vector(real, 3) {
	postcondition result == xs[i+1]
}

function sqrt( x : real) : real {
	precondition x >= 0
	postcondition result * result == x
}

function pow( x : real, i: int ) : real {
	precondition i >= 0
	postcondition result == (if i > 0 then x * pow(x, i - 1) else 1 end)
}

function norm (v: vector(real, 3)): real {
	postcondition result == sqrt(pow(v[1], 2) + pow(v[2], 2) + pow(v[3], 2))
}

function scalarMul(s: real, v: vector(real, 3)): vector(real, 3) {
	postcondition result == [|s, 0, 0; 0, s, 0; 0, 0, s|] * v
}

function targetForces(current : vector(real, 3), target: vector(real, 3), targetTotalForce: real): vector(real, 3) {
	postcondition result == if norm(target - current) > 0 then (target - current) * (targetTotalForce / norm(target - current)) else [|0,0,0|] end
}

function dist ( v1 : vector(real, 3) , v2 : vector(real, 3) ) : real {
	postcondition result == norm(v1 - v2)
}

// Arm Kinematics
/*
interface DH {
	const DH1 : matrix(real, 4, 4) = [|0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0|]
	const DH2 : matrix(real, 4, 4) = [|0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0|]	
	const DH3 : matrix(real, 4, 4) = [|0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0|]	
	const DH4 : matrix(real, 4, 4) = [|0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0|]	
	const DH5 : matrix(real, 4, 4) = [|0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0|]	
	const DH6 : matrix(real, 4, 4) = [|0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0|]	
	const DH7 : matrix(real, 4, 4) = [|0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0|]	
}
 */