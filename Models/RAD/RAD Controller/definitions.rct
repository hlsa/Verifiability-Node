package definitions

interface FrankaArmControl {
setConfiguration (  )

	grip ( )
	releaseGrip ( )
}

interface DressingEvents {
	event snaggingDetected
	event invalidTrajectory

	event invalidPoseDetected
	event userInterrupt

	event poseDetected : vector ( Position , 3 )
	event dressingRequest

	event garmentDetected : Position

	event armConfig

	event gripCorrect : boolean
	event gripperEngaged : boolean
event correctedMovement

	event secondHandDetected : Position
	event userDressed

}

interface SensorOperations {
	detectGarment ( )
detectUserPose ( )
checkFault ( )
detectSecondArm ( )
getEEPos ( )
}

interface EmergencyStopEvents {
	event emergencyStop

	event resumeDressing
}

interface EnvironmentalEvents {
	event backgroundNoiseLevel : NoiseLevel
	event otherAgentDetected : boolean
}

enumeration NoiseLevel { High Medium Low }

interface MovementEvents {
	event movementStart : Position
	event movementEnd

}

interface HRIOperations {
	checkCorrectGrip ( )
checkUserDressed ( )
}

record Position { x : real y : real z : real } interface FrankaArmEvents {
	event endEffectorPosition : Position
}

function jointPosition(xs: vector(Position, 3), i: int): Position {
	postcondition forall xxs: vector(Position, 3), ii: int | ii >= 0 /\ ii < 3 @ jointPosition(xxs, ii) == xxs[ii]
}

function sqrt( a : real) : real {
	postcondition forall x : real | x > 0 @ sqrt ( x ) * sqrt ( x ) == x
}

function pow( x : real, i: nat ) : real {
	postcondition (forall x0 : real, i0: nat | i0 >= 0 @ pow (x0, i0 + 1) == pow(x0, i0)) /\ (forall x1 : real @ pow(x, 0) == 1)
}


function dist ( p1 : Position , p2 : Position ) : real {
	postcondition forall pa: real, pb: real @ dist ( p1 , p2 ) == sqrt( pow( p1 . x - p2 . x, 2 ) + pow( p1 . y - p2 . y, 2 ) + pow( p1 . z - p2 . z, 2 ) )
}

function gte (x: real, y: real): boolean {
	postcondition forall a: real, b: real @ gte(a, b) == (a >= b)
}