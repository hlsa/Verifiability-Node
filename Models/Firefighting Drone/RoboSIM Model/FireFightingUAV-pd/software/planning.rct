// The planning and decision making state machine.
diagram planning

import comm::*
import datatypes::*
import gcs::*

interface SearchVars {
	var searchComplete: boolean
}

interface Search {	
	search()
}

stm Planning {
	requires GCS
	
	uses GCSMissionEvents
	
	uses SprayPlanningEvents
	uses FirePlanningEvents
	uses FlightPlanningEvents
	uses BatteryPlanningEvents
	uses GimbalPlanningEvents
	uses VisualPlanningEvents

	requires Search
	uses SearchVars
	
	const WALL_LOC: Position
	const FIRE_TO: nat, INIT_TO: nat
	
	// Event caches
	var astatus: AircraftStatus
	
	initial I
	
	state Connect {		
		initial I
		state Waiting {}
		transition IW { from I to Waiting }
		transition PollS { from Waiting to Waiting trigger uavStatus?astatus }
	}
	transition On { from I to Connect }
	transition ConnectOK { from Connect to Connected condition astatus == AircraftStatus::Connected action missionStatus!MissionStatus::Connected }
	transition ConnectTO { from Connect to SwitchedOff condition INIT_TO < sinceEntry(Connect) action missionStatus!MissionStatus::ConnectTimeout }	

	state Connected {
		initial I
		
		transition Start { from I to TakeOffAndClimb }

		state TakeOffAndClimb {
			entry missionStatus!MissionStatus::TakingOff; navCommand!NavCommand::TakeOff
			
			initial I
			state Waiting {}
			transition IW { from I to Waiting }
			transition PollS { from Waiting to Waiting trigger uavStatus?astatus }
		}
		// TODO(@MattWindsor91): conditional on preflight checks passing
		transition TOFW { from TakeOffAndClimb to Mission condition astatus == AircraftStatus::AtAltitude }
		
		state Mission {		
			entry searchComplete = false
			exit vnavDisable
			
			initial I	
			state FlyToWall {
				entry missionStatus!MissionStatus::FlyingToWall; waypoint!WALL_LOC
				
				initial I
				state Waiting {}
				transition IW { from I to Waiting }
				transition PollS { from Waiting to Waiting trigger uavStatus?astatus }
			}	
			transition Init { from I to FlyToWall }
		
			state Search {
				entry missionStatus!MissionStatus::Searching
				during search()
			}
			// NOTE(@MattWindsor91): as of 2022-05-03, fire detection enable happens here.
			// It previously used to happen at the start of the mission,
			// but discussion with Shival and Hugo suggests it should happen in a more granular fashion.
			transition FWSE { from FlyToWall to Search condition astatus == AircraftStatus::AtWaypoint }
		
			state TrackFire {
				entry missionStatus!MissionStatus::TrackingFire
			}
			// TODO(@MattWindsor91): conditional on finding fire
			transition SETF { from Search to TrackFire trigger fireDetected action vnavEnable }
			transition TFSE { from TrackFire to LosingFire trigger fireLost }		
			
			state Spray {
				entry missionStatus!MissionStatus::Spraying
				
				initial I
				
				state WaitGimbal {}
				transition Init { from I to WaitGimbal }
				
				state Spraying {
					entry startSpray
					exit stopSpray
				}
				// Assuming that gimbal aim adjustments aren't going to be sent here.
				transition DoSpray { from WaitGimbal to Spraying trigger gimbalAimed }
			}		
			transition TFSP { from TrackFire to Spray trigger trackingGained }	
			transition SPTF { from Spray to TrackFire trigger trackingLost }		
			
			// NOTE(@MattWindsor91): added 2022-05-20 after discussion w/Pedro and Shival
			state LosingFire {
			}
			transition RegainedFire { from LosingFire to TrackFire trigger fireDetected }
			transition LostFire { from LosingFire to Search condition FIRE_TO < sinceEntry(LosingFire) action vnavDisable }
			
		}
	
		state GoHome {
			entry missionStatus!MissionStatus::GoingHome; navCommand!NavCommand::GoHome
			
			initial I
			state Waiting {}
			transition IW { from I to Waiting }
			transition Poll { from Waiting to Waiting trigger uavStatus?astatus }
		}
	
		transition SPRT { from Mission to GoHome condition searchComplete action missionStatus!MissionStatus::SearchComplete }
			
		state Land {
			entry missionStatus!MissionStatus::Landing; navCommand!NavCommand::Land
			
			initial I
			state Waiting {}
			transition IW { from I to Waiting }
			transition Poll { from Waiting to Waiting trigger uavStatus?astatus }		
		}
	
		transition Retreated { from GoHome to Land condition astatus == AircraftStatus::AtHome }
	
		// TODO(@MattWindsor91): disarming command	
		state Disarm {
			entry missionStatus!MissionStatus::Disarming
			
			initial I
			state Waiting {}
			transition IW { from I to Waiting }
			transition Poll { from Waiting to Waiting trigger uavStatus?astatus }
		}
		transition Landed { from Land to Disarm condition astatus == AircraftStatus::Landed }
	
		// TODO(@MattWindsor91): how do we handle issues in takeoff?
		transition BatMS { from Mission to GoHome trigger batteryLow action missionStatus!MissionStatus::BatteryError }
		transition WatMS { from Mission to GoHome trigger waterEmpty action missionStatus!MissionStatus::WaterError   }
	}

	final SwitchedOff
	// TODO(@MattWindsor91): P11: do we need to model switching off the UAV?
	transition SwitchOff { from Connected to SwitchedOff condition astatus == AircraftStatus::Disarmed }
	
	// NOTE(@MattWindsor91 2022-05-16): removed, see comm.rct
	// TODO(@MattWindsor91 2022-05-13): do we send a GCS signal here?
	//transition OutOfBattery { from Connected to SwitchedOff trigger batteryUnsafe }
}
